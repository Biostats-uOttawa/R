{"title":"Data","markdown":{"headingText":"Data","headingAttr":{"id":"sec-data-r","classes":[],"keyvalue":[]},"containsRefs":false,"markdown":"\nUntil now, you've created fairly simple data in R and stored it as a vector (@sec-funcs).\nHowever, most (if not all) of you will have much more complicated datasets from your various experiments and surveys that go well beyond what a vector can handle.\nLearning how R deals with different types of data and data structures, how to import your data into R and how to manipulate and summarize your data are some of the most important skills you will need to master.\n\nIn this Chapter we'll go over the main data types in R and focus on some of the most common data structures.\nWe will also cover how to import data into R from an external file, how to manipulate (wrangle) and summarize data and finally how to export data from R to an external file.\n\n## Data types\n\nUnderstanding the different types of data and how R deals with these data is important.\nThe temptation is to glaze over and skip these technical details, but beware, this can come back to bite you somewhere unpleasant if you don't pay attention.\nWe've already seen an example (@sec-r_objs) of this when we tried (and failed) to add two character objects together using the `+` operator.\n\nR has six basic types of data; numeric, integer, logical, complex and character.\nThe keen eyed among you will notice we've only listed five data types here, the final data type is raw which we won't cover as it's not useful 99.99% of the time.\nWe also won't cover complex numbers, but will let you [imagine][complex_num] that part!\n\n\n  - **Numeric** data are numbers that contain a decimal.\nActually they can also be whole numbers but we'll gloss over that.\n\n  - **Integers** are whole numbers (those numbers without a decimal point).\n\n  - **Logical** data take on the value of either `TRUE` or `FALSE`.\nThere's also another special type of logical called `NA` to represent missing values.\n\n  - **Character** data are used to represent string values.\nYou can think of character strings as something like a word (or multiple words).\nA special type of character string is a *factor*, which is a string but with additional attributes (like levels or an order).\nWe'll cover factors later.\n\n\nR is (usually) able to automatically distinguish between different classes of data by their nature and the context in which they're used although you should bear in mind that R can't actually read your mind and you may have to explicitly tell R how you want to care a data type.\nYou can find out the type (or class) of any object using the `class()` function.\n\n```{r}\n#| echo: true\n#| eval: true\nnum <- 2.2\nclass(num)\n\nchar <- \"hello\"\nclass(char)\n\nlogi <- TRUE\nclass(logi)\n```\n\nAlternatively, you can ask if an object is a specific class using using a logical test.\nThe `is.[classOfData]()` family of functions will return either a `TRUE` or a `FALSE`.\n\n```{r}\n#| echo: true\n#| eval: true\nis.numeric(num)\n\nis.character(num)\n\nis.character(char)\n\nis.logical(logi)\n```\n\nIt can sometimes be useful to be able to change the class of a variable using the `as.[className]()` family of coercion functions, although you need to be careful when doing this as you might receive some unexpected results (see what happens below when we try to convert a character string to a numeric).\n \n```{r}\n#| echo: true\n#| eval: true\n# coerce numeric to character\nclass(num)\nnum_char <- as.character(num)\nnum_char\nclass(num_char)\n\n# coerce character to numeric!\nclass(char)\nchar_num <- as.numeric(char)\n```\n\nHere's a summary table of some of the logical test and coercion functions available to you.\n\n|     Type       |    Logical test       |     Coercing       |\n|:--------------:|:-------------------:|:-----------------:|\n|  Character     |   `is.character`   |   `as.character`   |\n|  Numeric   |   `is.numeric`   |   `as.numeric`   |\n|  Logical | `is.logical` | `as.logical` |\n|  Factor   |   `is.factor`  |   `as.factor`  |\n|  Complex     |   `is.complex`    |   `as.complex`    |\n\n## Data structures\n\nNow that you've been introduced to some of the most important classes of data in R, letâ€™s have a look at some of main structures that we have for storing these data.\n\n### Scalars and vectors {#sec-scal_vecs}\n\nPerhaps the simplest type of data structure is the vector.\nYou've already been introduced to vectors in @sec-funcs although some of the vectors you created only contained a single value.\nVectors that have a single value (length 1) are called scalars.\nVectors can contain numbers, characters, factors or logicals, but the key thing to remember is that all the elements inside a vector must be of the same class.\nIn other words, vectors can contain either numbers, characters or logical but not mixtures of these types of data.\nThere is one important exception to this, you can include `NA` (remember this is special type of logical) to denote missing data in vectors with other data types.\n\n\n```{r}\n#| label: data_struc\n#| echo: false\n#| out-width: 40%\n#| fig-align: center\nknitr::include_graphics(path = \"images/data/scal_vec.png\")\n```\n\n### Matrices and arrays {#sec-mat_array}\n\nAnother useful data structure used in many disciplines such as population ecology, theoretical and applied statistics is the matrix.\nA matrix is simply a vector that has additional attributes called dimensions.\nArrays are just multidimensional matrices.\nAgain, matrices and arrays must contain elements all of the same data class.\n\n\n```{r}\n#| label: data_struc2\n#| echo: false\n#| out-width: 50%\n#| fig-align: center\nknitr::include_graphics(path = \"images/data/mat_array.png\")\n```\n\n\nA convenient way to create a matrix or an array is to use the `matrix()` and `array()` functions respectively.\nBelow, we will create a matrix from a sequence 1 to 16 in four rows (`nrow = 4`) and fill the matrix row-wise (`byrow = TRUE`) rather than the default column-wise.\nWhen using the `array()` function we define the dimensions using the `dim =` argument, in our case 2 rows, 4 columns in 2 different matrices.\n  \n\n```{r}\n#| echo: true\n#| eval: true\nmy_mat <- matrix(1:16, nrow = 4, byrow = TRUE)\nmy_mat\n\nmy_array <- array(1:16, dim = c(2, 4, 2))\nmy_array\n```\n\nSometimes it's also useful to define row and column names for your matrix but this is not a requirement.\nTo do this use the `rownames()` and `colnames()` functions.\n\n```{r}\n#| echo: true\n#| eval: true\nrownames(my_mat) <- c(\"A\", \"B\", \"C\", \"D\")\ncolnames(my_mat) <- c(\"a\", \"b\", \"c\", \"d\")\nmy_mat\n```\n\nOnce you've created your matrices you can do useful stuff with them and as you'd expect, R has numerous built in functions to perform matrix operations.\nSome of the most common are given below.\nFor example, to transpose a matrix we use the transposition function `t()`\n\n```{r}\n#| echo: true\n#| eval: true\nmy_mat_t <- t(my_mat)\nmy_mat_t\n```\n\nTo extract the diagonal elements of a matrix and store them as a vector we can use the `diag()` function\n\n```{r}\n#| echo: true\n#| eval: true\nmy_mat_diag <- diag(my_mat)\nmy_mat_diag\n```\n\nThe usual matrix addition, multiplication etc can be performed.\nNote the use of the `%*%` operator to perform matrix multiplication.\n\n```{r}\n#| echo: true\n#| eval: true\nmat.1 <- matrix(c(2, 0, 1, 1), nrow = 2) # notice that the matrix has been filled\nmat.1 # column-wise by default\n\nmat.2 <- matrix(c(1, 1, 0, 2), nrow = 2)\nmat.2\n\nmat.1 + mat.2 # matrix addition\nmat.1 * mat.2 # element by element products\nmat.1 %*% mat.2 # matrix multiplication\n```\n\n### Lists {#sec-lists}\n\nThe next data structure we will quickly take a look at is a list.\nWhilst vectors and matrices are constrained to contain data of the same type, lists are able to store mixtures of data types.\nIn fact we can even store other data structures such as vectors and arrays within a list or even have a list of a list.\nThis makes for a very flexible data structure which is ideal for storing irregular or non-rectangular data (see @sec-prog_r for an example).\n\nTo create a list we can use the `list()` function.\nNote how each of the three list elements are of different classes (character, logical, and numeric) and are of different lengths.\n\n```{r}\n#| echo: true\n#| eval: true\nlist_1 <- list(\n  c(\"black\", \"yellow\", \"orange\"),\n  c(TRUE, TRUE, FALSE, TRUE, FALSE, FALSE),\n  matrix(1:6, nrow = 3)\n)\nlist_1\n```\n\nElements of the list can be named during the construction of the list \n\n```{r}\n#| echo: true\n#| eval: true\nlist_2 <- list(\n  colours = c(\"black\", \"yellow\", \"orange\"),\n  evaluation = c(TRUE, TRUE, FALSE, TRUE, FALSE, FALSE),\n  time = matrix(1:6, nrow = 3)\n)\nlist_2\n```\n\nor after the list has been created using the `names()` function\n\n```{r}\n#| echo: true\n#| eval: true\nnames(list_1) <- c(\"colours\", \"evaluation\", \"time\")\nlist_1\n```\n\n### Data frames {#sec-df}\n\nBy far the most commonly used data structure to store data in is the data frame.\nA data frame is a powerful two-dimensional object made up of rows and columns which looks superficially very similar to a matrix.\nHowever, whilst matrices are restricted to containing data all of the same type, data frames can contain a mixture of different types of data.\nTypically, in a data frame each row corresponds to an individual observation and each column corresponds to a different measured or recorded variable.\nThis setup may be familiar to those of you who use LibreOffice Calc or Microsoft Excel to manage and store your data.\nPerhaps a useful way to think about data frames is that they are essentially made up of a bunch of vectors (columns) with each vector containing its own data type but the data type can be different between vectors.\n\nAs an example, the data frame below contains the results of an experiment to determine the effect of parental care (with or without) of unicorns (*Unicornus magnificens*) on offsprings growth under 3 different food availability regime.\nThe data frame has 8 variables (columns) and each row represents an individual unicorn.\nThe variables `care` and `food` are factors ([categorical][cat-var] variables).\nThe `p_care` variable has 2 levels (`care` and `no_care`) and the `food` level variable has 3 levels (`low`, `medium` and `high`).\nThe variables `height`, `weight`, `mane_size` and `fluffyness` are numeric and the variable `horn_rings` is an integer representing the number of rings on the horn.\nAlthough the variable `block` has numeric values, these do not really have any order and could also be treated as a factor (i.e.\nthey could also have been called A and B).\n\n\n```{r}\n#| label: tbl-import-data\n#| echo: false\n#| message: false\n#| tbl-cap: Imported unicorn data\nlibrary(kableExtra)\nunicorns <- read.csv(\"data/unicorns.csv\")\nknitr::kable(rbind(head(unicorns), tail(unicorns)), row.names = FALSE, booktabs = TRUE)\n```\n\n\nThere are a couple of important things to bear in mind about data frames.\nThese types of objects are known as rectangular data (or tidy data) as each column must have the same number of observations.\nAlso, any missing data should be recorded as an `NA` just as we did with our vectors.\n\nWe can construct a data frame from existing data objects such as vectors using the `data.frame()` function.\nAs an example, let's create three vectors `p.height`, `p.weight` and `p.names` and include all of these vectors in a data frame object called `dataf`.\n\n```{r}\n#| label: dataf\n#| echo: true\np.height <- c(180, 155, 160, 167, 181)\np.weight <- c(65, 50, 52, 58, 70)\np.names <- c(\"Joanna\", \"Charlotte\", \"Helen\", \"Karen\", \"Amy\")\n\ndataf <- data.frame(height = p.height, weight = p.weight, names = p.names)\ndataf\n```\n\nYou'll notice that each of the columns are named with variable name we supplied when we used the `data.frame()` function.\nIt also looks like the first column of the data frame is a series of numbers from one to five.\nActually, this is not really a column but the name of each row.\nWe can check this out by getting R to return the dimensions of the `dataf` object using the `dim()` function.\nWe see that there are 5 rows and 3 columns.\n\n```{r}\n#| label: dataf2\n#| echo: true\ndim(dataf) # 5 rows and 3 columns\n```\n\nAnother really useful function which we use all the time is `str()` which will return a compact summary of the structure of the data frame object (or any object for that matter).\n\n```{r}\n#| label: dataf3\n#| echo: true\nstr(dataf)\n```\n\nThe `str()` function gives us the data frame dimensions and also reminds us that `dataf` is a `data.frame` type object.\nIt also lists all of the variables (columns) contained in the data frame, tells us what type of data the variables contain and prints out the first five values.\nWe often copy this summary and place it in our R scripts with comments at the beginning of each line so we can easily refer back to it whilst writing our code.\nWe showed you how to comment blocks in RStudio @sec-proj_doc.\n\nAlso notice that R has automatically decided that our `p.names` variable should be a character (`chr`) class variable when we first created the data frame.\nWhether this is a good idea or not will depend on how you want to use this variable in later analysis.\nIf we decide that this wasn't such a good idea we can change the default behaviour of the `data.frame()` function by including the argument `stringsAsFactors = TRUE`.\nNow our strings are automatically converted to factors.\n\n```{r}\n#| label: dataf4\n#| echo: true\np.height <- c(180, 155, 160, 167, 181)\np.weight <- c(65, 50, 52, 58, 70)\np.names <- c(\"Joanna\", \"Charlotte\", \"Helen\", \"Karen\", \"Amy\")\n\ndataf <- data.frame(\n  height = p.height, weight = p.weight, names = p.names,\n  stringsAsFactors = TRUE\n)\nstr(dataf)\n```\n\n\n## Importing data\n\nAlthough creating data frames from existing data structures is extremely useful, by far the most common approach is to create a data frame by importing data from an external file.\nTo do this, you'll need to have your data correctly formatted and saved in a file format that R is able to recognize.\nFortunately for us, R is able to recognize a wide variety of file formats, although in reality you'll probably end up only using two or three regularly.\n\n\n### Saving files to import\n\nThe easiest method of creating a data file to import into R is to enter your data into a spreadsheet using either Microsoft Excel or LibreOffice Calc and save the spreadsheet as a comma delimited file.\nWe prefer LibreOffice Calc as it's open source, platform independent and free but MS Excel is OK too (but see [here][excel_gotcha] for some gotchas).\nHere's the data from the petunia experiment we discussed previously displayed in LibreOffice.\nIf you want to follow along you can download the data file (*'unicorn.xlsx'*) from @sec-data-files.\n  \n\n\n```{r}\n#| label: LO-calc0\n#| echo: false\n#| out-width: 60%\n#| fig-align: center\nknitr::include_graphics(path = \"images/data/libre_off.png\")\n```\n\n\nFor those of you unfamiliar with the tab delimited file format it simply means that data in different columns are separated with a ',' character and is usually saved as a file with a '.csv' extension.\n\nTo save a spreadsheet as a comma delimited file in LibreOffice Calc select `File` -> `Save as ...` from the main menu.\nYou will need to specify the location you want to save your file in the 'Save in folder' option and the name of the file in the 'Name' option.\nIn the drop down menu located above the 'Save' button change the default 'All formats' to 'Text CSV (.csv)'.\n\n\n```{r}\n#| label: LO-calc\n#| echo: false\n#| out-width: 60%\n#| fig-align: center\nknitr::include_graphics(path = \"images/data/libre_off1.png\")\n```\n\n\nClick the Save button and then select the 'Use Text CSV Format' option.\nClick on OK to save the file.\n\n\n```{r}\n#| label: LO-calc2\n#| echo: false\n#| out-width: 40%\n#| fig-align: center\nknitr::include_graphics(path = \"images/data/libre_off2.png\")\n```\n\n\n\nThere are a couple of things to bear in mind when saving files to import into R which will make your life easier in the long run.\nKeep your column headings (if you have them) short and informative.\nAlso avoid spaces in your column headings by replacing them with an underscore or a dot (i.e.\nreplace `mane size` with `mane size` or `mane.size`) and avoid using special characters (i.e.\n`leaf area (mm^2)` or uppercase to simpy your life).\nRemember, if you have missing data in your data frame (empty cells) you should use an `NA` to represent these missing values or have an empty cell.\nThis will keep the data frame tidy.\n\n### Import functions {#sec-import_fnc}\n\nOnce you've saved your data file in a suitable format we can now read this file into R.\nThe workhorse function for importing data into R is the `read.table()` function (we discuss some alternatives later in the chapter).\nThe `read.table()` function is a very flexible function with a shed load of arguments (see `?read.table`) but it's quite simple to use.\nLet's import a comma delimited file called `unicorns.csv` which contains the data we saw previously in this Chapter (@sec-df) and assign it to an object called `unicorns`.\nThe file is located in a `data` directory which itself is located in our root directory (@sec-dir-struc).\nThe first row of the data contains the variable (column) names.\nTo use the `read.table()` function to import this file\n\n```{r}\n#| label: df1\n#| echo: true\nunicorns <- read.table(\n  file = \"data/unicorns.csv\", header = TRUE, sep = \",\", dec = \".\",\n  stringsAsFactors = TRUE\n)\n```\n\nThere are a few things to note about the above command.\nFirst, the file path and the filename (including the file extension) needs to be enclosed in either single or double quotes (i.e.\nthe `data/unicorns.txt` bit) as the `read.table()` function expects this to be a character string.\nIf your working directory is already set to the directory which contains the file, you donâ€™t need to include the entire file path just the filename.\nIn the example above, the file path is separated with a single forward slash `/`.\nThis will work regardless of the operating system you are using and we recommend you stick with this.\nHowever, Windows users may be more familiar with the single backslash notation and if you want to keep using this you will need to include them as double backslashes.\n\n::: {.callout-warning}\nNote though that the double backslash notation will **not** work on computers using Mac OSX or Linux operating systems.\nWe thus strongly discourage it since it is not reproducible\n:::\n\nThe `header = TRUE` argument specifies that the first row of your data contains the variable names (i.e.\n`food`, `block` etc).\nIf this is not the case you can specify `header = FALSE` (actually, this is the default value so you can omit this argument entirely).\nThe `sep = \",\"` argument tells R what is file delimiter.\n\nOther useful arguments include `dec =` and `na.strings =`.\nThe `dec =` argument allows you to change the default character (`.`) used for a decimal point.\nThis is useful if you're in a country where decimal places are usually represented by a comma (i.e.\n`dec = \",\"`).\nThe `na.strings =` argument allows you to import data where missing values are represented with a symbol other than `NA`.\nThis can be quite common if you are importing data from other statistical software such as Minitab which represents missing values as a `*` (`na.strings = \"*\"`).\n\nHonestly, from the `read.table()` a series of predefined functions are available.\nThey are all using `read.table()` but define format specific options.\nWe can simply `read.csv()`to read a csv file, with \",\" separation and \".\" for decimals.\nIn countries were \",\" is used for decimals, csv files use \";\" as a separator. \nIn this case using `read.csv2()` would be needed.\nWhen working with tab delimited files, the functions `read.delim()` and `read.delim2()`\ncan be used with \".\" and \",\" as decimal respectively.\n \n\nAfter importing our data into R , to see the contents of the data frame we could just type the name of the object as we have done previously.\n**BUT** before you do that, think about why you're doing this.\nIf your data frame is anything other than tiny, all you're going to do is fill up your Console with data.\nIt's not like you can easily check whether there are any errors or that your data has been imported correctly.\nA much better solution is to use our old friend the `str()` function to return a compact and informative summary of your data frame.\n\n```{r}\n#| label: df3\n#| echo: true\nstr(unicorns)\n```\n\nHere we see that `unicorns` is a 'data.frame' object which contains 96 rows and 8 variables (columns).\nEach of the variables are listed along with their data class and the first 10 values.\nAs we mentioned previously in this Chapter, it can be quite convenient to copy and paste this into your R script as a comment block for later reference.\n\nNotice also that your character string variables (`care` and `food`) have been imported as factors because we used the argument `stringsAsFactors = TRUE`.\nIf this is not what you want you can prevent this by using the `stringsAsFactors = FALSE` or from R version 4.0.0 you can just leave out this argument as `stringsAsFactors = FALSE` is the default.\n\n```{r}\n#| label: df4\n#| echo: true\nunicorns <- read.delim(file = \"data/unicorns.txt\")\nstr(unicorns)\n```\n\nIf we just wanted to see the names of our variables (columns) in the data frame we can use the `names()` function which will return a character vector of the variable names.\n\n```{r}\n#| label: df4.1\n#| echo: true\nnames(unicorns)\n```\n\nYou can even import spreadsheet files from MS Excel or other statistics software directly into R but our advice is that this should generally be avoided if possible as it just adds a layer of uncertainty between you and your data.\nIn our opinion it's almost always better to export your spreadsheets as tab or comma delimited files and then import them into R using one of the `read.table()` derivative function.\nIf you're hell bent on directly importing data from other software you will need to install the `foreign` package which has functions for importing Minitab, SPSS, Stata and SAS files. For MS Excel and LO Calc spreadsheets, there are a few packages that can be used.\n\n### Common import frustrations\n\nIt's quite common to get a bunch of really frustrating error messages when you first start importing data into R.\nPerhaps the most common is\n\n```r\nError in file(file, \"rt\") : cannot open the connection\nIn addition: Warning message:\nIn file(file, \"rt\") :\n  cannot open file 'unicorns.txt': No such file or directory\n```\n\nThis error message is telling you that R cannot find the file you are trying to import.\nIt usually rears its head for one of a couple of reasons (or all of them!).\nThe first is that you've made a mistake in the spelling of either the filename or file path.\nAnother common mistake is that you have forgotten to include the file extension in the filename (i.e.\n`.txt`).\nLastly, the file is not where you say it is or you've used an incorrect file path.\nUsing RStudio Projects (@sec-rsprojs) and having a logical directory structure (@sec-dir-struc) goes a long way to avoiding these types of errors.\n\nAnother really common mistake is to forget to include the `header = TRUE` argument when the first row of the data contains variable names.\nFor example, if we omit this argument when we import our `unicorns.txt` file everything looks OK at first (no error message at least)\n\n```{r}\n#| label: df6\n#| echo: true\nunicorns_bad <- read.table(file = \"data/unicorns.txt\", sep = \"\\t\")\n```\n\nbut when we take a look at our data frame using `str()`\n\n```{r}\n#| label: df7\n#| echo: true\nstr(unicorns_bad)\n```\n\nWe can see an obvious problem, all of our variables have been imported as factors and our variables are named `V1`, `V2`, `V3` ...\n`V8`.\nThe problem happens because we haven't told the `read.table()` function that the first row contains the variable names and so it treats them as data.\nAs soon as we have a single character string in any of our data vectors, R treats the vectors as character type data (remember all elements in a vector must contain the same type of data (@sec-scal_vecs)).\n\nThis is just one more argument to use `read.csv()` or `read.delim()` function with appropriate default values for arguments.\n\n### Other import options {#sec-import_other}\n\nThere are numerous other functions to import data from a variety of sources and formats.\nMost of these functions are contained in packages that you will need to install before using them.\nWe list a couple of the more useful packages and functions below.\n\nThe `fread()` function from the `read.table` package is great for importing large data files quickly and efficiently (much faster than the `read.table()` function).\nOne of the great things about the `fread()` function is that it will automatically detect many of the arguments you would normally need to specify (like `sep =` etc).\nOne of the things you will need to consider though is that the `fread()` function will return a `data.table` object not a `data.frame` as would be the case with the `read.table()` function.\nThis is usually not a problem as you can pass a `data.table` object to any function that only accepts `data.frame` objects.\nTo learn more about the differences between `data.table` and `data.frame` objects see [here][data-table].\n\n```{r}\n#| label: df8\n#| echo: true\n#| eval: false\nlibrary(read.table)\nall_data <- fread(file = \"data/unicorns.txt\")\n```\n\nVarious functions from the `readr` package are also very efficient at reading in large data files.\nThe `readr` package is part of the '[tidyverse][tidyverse]' collection of packages and provides many equivalent functions to base R for importing data.\nThe `readr` functions are used in a similar way to the `read.table()` or `read.csv()` functions and many of the arguments are the same (see `?readr::read_table` for more details).\nThere are however some differences.\nFor example, when using the `read_table()` function the `header = TRUE` argument is replaced by `col_names = TRUE` and the function returns a `tibble` class object which is the tidyverse equivalent of a `data.frame` object (see [here][tibbles] for differences).\n\n```{r}\n#| label: df9\n#| echo: true\n#| eval: false\nlibrary(readr)\n# import white space delimited files\nall_data <- read_table(file = \"data/unicorns.txt\", col_names = TRUE)\n\n# import comma delimited files\nall_data <- read_csv(file = \"data/unicorns.txt\")\n\n# import tab delimited files\nall_data <- read_delim(file = \"data/unicorns.txt\", delim = \"\\t\")\n\n# or use\nall_data <- read_tsv(file = \"data/unicorns.txt\")\n```\n\nIf your data file is ginormous, then the `ff` and `bigmemory` packages may be useful as they both contain import functions that are able to store large data in a memory efficient manner.\nYou can find out more about these functions [here][ff] and [here][bigmem].\n\n\n## Wrangling data frames\n\nNow that you're able to successfully import your data from an external file into R our next task is to do something useful with our data.\nWorking with data is a fundamental skill which you'll need to develop and get comfortable with as you'll likely do a lot of it during any project.\nThe good news is that R is especially good at manipulating, summarising and visualising data.\nManipulating data (often known as data wrangling or munging) in R can at first seem a little daunting for the new user but if you follow a few simple logical rules then you'll quickly get the hang of it, especially with some practice.\n \n\n\nLet's remind ourselves of the structure of the `unicorns` data frame we imported in the previous section.\n\n```{r}\n#| label: dw1\n#| echo: true\nunicorns <- read.table(file = \"data/unicorns.txt\", header = TRUE, sep = \"\\t\")\nstr(unicorns)\n```\n\nTo access the data in any of the variables (columns) in our data frame we can use the `$` notation.\nFor example, to access the `height` variable in our `unicorns` data frame we can use `unicorns$height`.\nThis tells R that the `height` variable is contained within the data frame `unicorns`.\n\n```{r}\n#| label: dw2\n#| echo: true\nunicorns$height\n```\n\nThis will return a vector of the `height` data.\nIf we want we can assign this vector to another object and do stuff with it, like calculate a mean or get a summary of the variable using the `summary()` function.\n\n```{r}\n#| label: dw3\n#| echo: true\nf_height <- unicorns$height\nmean(f_height)\nsummary(f_height)\n```\n\nOr if we don't want to create an additional object we can use functions 'on-the-fly' to only display the value in the console.\n\n```{r}\n#| label: dw3.1\n#| echo: true\nmean(unicorns$height)\nsummary(unicorns$height)\n```\n\nJust as we did with vectors (@sec-vectors), we also can access data in data frames using the square bracket `[ ]` notation.\nHowever, instead of just using a single index, we now need to use two indexes, one to specify the rows and one for the columns.\nTo do this, we can use the notation `my_data[rows, columns]` where `rows` and `columns` are indexes and `my_data` is the name of the data frame.\nAgain, just like with our vectors our indexes can be positional or the result of a logical test.\n\n### Positional indexes\n\nTo use positional indexes we simple have to write the position of the rows and columns we want to extract inside the `[ ]`.\nFor example, if for some reason we wanted to extract the first value (1^st^ row ) of the `height` variable (4^th^ column)\n\n```{r}\n#| label: dw4\n#| echo: true\nunicorns[1, 4]\n\n# this would give you the same\nunicorns$height[1]\n```\n\nWe can also extract values from multiple rows or columns by specifying these indexes as vectors inside the `[ ]`.\nTo extract the first 10 rows and the first 4 columns we simple supply a vector containing a sequence from 1 to 10 for the rows index (`1:10`) and a vector from 1 to 4 for the column index (`1:4`).\n\n```{r}\n#| label: dw5\n#| echo: true\nunicorns[1:10, 1:4]\n```\n\nOr for non sequential rows and columns then we can supply vectors of positions using the `c()` function.\nTo extract the 1^st^, 5^th^, 12^th^, 30^th^ rows from the 1^st^, 3^rd^, 6^th^ and 8^th^ columns\n\n```{r}\n#| label: dw6\n#| echo: true\nunicorns[c(1, 5, 12, 30), c(1, 3, 6, 8)]\n```\n\nAll we are doing in the two examples above is creating vectors of positions for the rows and columns that we want to extract.\nWe have done this by using the skills we developed in @sec-funcs when we generated vectors using the `c()` function or using the `:` notation.\n\nBut what if we want to extract either all of the rows or all of the columns? It would be extremely tedious to have to generate vectors for all rows or for all columns.\nThankfully R has a shortcut.\nIf you don't specify either a row or column index in the `[ ]` then R interprets it to mean you want all rows or all columns.\nFor example, to extract the first 4 rows and all of the columns in the `unicorns` data frame\n\n```{r}\nunicorns[1:4, ]\n```\n\nor all of the rows and the first 3 columns[^1].\n\n[^1]: For space and simplicity we are just showing the first and last five rows\n\n```r\nunicorns[, 1:3]\n```\n\n```{r}\n#| label: dw8\n#| echo: false\nrbind(head(unicorns[, 1:3], n = 5), tail(unicorns[, 1:3], n = 5))\n```\n\nWe can even use negative positional indexes to exclude certain rows and columns.\nAs an example, lets extract all of the rows except the first 85 rows and all columns except the 4^th^, 7^th^ and 8^th^ columns.\nNotice we need to use `-()` when we generate our row positional vectors.\nIf we had just used `-1:85` this would actually generate a regular sequence from -1 to 85 which is not what we want (we can of course use `-1:-85`).\n\n```{r}\n#| label: dw9\n#| echo: true\nunicorns[-(1:85), -c(4, 7, 8)]\n```\n\nIn addition to using a positional index for extracting particular columns (variables) we can also name the variables directly when using the square bracket `[ ]` notation.\nFor example, let's extract the first 5 rows and the variables `care`, `food` and `mane_size`.\nInstead of using `unicorns[1:5, c(1, 2, 6)]` we can instead use\n\n```{r}\n#| label: dw10\n#| echo: true\nunicorns[1:5, c(\"p_care\", \"food\", \"mane_size\")]\n```\n\nWe often use this method in preference to the positional index for selecting columns as it will still give us what we want even if we've changed the order of the columns in our data frame for some reason.\n\n### Logical indexes\n\nJust as we did with vectors, we can also extract data from our data frame based on a logical test.\nWe can use all of the logical operators that we used for our vector examples so if these have slipped your mind maybe have a look at @sec-logical-index and refresh your memory.\n Let's extract all rows where `height` is greater than 12 and extract all columns by default (remember, if you don't include a column index after the comma it means all columns).\n\n```{r}\n#| label: dw11\n#| echo: true\nbig_unicorns <- unicorns[unicorns$height > 12, ]\nbig_unicorns\n```\n\nNotice in the code above that we need to use the `unicorns$height` notation for the logical test.\nIf we just named the `height` variable without the name of the data frame we would receive an error telling us R couldn't find the variable `height`.\nThe reason for this is that the `height` variable only exists inside the `unicorns` data frame so you need to tell R exactly where it is.\n\n```r\nbig_unicorns <- unicorns[height > 12, ]\nError in `[.data.frame`(unicorns, height > 12, ) : \n  object 'height' not found\n```\n\nSo how does this work? The logical test is `unicorns$height > 12` and R will only extract those rows that satisfy this logical condition.\nIf we look at the output of just the logical condition you can see this returns a vector containing `TRUE` if `height` is greater than 12 and `FALSE` if `height` is not greater than 12.\n\n```{r}\n#| label: dw13\n#| echo: true\nunicorns$height > 12\n```\n\nSo our row index is a vector containing either `TRUE` or `FALSE` values and only those rows that are `TRUE` are selected.\n\nOther commonly used operators are shown below\n\n```{r}\n#| label: dw14\n#| echo: true\n#| eval: false\nunicorns[unicorns$height >= 6, ] # values greater or equal to 6\n\nunicorns[unicorns$height <= 6, ] # values less than or equal to 6\n\nunicorns[unicorns$height == 8, ] # values  equal to 8\n\nunicorns[unicorns$height != 8, ] # values  not equal to 8\n```\n\nWe can also extract rows based on the value of a character string or factor level.\nLet's extract all rows where the `food` level is equal to `high` (again we will output all columns).\nNotice that the double equals `==` sign must be used for a logical test and that the character string must be enclosed in either single or double quotes (i.e.\n`\"high\"`).\n\n```{r}\n#| label: dw15\n#| echo: true\n#| eval: true\nfood_high <- unicorns[unicorns$food == \"high\", ]\nrbind(head(food_high, n = 10), tail(food_high, n = 10))\n```\n\nOr we can extract all rows where `food` level is not equal to `medium` (using `!=`) and only return columns 1 to 4.\n\n```{r}\n#| label: dw16\n#| echo: true\n#| eval: true\nfood_not_medium <- unicorns[unicorns$food != \"medium\", 1:4]\nrbind(head(food_not_medium, n = 10), tail(food_not_medium, n = 10))\n```\n\n\nWe can increase the complexity of our logical tests by combining them with [Boolean expressions][boolean] just as we did for vector objects.\nFor example, to extract all rows where `height` is greater or equal to `6` AND `food` is equal to `medium` AND `care` is equal to `no_care` we combine a series of logical expressions with the `&` symbol.\n\n```{r}\n#| label: dw17\n#| echo: true\nlow_no_care_heigh6 <- unicorns[unicorns$height >= 6 & unicorns$food == \"medium\" &\n  unicorns$p_care == \"no_care\", ]\nlow_no_care_heigh6\n```\n\nTo extract rows based on an 'OR' Boolean expression we can use the `|` symbol.\nLet's extract all rows where `height` is greater than 12.3 OR less than 2.2.\n\n```{r}\n#| label: dw17.1\n#| echo: true\nheight2.2_12.3 <- unicorns[unicorns$height > 12.3 | unicorns$height < 2.2, ]\nheight2.2_12.3\n```\n\nAn alternative method of selecting parts of a data frame based on a logical expression is to use the `subset()` function instead of the `[ ]`.\nThe advantage of using `subset()` is that you no longer need to use the `$` notation when specifying variables inside the data frame as the first argument to the function is the name of the data frame to be subsetted.\nThe disadvantage is that `subset()` is less flexible than the `[ ]` notation.\n\n```{r}\n#| label: dw18\n#| echo: true\ncare_med_2 <- subset(unicorns, p_care == \"care\" & food == \"medium\" & block == 2)\ncare_med_2\n```\n\nAnd if you only want certain columns you can use the `select =` argument.\n\n```{r}\n#| label: dw19\n#| echo: true\nuni_p_care <- subset(unicorns, p_care == \"care\" & food == \"medium\" & block == 2,\n  select = c(\"p_care\", \"food\", \"mane_size\")\n)\nuni_p_care\n```\n\n### Ordering data frames\n\nRemember when we used the function `order()` to order one vector based on the order of another vector (way back in @sec-vec_ord).\nThis comes in very handy if you want to reorder rows in your data frame.\nFor example, if we want all of the rows in the data frame `unicorns` to be ordered in ascending value of `height` and output all columns by default.\n\n\n```{r}\n#| label: dw20\n#| echo: true\n#| eval: true\nheight_ord <- unicorns[order(unicorns$height), ]\nhead(height_ord, n = 10)\n```\n\nWe can also order by descending order of a variable (i.e.\n`mane_size`) using the `decreasing = TRUE` argument.\n\n```{r}\n#| label: dw21\n#| echo: true\n#| eval: true\nmane_size_ord <- unicorns[order(unicorns$mane_size, decreasing = TRUE), ]\nhead(mane_size_ord, n = 10)\n```\n\nWe can even order data frames based on multiple variables.\nFor example, to order the data frame `unicorns` in ascending order of both `block` and `height`.\n\n```{r}\n#| label: dw22\n#| echo: true\n#| eval: true\nblock_height_ord <- unicorns[order(unicorns$block, unicorns$height), ]\nhead(block_height_ord, n = 10)\n```\n\n\nWhat if we wanted to order `unicorns` by ascending order of `block` but descending order of `height`? We can use a simple trick by adding a `-` symbol before the `unicorns$height` variable when we use the `order()` function.\nThis will essentially turn all of the `height` values negative which will result in reversing the order.\nNote, that this trick will only work with numeric variables.\n\n```{r}\n#| label: dw23\n#| echo: true\n#| eval: true\nblock_revheight_ord <- unicorns[order(unicorns$block, -unicorns$height), ]\nrbind(head(block_revheight_ord, n = 10), tail(block_revheight_ord, n = 10))\n```\n\nIf we wanted to do the same thing with a factor (or character) variable like `food` we would need to use the function `xtfrm()` for this variable inside our `order()` function.\n\n```{r}\n#| label: dw24\n#| echo: true\n#| eval: true\nblock_revheight_ord <- unicorns[order(-xtfrm(unicorns$food), unicorns$height), ]\nrbind(head(block_revheight_ord, n = 10), tail(block_revheight_ord, n = 10))\n```\n\nNotice that the `food` variable has been reverse ordered alphabetically and `height` has been ordered by increasing values within each level of `food`.\n\nIf we wanted to order the data frame by `food` but this time order it from `low` -> `medium` -> `high` instead of the default alphabetically (`high`, `low`, `medium`), we need to first change the order of our levels of the `food` factor in our data frame using the `factor()` function.\nOnce we've done this we can then use the `order()` function as usual.\nNote, if you're reading the pdf version of this book, the output has been truncated to save space.\n\n```{r}\n#| label: dw24a\n#| echo: true\n#| eval: true\nunicorns$food <- factor(unicorns$food,\n  levels = c(\"low\", \"medium\", \"high\")\n)\nfood_ord <- unicorns[order(unicorns$food), ]\nrbind(head(food_ord, n = 10), tail(food_ord, n = 10))\n```\n\n### Adding columns and rows\n\nSometimes it's useful to be able to add extra rows and columns of data to our data frames.\nThere are multiple ways to achieve this (as there always is in R!) depending on your circumstances.\nTo simply append additional rows to an existing data frame we can use the `rbind()` function and to append columns the `cbind()` function.\nLet's create a couple of test data frames to see this in action using our old friend the `data.frame()` function.\n\n```{r}\n#| label: dw25\n#| echo: true\n# rbind for rows\ndf1 <- data.frame(\n  id = 1:4, height = c(120, 150, 132, 122),\n  weight = c(44, 56, 49, 45)\n)\ndf1\n\ndf2 <- data.frame(\n  id = 5:6, height = c(119, 110),\n  weight = c(39, 35)\n)\ndf2\n\ndf3 <- data.frame(\n  id = 1:4, height = c(120, 150, 132, 122),\n  weight = c(44, 56, 49, 45)\n)\ndf3\n\ndf4 <- data.frame(location = c(\"UK\", \"CZ\", \"CZ\", \"UK\"))\ndf4\n```\n\nWe can use the `rbind()` function to append the rows of data in `df2` to the rows in `df1` and assign the new data frame to `df_rcomb`.\n\n```{r}\n#| label: dw25.1\n#| echo: true\ndf_rcomb <- rbind(df1, df2)\ndf_rcomb\n```\n\nAnd `cbind` to append the column in `df4` to the `df3` data frame and assign to df_ccomb`.\n\n```{r}\n#| label: dw25.2\n#| echo: true\ndf_ccomb <- cbind(df3, df4)\ndf_ccomb\n```\n\nAnother situation when adding a new column to a data frame is useful is when you want to perform some kind of transformation on an existing variable.\nFor example, say we wanted to apply a log~10~ transformation on the height variable in the `df_rcomb` data frame we created above.\nWe could just create a separate variable to contains these values but it's good practice to create this variable as a new column inside our existing data frame so we keep all of our data together.\nLet's call this new variable `height_log10`.\n \n\n```{r}\n#| label: dw26\n#| echo: true\n# log10 transformation\ndf_rcomb$height_log10 <- log10(df_rcomb$height)\ndf_rcomb\n```\n\nThis situation also crops up when we want to convert an existing variable in a data frame from one data class to another data class.\nFor example, the `id` variable in the `df_rcomb` data frame is numeric type data (use the `str()` or `class()` functions to check for yourself).\nIf we wanted to convert the `id` variable to a factor to use later in our analysis we can create a new variable called `Fid` in our data frame and use the `factor()` function to convert the `id` variable.\n\n```{r}\n#| label: dw27\n#| echo: true\n# convert to a factor\ndf_rcomb$Fid <- factor(df_rcomb$id)\ndf_rcomb\nstr(df_rcomb)\n```\n\n### Merging data frames\n\nInstead of just appending either rows or columns to a data frame we can also merge two data frames together.\nLet's say we have one data frame that contains taxonomic information on some common UK rocky shore invertebrates (called `taxa`) and another data frame that contains information on where they are usually found on the rocky shore (called `zone`).\nWe can merge these two data frames together to produce a single data frame with both taxonomic and location information.\nLet's first create both of these data frames (in reality you would probably just import your different datasets).\n\n```{r}\n#| label: dw28\n#| echo: true\ntaxa <- data.frame(\n  GENUS = c(\"Patella\", \"Littorina\", \"Halichondria\", \"Semibalanus\"),\n  species = c(\"vulgata\", \"littoria\", \"panacea\", \"balanoides\"),\n  family = c(\"patellidae\", \"Littorinidae\", \"Halichondriidae\", \"Archaeobalanidae\")\n)\ntaxa\n\nzone <- data.frame(\n  genus = c(\n    \"Laminaria\", \"Halichondria\", \"Xanthoria\", \"Littorina\",\n    \"Semibalanus\", \"Fucus\"\n  ),\n  species = c(\n    \"digitata\", \"panacea\", \"parietina\", \"littoria\",\n    \"balanoides\", \"serratus\"\n  ),\n  zone = c(\"v_low\", \"low\", \"v_high\", \"low_mid\", \"high\", \"low_mid\")\n)\nzone\n```\n\nBecause both of our data frames contains at least one variable in common (`species` in our case) we can simply use the `merge()` function to create a new data frame called `taxa_zone`.\n\n```{r}\n#| label: dw29\n#| echo: true\ntaxa_zone <- merge(x = taxa, y = zone)\ntaxa_zone\n```\n\nNotice that the merged data frame contains only the rows that have `species` information in **both** data frames.\nThere are also two columns called `GENUS` and `genus` because the `merge()` function treats these as two different variables that originate from the two data frames.\n\nIf we want to include all data from both data frames then we will need to use the `all = TRUE` argument.\nThe missing values will be included as `NA`.\n\n```{r}\n#| label: dw30\n#| echo: true\ntaxa_zone <- merge(x = taxa, y = zone, all = TRUE)\ntaxa_zone\n```\n\nIf the variable names that you want to base the merge on are different in each data frame (for example `GENUS` and `genus`) you can specify the names in the first data frame (known as `x`) and the second data frame (known as `y`) using the `by.x =` and `by.y =` arguments.\n\n```{r}\n#| label: dw31\n#| echo: true\ntaxa_zone <- merge(x = taxa, y = zone, by.x = \"GENUS\", by.y = \"genus\", all = TRUE)\ntaxa_zone\n```\n\nOr using multiple variable names.\n\n```{r}\n#| label: dw31.1\n#| echo: true\ntaxa_zone <- merge(\n  x = taxa, y = zone, by.x = c(\"species\", \"GENUS\"),\n  by.y = c(\"species\", \"genus\"), all = TRUE\n)\ntaxa_zone\n```\n\n### Reshaping data frames {#sec-reshape}\n\nReshaping data into different formats is a common task.\nWith rectangular type data (data frames have the same number of rows in each column) there are two main data frame shapes that you will come across: the 'long' format (sometimes called stacked) and the 'wide' format.\nAn example of a long format data frame is given below.\nWe can see that each row is a single observation from an individual subject and each subject can have multiple rows.\nThis results in a single column of our `measurement`.\n\n```{r}\n#| label: dw32\n#| echo: true\nlong_data <- data.frame(\n  subject = rep(c(\"A\", \"B\", \"C\", \"D\"), each = 3),\n  sex = rep(c(\"M\", \"F\", \"F\", \"M\"), each = 3),\n  condition = rep(c(\"control\", \"cond1\", \"cond2\"), times = 4),\n  measurement = c(\n    12.9, 14.2, 8.7, 5.2, 12.6, 10.1, 8.9,\n    12.1, 14.2, 10.5, 12.9, 11.9\n  )\n)\nlong_data\n```\n\n\nWe can also format the same data in the wide format as shown below.\nIn this format we have multiple observations from each subject in a single row with measurements in different columns (`control`, `cond1` and `cond2`).\nThis is a common format when you have repeated measurements from sampling units.\n\n```{r}\n#| label: dw34\n#| echo: true\nwide_data <- data.frame(\n  subject = c(\"A\", \"B\", \"C\", \"D\"),\n  sex = c(\"M\", \"F\", \"F\", \"M\"),\n  control = c(12.9, 5.2, 8.9, 10.5),\n  cond1 = c(14.2, 12.6, 12.1, 12.9),\n  cond2 = c(8.7, 10.1, 14.2, 11.9)\n)\nwide_data\n```\n\n\nWhilst there's no inherent problem with either of these formats we will sometimes need to convert between the two because some functions will require a specific format for them to work.\nThe most common format is the long format.\n\nThere are many ways to convert between these two formats but we'll use the `melt()` and `dcast()` functions from the `reshape2` package (you will need to install this package first).\nThe `melt()` function is used to convert from wide to long formats.\nThe first argument for the `melt()` function is the data frame we want to melt (in our case `wide_data`).\nThe `id.vars = c(\"subject\", \"sex\")` argument is a vector of the variables you want to stack, the `measured.vars = c(\"control\", \"cond1\", \"cond2\")` argument identifies the columns of the measurements in different conditions, the `variable.name = \"condition\"` argument specifies what you want to call the stacked column of your different conditions in your output data frame and `value.name = \"measurement\"` is the name of the column of your stacked measurements in your output data frame.\n\n```{r}\n#| label: dw36\n#| echo: true\nlibrary(reshape2)\nwide_data # remind ourselves what the wide format looks like\n\n# convert wide to long\nmy_long_df <- melt(\n  data = wide_data, id.vars = c(\"subject\", \"sex\"),\n  measured.vars = c(\"control\", \"cond1\", \"cond2\"),\n  variable.name = \"condition\", value.name = \"measurement\"\n)\nmy_long_df\n```\n\nThe `dcast()` function is used to convert from a long format data frame to a wide format data frame.\nThe first argument is again is the data frame we want to cast (`long_data` for this example).\nThe second argument is in formula syntax.\nThe `subject + sex` bit of the formula means that we want to keep these columns separate, and the `~ condition` part is the column that contains the labels that we want to split into new columns in our new data frame.\nThe `value.var = \"measurement\"` argument is the column that contains the measured data.\n \n\n```{r}\n#| label: dw37\n#| echo: true\nlong_data # remind ourselves what the long format look like\n\n# convert long to wide\nmy_wide_df <- dcast(\n  data = long_data, subject + sex ~ condition,\n  value.var = \"measurement\"\n)\nmy_wide_df\n```\n\n## Introduction to the `tidyverse`\n\nit seems it is not super tidy in here and we need to improve that\n\n## Summarising data frames\n\nNow that we're able to manipulate and extract data from our data frames our next task is to start exploring and getting to know our data.\nIn this section we'll start producing tables of useful summary statistics of the variables in our data frame and in the next two Chapters we'll cover visualising our data with base R graphics and using the `ggplot2` package.\n\nA really useful starting point is to produce some simple summary statistics of all of the variables in our `unicorns` data frame using the `summary()` function.\n\n```{r}\n#| label: sum1\n#| echo: true\nsummary(unicorns)\n```\n\nFor numeric variables (i.e.\n`height`, `weight` etc) the mean, minimum, maximum, median, first (lower) quartile and third (upper) quartile are presented.\nFor factor variables (i.e.\n`care` and `food`) the number of observations in each of the factor levels is given.\nIf a variable contains missing data then the number of `NA` values is also reported.\n\nIf we wanted to summarise a smaller subset of variables in our data frame we can use our indexing skills in combination with the `summary()` function.\nFor example, to summarise only the `height`, `weight`, `mane_size` and `fluffyness` variables we can include the appropriate column indexes when using the `[ ]`.\nNotice we include all rows by not specifying a row index.\n \n\n```{r}\n#| label: sum2\n#| echo: true\nsummary(unicorns[, 4:7])\n\n# or equivalently\n# summary(unicorns[, c(\"height\", \"weight\", \"mane_size\", \"fluffyness\")])\n```\n\nAnd to summarise a single variable.\n\n```{r}\n#| label: sum3\n#| echo: true\nsummary(unicorns$mane_size)\n\n# or equivalently\n# summary(unicorns[, 6])\n```\n\nAs you've seen above, the `summary()` function reports the number of observations in each level of our factor variables.\nAnother useful function for generating tables of counts is the `table()` function.\nThe `table()` function can be used to build contingency tables of different combinations of factor levels.\nFor example, to count the number of observations for each level of `food`\n\n```{r}\n#| label: sum4\n#| echo: true\ntable(unicorns$food)\n```\n\nWe can extend this further by producing a table of counts for each combination of `food` and `care` factor levels.\n\n```{r}\n#| label: sum5\n#| echo: true\ntable(unicorns$food, unicorns$p_care)\n```\n\nA more flexible version of the `table()` function is the `xtabs()` function.\nThe `xtabs()` function uses a formula notation (`~`) to build contingency tables with the cross-classifying variables separated by a `+` symbol on the right hand side of the formula.\n`xtabs()` also has a useful `data =` argument so you don't have to include the data frame name when specifying each variable.\n\n```{r}\n#| label: sum6\n#| echo: true\nxtabs(~ food + p_care, data = unicorns)\n```\n\nWe can even build more complicated contingency tables using more variables.\nNote, in the example below the `xtabs()` function has quietly coerced our `block` variable to a factor.\n\n```{r}\n#| label: sum7\n#| echo: true\nxtabs(~ food + p_care + block, data = unicorns)\n```\n\nAnd for a nicer formatted table we can nest the `xtabs()` function inside the `ftable()` function to 'flatten' the table.\n\n```{r}\n#| label: sum8\n#| echo: true\nftable(xtabs(~ food + p_care + block, data = unicorns))\n```\n\nWe can also summarise our data for each level of a factor variable.\nLet's say we want to calculate the mean value of `height` for each of our `low`, `meadium` and `high` levels of `food`.\nTo do this we will use the `mean()` function and apply this to the `height` variable for each level of `food` using the `tapply()` function.\n\n```{r}\n#| label: sum9\n#| echo: true\ntapply(unicorns$height, unicorns$food, mean)\n```\n\nThe `tapply()` function is not just restricted to calculating mean values, you can use it to apply many of the functions that come with R or even functions you've written yourself (see @sec-prog_r for more details).\nFor example, we can apply the `sd()` function to calculate the standard deviation for each level of `food` or even the `summary()` function.\n\n```{r}\n#| label: sum10\n#| echo: true\ntapply(unicorns$height, unicorns$food, sd)\ntapply(unicorns$height, unicorns$food, summary)\n```\n\nNote, if the variable you want to summarise contains missing values (`NA`) you will also need to include an argument specifying how you want the function to deal with the `NA` values.\nWe saw an example if this in @sec-na_vals where the `mean()` function returned an `NA` when we had missing data.\nTo include the `na.rm = TRUE` argument we simply add this as another argument when using `tapply()`.\n\n```{r}\n#| label: sum11\n#| echo: true\ntapply(unicorns$height, unicorns$food, mean, na.rm = TRUE)\n```\n\nWe can also use `tapply()` to apply functions to more than one factor.\nThe only thing to remember is that the factors need to be supplied to the `tapply()` function in the form of a list using the `list()` function.\nTo calculate the mean `height` for each combination of `food` and `care` factor levels we can use the `list(unicorns$food, unicorns$p_care)` notation.\n\n```{r}\n#| label: sum12\n#| echo: true\ntapply(unicorns$height, list(unicorns$food, unicorns$p_care), mean)\n```\n\nAnd if you get a little fed up with having to write `unicorns$` for every variable you can nest the `tapply()` function inside the `with()` function.\nThe `with()` function allows R to evaluate an R expression with respect to a named data object (in this case `unicorns`).\n \n\n```{r}\n#| label: sum13\n#| echo: true\nwith(unicorns, tapply(height, list(food, p_care), mean))\n```\n\nThe `with()` function also works with many other functions and can save you alot of typing!\n\nAnother really useful function for summarising data is the `aggregate()` function.\nThe `aggregate()` function works in a very similar way to `tapply()` but is a bit more flexible.\n\nFor example, to calculate the mean of the variables `height`, `weight`, `mane_size` and `fluffyness` for each level of `food`.\n\n```{r}\n#| label: sum14\n#| echo: true\naggregate(unicorns[, 4:7], by = list(food = unicorns$food), FUN = mean)\n```\n\nIn the code above we have indexed the columns we want to summarise in the `unicorns` data frame using `unicorns[, 4:7]`.\nThe `by =` argument specifies a list of factors (`list(food = unicorns$food)`) and the `FUN =` argument names the function to apply (`mean` in this example).\n\nSimilar to the `tapply()` function we can include more than one factor to apply a function to.\nHere we calculate the mean values for each combination of `food` and `care`\n\n```{r}\n#| label: sum15\n#| echo: true\naggregate(unicorns[, 4:7], by = list(\n  food = unicorns$food,\n  p_care = unicorns$p_care\n), FUN = mean)\n```\n\nWe can also use the `aggregate()` function in a different way by using the formula method (as we did with `xtabs()`).\nOn the left hand side of the formula (`~`) we specify the variable we want to apply the mean function on and to the right hand side our factors separated by a `+` symbol.\nThe formula method also allows you to use the `data =` argument for convenience.\n \n\n```{r}\n#| label: sum16\n#| echo: true\naggregate(height ~ food + p_care, FUN = mean, data = unicorns)\n```\n\nOne advantage of using the formula method is that we can also use the `subset =` argument to apply the function to subsets of the original data.\nFor example, to calculate the mean `height` for each combination of the `food` and `care` levels but only for those unicorns that have less than 7 `horn_rings`.\n\n```{r}\n#| label: sum17\n#| echo: true\naggregate(height ~ food + p_care, FUN = mean, subset = horn_rings < 7, data = unicorns)\n```\n\nOr for only those unicorns in `block` 1.\n\n```{r}\n#| label: sum18\n#| echo: true\naggregate(height ~ food + p_care, FUN = mean, subset = block == \"1\", data = unicorns)\n```\n\n## Exporting data\n\nBy now we hope you're getting a feel for how powerful and useful R is for manipulating and summarising data (and we've only really scratched the surface).\nOne of the great benefits of doing all your data wrangling in R is that you have a permanent record of all the things you've done to your data.\nGone are the days of making undocumented changes in Excel or Calc! By treating your data as 'read only' and documenting all of your decisions in R you will have made great strides towards making your analysis more reproducible and transparent to others.\nIt's important to realise, however, that any changes you've made to your data frame in R will not change the original data file you imported into R (and that's a good thing).\nHappily it's straightforward to export data frames to external files in a wide variety of formats.\n\n### Export functions\n\nThe main workhorse function for exporting data frames is the `write.table()` function.\nAs with the `read.table()` function, the `write.table()` function is very flexible with lots of arguments to help customise it's behaviour.\nAs an example, let's take our original `unicorns` data frame, do some useful stuff to it and then export these changes to an external file.\n \n\nLet's order the rows in the data frame in ascending order of `height` within each level `food`.\nWe will also apply a square root transformation on the number of horn rings variable (`horn_rings`) and a log~10~ transformation on the `height` variable and save these as additional columns in our data frame (hopefully this will be somewhat familiar to you!).\n\n```{r}\n#| label: export1\n#| echo: true\nunicorns_df2 <- unicorns[order(unicorns$food, unicorns$height), ]\nunicorns_df2$horn_rings_sqrt <- sqrt(unicorns_df2$horn_rings)\nunicorns_df2$log10_height <- log10(unicorns_df2$height)\nstr(unicorns_df2)\n```\n\nNow we can export our new data frame `unicorns_df2` using the `write.table()` function.\nThe first argument is the data frame you want to export (`unicorns_df2` in our example).\nWe then give the filename (with file extension) and the file path in either single or double quotes using the `file =` argument.\nIn this example we're exporting the data frame to a file called `unicorns_04_12.txt` in the `data` directory.\nThe `col.names = TRUE` argument indicates that the variable names should be written in the first row of the file and the `row.names = FALSE` argument stops R from including the row names in the first column of the file.\nFinally, the `sep = \"\\t\"` argument indicates that a Tab should be used as the delimiter in the exported file.\n\n```{r}\n#| label: export2\n#| echo: true\n#| eval: false\nwrite.csv(unicorns_df2,\n  file = \"data/unicorns_04_12.txt\", col.names = TRUE,\n  row.names = FALSE, sep = \"\\t\"\n)\n```\n\nAs we saved the file as a tab delimited text file we could open this file in any text editor.\nPerhaps a more familiar option would be to open the file in Excel.\nFirst start Excel and then select `File` -> `Open ..` in the main menu and then select our `unicorns_04_12.txt` file to open.\nNext.\nchoose the 'Tab' option to set the delimiter and then click on the 'Finish' button.\n\n\n```{r}\n#| label: imp1\n#| echo: false\n#| out-width: 60%\n#| fig-align: center\nknitr::include_graphics(path = \"images/data/excel_export.png\")\n```\n\n\nWe can of course export our files in a variety of other formats.\nAnother popular option is to export files in csv (comma separated values) format.\nWe can do this using the `write.table()` function by setting the separator argument to `sep = \",\"`.\n\n```{r}\n#| label: export3\n#| echo: true\n#| eval: false\nwrite.table(unicorns_df2,\n  file = \"data/unicorns_04_12.csv\", col.names = TRUE,\n  row.names = FALSE, sep = \",\"\n)\n```\n\nOr alternatively by using the convenience function `write.csv()`.\nNotice that we don't need to set the `sep = \",\"` or `col.names = TRUE` arguments as these are the defaults when using the `read.csv()` function.\n\n```{r}\n#| label: export4\n#| echo: true\n#| eval: false\nwrite.csv(unicorns_df2, file = \"data/unicorns_04_12.csv\", row.names = FALSE)\n```\n\n### Other export functions\n\nAs with importing data files into R, there are also many alternative functions for exporting data to external files beyond the `write.table()` function.\nIf you followed the 'Other import functions' @sec-import_other of this Chapter you will already have the required packages installed.\n\nThe `fwrite()` function from the `read.table` package is very efficient at exporting large data objects and is much faster than the `write.table()` function.\nIt's also quite simple to use as it has most of the same arguments as `write.table()`.\nTo export a tab delimited text file we just need to specify the data frame name, the output file name and file path and the separator between columns.\n\n```{r}\n#| label: export5\n#| echo: true\n#| eval: false\nlibrary(read.table)\nfwrite(unicorns_df2, file = \"data/unicorns_04_12.txt\", sep = \"\\t\")\n```\n\nTo export a csv delimited file it's even easier as we don't even need to include the `sep =` argument.\n\n```{r}\n#| label: export6\n#| echo: true\n#| eval: false\nlibrary(read.table)\nfwrite(unicorns_df2, file = \"data/unicorns_04_12.csv\")\n```\n\nThe `readr` package also comes with two useful functions for quickly writing data to external files: the `write_tsv()` function for writing tab delimited files and the `write_csv()` function for saving comma separated values (csv) files.\n\n```{r}\n#| label: export7\n#| echo: true\n#| eval: false\nlibrary(readr)\nwrite_tsv(unicorns_df2, path = \"data/unicorns_04_12.txt\")\n\nwrite_csv(unicorns_df2, path = \"data/unicorns_04_12.csv\")\n```\n\n\n```{r}\n#| label: links\n#| child: images/_links.md\n```\n\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":true,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","from":"markdown+emoji","number-sections":true,"output-file":"03-data.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en-CA","fig-responsive":true,"quarto-version":"1.5.30","version":"0.6.0","year":2024,"bibliography":["biblio/book.bib","biblio/grateful-refs.bib"],"biblio-style":"apalike","csl":"biblio/ecology.csl","cit-title":"Do what you think is interesting,  \ndo something that you think is fun and worthwhile,  \nbecause otherwise you wonâ€™t do it well anyway.\n","cit-author":"Brian W. Kernighan","theme":{"light":"cosmo","dark":["cosmo","css/theme-dark.scss"]},"author-meta":"Julien Martin"},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"paged","error":false,"eval":true,"cache":true,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"lualatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","from":"markdown+emoji","number-sections":true,"output-file":"03-data.pdf"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"block-headings":false,"version":"0.6.0","year":2024,"bibliography":["biblio/book.bib","biblio/grateful-refs.bib"],"biblio-style":"apalike","csl":"biblio/ecology.csl","lang":"en-CA","cit-title":"Do what you think is interesting,  \ndo something that you think is fun and worthwhile,  \nbecause otherwise you wonâ€™t do it well anyway.\n","cit-author":"Brian W. Kernighan","documentclass":"scrreprt","classoption":["chapterprefix=true","headings=big","twoside=semi"],"papersize":"letter","fontsize":"11pt","geometry":["top=2cm","bottom=2cm","left=2cm","right=2cm","footskip=1cm"],"colorlinks":true,"linestretch":1.5,"template-partials":["latex/before-title.tex","latex/before-body.tex"]},"extensions":{"book":{"selfContainedOutput":true}}},"epub":{"identifier":{"display-name":"ePub","target-format":"epub","base-format":"epub"},"execute":{"fig-width":5,"fig-height":4,"fig-format":"png","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"epub","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":false,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"default-image-extension":"png","html-math-method":"mathml","to":"epub","toc":true,"output-file":"03-data.epub"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"version":"0.6.0","year":2024,"bibliography":["biblio/book.bib","biblio/grateful-refs.bib"],"biblio-style":"apalike","csl":"biblio/ecology.csl","lang":"en-CA","cit-title":"Do what you think is interesting,  \ndo something that you think is fun and worthwhile,  \nbecause otherwise you wonâ€™t do it well anyway.\n","cit-author":"Brian W. Kernighan","dev":"svglite","stylesheet":"css/epub.css"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","pdf","epub"]}