{"title":"Figures","markdown":{"headingText":"Figures","headingAttr":{"id":"sec-graphics_r","classes":[],"keyvalue":[]},"containsRefs":false,"markdown":"\n<!-- need to\nadd info about ggplot\nredo diagram with mermaid\ndo a ggplot extensive description\n-->\n\n```{r}\n#| include: false\nlibrary(ggplot2)\nlibrary(ggcleveland)\nlibrary(GGally)\nlibrary(ggpubr)\n\ntheme_set(theme_classic())\n```\n\nSummarising your data, either numerically or graphically, is an important (if often overlooked) component of any data analysis.\nFortunately, R has excellent graphics capabilities and can be used whether you want to produce plots for initial data exploration, model validation or highly complex publication quality figures.\nThere are three main systems for producing graphics in R; base R graphics, lattice graphics and ggplot2.\n\n\nThe base R graphics system is the original plotting system that's been around (and has evolved) since the first days of R.\nWhen creating plots with base R we tend to use high level functions (like the `plot()` function) to first create our plot and then use one or more low level functions (like `lines()` and `text()` etc) to add additional information to these plots.\nThis can seem a little weird (and time consuming) when you first start creating fancy plots in R, but it does allow you to customise almost every aspect of your plot and build complexity up in layers.\nThe flip side to this flexibility is that you'll often need to make many decisions about how you want your plot to look rather than rely on the software to make these decisions for you.\nHaving said that, it's generally very quick and easy to generate simple exploratory plots with base R graphics.\n\n\nThe lattice system is implemented in the `lattice()` package that comes pre-installed with the standard installation of R.\nHowever, it won't be loaded by default so you'll first need to use `library(lattice)` to access all the plotting functions.\nUnlike base R graphics, lattice plots are mostly generated all in one go using a single function so there's no need to use high and low level plotting functions to customise the look of a plot.\nThis can be a real advantage as things like margin sizes and plot spacing are adjusted automatically.\nLattice plots also make a few more decisions for you about how the plots will look but this comes with a slight cost as customising lattice plots to get them to look exactly how you want can become quite involved.\nWhere lattice plots really shine is plotting complex multi-dimensional data using panel plots (also called trellis plots).\nWe'll see a couple of examples of these types of plots later in the Chapter.\n   \n\n`ggplot2` was based on a book called *Grammar of Graphics* by @wilkinson2005.\nFor an interesting summary of Wilkinson's book [here][leland-summary].\nThe *Grammar of Graphics* approach breaks figures down into their various components (e.g.\nthe underlying statistics, the geometric arrangement, the theme, see @fig-ggplot-str).\nUsers are thus able to manipulate each of these components (i.e.\nlayers) and produce a tailor-made figure fit for their specific needs.\n\n![The Grammar of Graphics. Visual by Thomas de Beus](images/plot/graph-grammar.png){fig-align=\"center\" #fig-ggplot-str}\n\nEach of these systems have their strengths and weaknesses and we often use them interchangeably.\nIn this Chapter we'll introduce you to the both base R plotting function and the`ggplot2` package.\nIt's important to note that `ggplot2` is not **required** to make \"fancy\" and informative figures in R.\nIf you prefer using base R graphics then feel free to continue as almost all `ggplot2` type figures can be created using base R (we often use either approach depending on what we're doing).\nThe difference between`ggplot2` and base R is how you *get* to the end product rather than any substantial differences in the end product itself.\nThis is, never-the-less, a common belief probably due to the fact that making a moderately attractive figure is (in our opinion at least), easier to do with `ggplot2` as many aesthetic decisions are made for the user, without you necessarily even knowing that a decision was ever made!\n\nWith that in mind, let's get started making some figures.\n\n\n## Simple base R plots {#sec-baseplot}\n\nThere are many functions in R to produce plots ranging from the very basic to the highly complex.\nIt's impossible to cover every aspect of producing graphics in R in this book so we'll introduce you to most of the common methods of graphing data and describe how to customise your graphs later on in @sec-custom-plot.\n\nThe most common high level function used to produce plots in R is (rather unsurprisingly) the `plot()` function.\nFor example, let's plot the `weight` of unicorns from our `unicorns` data frame which we imported in @sec-import_fnc.\n\n```{r}\n#| label: plot1\n#| echo: true\n#| out-width: 75%\n#| fig-align: center\nunicorns <- read.csv(file = \"data/unicorns.csv\")\n\nplot(unicorns$weight)\n```\n\nR has plotted the values of `weight` (on the y axis) against an index since we are only plotting one variable to plot.\nThe index is just the order of the `weight` values in the data frame (1 first in the data frame and 97 last).\nThe `weight` variable name has been automatically included as a y axis label and the axes scales have been automatically set.\n\nIf we'd only included the variable `weight` rather than `unicorns$weight`, the `plot()` function will display an error as the variable `weight` only exists in the `unicorns` data frame object.\n\n```{r}\n#| label: plot2\n#| echo: true\n#| eval: false\nplot(weight)\n## Error in plot(weight) : object 'weight' not found\n```\n\nAs many of the base R plotting functions don't have a `data =` argument to specify the data frame name directly we can use the `with()` function in combination with `plot()` as a shortcut.\n\n```{r}\n#| label: plot3\n#| echo: true\n#| eval: false\nwith(unicorns, plot(weight))\n```\n\nTo plot a scatterplot of one numeric variable against another numeric variable we just need to include both variables as arguments when using the `plot()` function.\nFor example to plot `fluffyness` on the y axis and `weight` of the x axis.\n\n\n```{r}\n#| label: plot4\n#| echo: true\n#| out-width: 75%\n#| fig-align: center\nplot(x = unicorns$weight, y = unicorns$fluffyness)\n```\n\nThere is an equivalent approach for these types of plots which often causes some confusion at first.\nYou can also use the formula notation when using the `plot()` function.\nHowever, in contrast to the previous method the formula method requires you to specify the y axis variable first, then a `~` and then our x axis variable.\n\n\n```{r}\n#| label: fig-plot5\n#| echo: true\n#| out-width: 75%\n#| fig-align: center\nplot(fluffyness ~ weight, data = unicorns)\n```\n\nBoth of these two approaches are equivalent so we suggest that you just choose the one you prefer and go with it.\n\n\nYou can also specify the type of graph you wish to plot using the argument `type =`.\nYou can plot just the points (`type = \"p\"`, this is the default), just lines (`type = \"l\"`), both points and lines connected (`type = \"b\"`), both points and lines with the lines running through the points (`type = \"o\"`) and empty points joined by lines (`type = \"c\"`).\nFor example, let's use our skills from @sec-funcs to generate two vectors of numbers (`my_x` and `my_y`) and then plot one against the other using different `type =` values to see what type of plots are produced.\nDon't worry about the `par(mfrow = c(2, 2))` line of code yet.\nWe're just using this to split the plotting device so we can fit all four plots on the same device to save some space.\nSee @sec-mult-graphs in the Chapter for more details about this.\nThe top left plot is `type = \"l\"`, the top right `type = \"b\"`, bottom left `type = \"o\"` and bottom right is `type = \"c\"`.\n \n\n```{r}\n#| label: plot6\n#| echo: true\n#| out-width: 75%\n#| fig-align: center\nmy_x <- 1:10\nmy_y <- seq(from = 1, to = 20, by = 2)\n\npar(mfrow = c(2, 2))\nplot(my_x, my_y, type = \"l\")\nplot(my_x, my_y, type = \"b\")\nplot(my_x, my_y, type = \"o\")\nplot(my_x, my_y, type = \"c\")\n```\n\nAdmittedly the plots we've produced so far don't look anything particularly special.\nHowever, the `plot()` function is incredibly versatile and can generate a large range of plots which you can customise to your own taste.\nWe'll cover how to customise ggplots in @sec-custom-plot.\nAs a quick aside, the `plot()` function is also what's known as a generic function which means it can change its default behaviour depending on the type of object used as an argument.\nYou will see an example of this in @sec-simple_lm where we use the `plot()` function to generate diagnostic plots of residuals from a linear model object (bet you can't wait!).\n\n\n## ggplot2\n\n```{r}\n#| label: fig-ggplot-str2\n#| echo: false\n#| eval: false\n#| out-width: 50%\n#| fig-align: center\n#| fig-cap: Structure of graphics with ggplot2\n\nknitr::include_graphics(path = \"images/plot/full_connected.png\")\n```\n\nAs mentioned earlier `ggplot` grammar requires several elements to produce a graphic (@fig-ggplot-str) and a minimum of 3 are required:\n\n- a data frame\n- a mapping system defining x and y\n- a geometry layer\n\nThe data and mapping are provided within the called to the `ggplot()` function with the `data` and `mapping` arguments.\nThe geometry layer is added using specific functions.\n\nIn fact all layers are needed but default simple values of the other layers are automatically provided.\n\nTo redo the @fig-plot5, that contain only a scatterplot of point we can use the `geom_point()` function.\n\n```{r}\n#| label: fig-plot5-gg\n#| message: false\n#| out-width: 75%\n#| fig-align: center\nggplot(\n  data = unicorns,\n  mapping = aes(x = weight, y = fluffyness)\n) +\n  geom_point()\n```\n\nNow that we have basic understanding of `ggplot`we can explore some graphics using both base R and ggplot code\n\n## Simple plots\n\n### Scatterplots\n\nSimple type of plots really useful to have a look at the relation between 2 variables for example.\nHere are the code to do it using base R (@fig-plot5) \n\n```{r}\n#| label: fig-plot5\n#| eval: false\n```\n or ggplot (@fig-plot5-gg)\n```{r}\n#| label: fig-plot5-gg\n#| eval: false\n```\n\nOne gig advantage of `ggplot` for simple scatterplot is the ease with which we can add a regression, smoother (loes or gam) line to the plot using `stat_smooth()`function to add a statistic layer to the plot.\n\n```{r}\n#| label: plot5-gg-line\n#| message: false\n#| out-width: 75%\n#| fig-align: center\nggplot(\n  data = unicorns,\n  mapping = aes(x = weight, y = fluffyness)\n) +\n  geom_point() +\n  stat_smooth()\n```\n\n### Histograms\n\nFrequency histograms are useful when you want to get an idea about the distribution of values in a numeric variable.\nUsing base R, the `hist()` function takes a numeric vector as its main argument.\nIn ggplot, we need to use `geom_histogram()`.\nLet's generate a histogram of the `height` values.\n\nWith base R\n```{r}\n#| label: plot7\n#| echo: true\n#| out-width: 75%\n#| fig-align: center\nhist(unicorns$height)\n```\n\nwith ggplot2\n```{r}\n#| label: plot7-gg\n#| echo: true\n#| out-width: 75%\n#| fig-align: center\nggplot(unicorns, aes(x = height)) +\n  geom_histogram()\n```\n\nThe `hist()` and `geom_histogram()` function  automatically creates the breakpoints (or bins) in the histogram unless you specify otherwise by using the `breaks =` argument.\nFor example, let's say we want to plot our histogram with breakpoints every 1 cm unicorns height.\nWe first generate a sequence from zero to the maximum value of `height` (18 rounded up) in steps of 1 using the `seq()` function.\nWe can then use this sequence with the `breaks =` argument.\nWhile we're at it, let's also replace the ugly title for something a little better using the `main =` argument\n\n```{r}\n#| label: plot8\n#| echo: true\n#| out-width: 75%\n#| fig-align: center\nbrk <- seq(from = 0, to = 18, by = 1)\nhist(unicorns$height, breaks = brk, main = \"Unicorn height\")\n```\n\n```{r}\n#| label: plot8-gg\n#| echo: true\n#| out-width: 75%\n#| fig-align: center\nbrk <- seq(from = 0, to = 18, by = 1)\nggplot(unicorns, aes(x = height)) +\n  geom_histogram(breaks = brk) +\n  ggtitle(\"Unicorn height\")\n```\n\nYou can also display the histogram as a proportion rather than a frequency by using the `freq = FALSE` argument to `hist()` or indicating `aes(y = after_stat(density))` in `geom_histogram()`.\n\n```{r}\n#| label: plot9\n#| eval: false\n#| echo: true\n#| out-width: 75%\n#| fig-align: center\nbrk <- seq(from = 0, to = 18, by = 1)\nhist(unicorns$height,\n  breaks = brk, main = \"Unicorn height\",\n  freq = FALSE\n)\nggplot(unicorns, aes(x = height)) +\n  geom_histogram(aes(y = after_stat(density)), breaks = brk) +\n  ggtitle(\"Unicorn height\")\n```\n\nAn alternative to plotting just a straight up histogram is to add a [kernel density][kernel-dens] curve to the plot.\nIn base R, you first need to compute the kernel density estimates using the `density()` and then ad the estimates to plot as a line using the `lines()` function.\n\n\n```{r}\n#| label: plot10\n#| echo: true\n#| out-width: 75%\n#| fig-align: center\ndens <- density(unicorns$height)\nhist(unicorns$height,\n  breaks = brk, main = \"Unicorn height\",\n  freq = FALSE\n)\nlines(dens)\n```\n\nWith ggplot, you can simply add the `geom_density()` layer to the plot\n\n```{r}\n#| label: plot10-gg\n#| echo: true\n#| out-width: 75%\n#| fig-align: center\nggplot(unicorns, aes(x = height)) +\n  geom_histogram(aes(y = after_stat(density)), breaks = brk) +\n  geom_density() +\n  ggtitle(\"Unicorn height\")\n```\n\n### Box plots\n\nOK, we'll just come and out and say it, we love boxplots and their close relation the violin plot.\nBoxplots (or box-and-whisker plots to give them their full name) are very useful when you want to graphically summarise the distribution of a variable, identify potential unusual values and compare distributions between different groups.\nThe reason we love them is their ease of interpretation, transparency and relatively high data-to-ink ratio (i.e.\nthey convey lots of information efficiently).\nWe suggest that you try to use boxplots as much as possible when exploring your data and avoid the temptation to use the more ubiquitous bar plot (even with standard error or 95% confidence intervals bars).\nThe problem with bar plots (aka dynamite plots) is that they hide important information from the reader such as the distribution of the data and assume that the error bars (or confidence intervals) are symmetric around the mean.\nOf course, it's up to you what you do but if you're tempted to use bar plots just search for 'dynamite plots are evil' or see [here][dynamite-plot1] or [here][dynamite-plot2] for a fuller discussion.\n\nTo create a boxplot in R we use the `boxplot()` function.\nFor example, let's create a boxplot of the variable `weight` from our `unicorns` data frame.\nWe can also include a y axis label using the `ylab =` argument.\n \n\n```{r}\n#| label: plot11\n#| echo: true\n#| out-width: 75%\n#| fig-align: center\nboxplot(unicorns$weight, ylab = \"weight (g)\")\n```\n\n```{r}\n#| label: plot11-gg\n#| message: false\n#| out-width: 75%\n#| fig-align: center\nggplot(unicorns, aes(y = weight)) +\n  geom_boxplot() +\n  labs(y = \"weight (g)\")\n```\n\nThe thick horizontal line in the middle of the box is the median value of `weight` (around 11 g).\nThe upper line of the box is the upper quartile (75^th^ percentile) and the lower line is the lower quartile (25^th^ percentile).\nThe distance between the upper and lower quartiles is known as the inter quartile range and represents the values of `weight` for 50% of the data.\nThe dotted vertical lines are called the whiskers and their length is determined as 1.5 x the inter quartile range.\nData points that are plotted outside the the whiskers represent potential unusual observations.\nThis doesn't mean they are unusual, just that they warrant a closer look.\nWe recommend using boxplots in combination with Cleveland dotplots to identify potential unusual observations (see the @sec-dotcharts for more details).\nThe neat thing about boxplots is that they not only provide a measure of central tendency (the median value) they also give you an idea about the distribution of the data.\nIf the median line is more or less in the middle of the box (between the upper and lower quartiles) and the whiskers are more or less the same length then you can be reasonably sure the distribution of your data is symmetrical.\n  \n\nIf we want examine how the distribution of a variable changes between different levels of a factor we need to use the formula notation with the `boxplot()` function.\nFor example, let's plot our `weight` variable again, but this time see how this changes with each level of `food`.\nWhen we use the formula notation with `boxplot()` we can use the `data =` argument to save some typing.\nWe'll also introduce an x axis label using the `xlab =` argument.\n\n```{r}\n#| label: plot12\n#| echo: true\n#| out-width: 75%\n#| fig-align: center\nboxplot(weight ~ food,\n  data = unicorns,\n  ylab = \"Weight (g)\", xlab = \"food level\"\n)\n```\n\n\n```{r}\n#| label: plot12-gg\n#| message: false\n#| out-width: 75%\n#| fig-align: center\nggplot(unicorns, aes(y = weight, x = food)) +\n  geom_boxplot() +\n  labs(y = \"Weight (g)\", x = \"food Concentration\")\n```\n\nThe factor levels are plotted in the same order defined by our factor variable `food` (often alphabetically).\nTo change the order we need to change the order of our levels of the `food` factor in our data frame using the `factor()` function and then re-plot the graph.\nLet's plot our boxplot with our factor levels going from `low` to `high`.\n\n\n```{r}\n#| label: plot13\n#| echo: true\n#| out-width: 75%\n#| fig-align: center\nunicorns$food <- factor(unicorns$food,\n  levels = c(\"low\", \"medium\", \"high\")\n)\nggplot(unicorns, aes(y = weight, x = food)) +\n  geom_boxplot() +\n  labs(y = \"Weight (g)\", x = \"food Concentration\")\n```\n\nWe can also group our variables by two factors in the same plot.\nLet's plot our `weight` variable but this time plot a separate box for each `food` and parental care treatment (`p_care`) combination.\n \n\n```{r}\n#| label: plot14\n#| echo: true\n#| out-width: 75%\n#| fig-align: center\nboxplot(weight ~ food * p_care,\n  data = unicorns,\n  ylab = \"weight (g)\", xlab = \"food level\"\n)\n```\n\n```{r}\n#| label: plot14-gg\n#| echo: true\n#| out-width: 75%\n#| fig-align: center\nggplot(unicorns, aes(y = weight, x = food)) +\n  geom_boxplot() +\n  labs(y = \"Weight (g)\", x = \"food Concentration\") +\n  facet_grid(.\n  ~ p_care)\n```\n\nThis plot looks much better in ggplot with the use of facet_grid allowing to make similar plots as a function of a third (or even fourth) variable.\n\n### Violin plots\n\nViolin plots are like a combination of a boxplot and a kernel density plot (you saw an example of a kernel density plot in the histogram section above) all rolled into one figure.\nWe can create a violin plot in R using the `vioplot()` function from the `vioplot` package.\nYou'll need to first install this package using `install.packages('vioplot')` function as usual.\nThe nice thing about the `vioplot()` function is that you use it in pretty much the same way you would use the `boxplot()` function.\nWe'll also use the argument `col = \"lightblue\"` to change the fill colour to light blue.\n\n\n```{r}\n#| label: plot16\n#| echo: true\n#| warning: false\n#| message: false\n#| out-width: 75%\n#| fig-align: center\nlibrary(vioplot)\nvioplot(weight ~ food,\n  data = unicorns,\n  ylab = \"weight (g)\", xlab = \"food Concentration\",\n  col = \"lightblue\"\n)\n```\n \nIn the violin plot above we have our familiar boxplot for each `food` level but this time the median value is represented by a white circle.\nPlotted around each boxplot is the kernel density plot which represents the distribution of the data for each food level.\n\n```{r}\n#| label: plot16-gg\n#| echo: true\n#| warning: false\n#| message: false\n#| out-width: 75%\n#| fig-align: center\nggplot(unicorns, aes(y = weight, x = food)) +\n  geom_violin() +\n  geom_boxplot(width = 0.1) +\n  labs(y = \"Weight (g)\", x = \"food Concentration\")\n```\n\n### Dot charts {#sec-dotcharts}\n\nIdentifying unusual observations (aka outliers) in numeric variables is extremely important as they may influence parameter estimates in your statistical model or indicate an error in your data.\nA really useful (if undervalued) plot to help identify outliers is the Cleveland dotplot.\nYou can produce a dotplot in R very simply by using the `dotchart()` function.\n\n\n```{r}\n#| label: plot17\n#| echo: true\n#| out-width: 75%\n#| fig-align: center\ndotchart(unicorns$height)\n```\n\nIn the dotplot above the data from the `height` variable is plotted along the x axis and the data is plotted in the order it occurs in the `unicorns` data frame on the y axis (values near the top of the y axis occur later in the data frame with those lower down occurring at the beginning of the data frame).\nIn this plot we have a single value extending to the right at about 17 cm but it doesn't appear particularly large compared to the rest.\nAn example of a dotplot with an unusual observation is given below.\n\n```{r}\n#| label: plot18\n#| echo: false\n#| out-width: 75%\n#| fig-align: center\nout_height <- unicorns$height\nout_height[30] <- 53\ndotchart(out_height)\n```\n\nWe can also group the values in our `height` variable by a factor variable such as `food` using the `groups =` argument.\nThis is useful for identifying unusual observations within a factor level that might be obscured when looking at all the data together.\n\n```{r}\n#| label: plot19\n#| echo: true\n#| out-width: 75%\n#| fig-align: center\ndotchart(unicorns$height, groups = unicorns$food)\n```\n\n<!-- TO DO -->\n```{r}\n#| label: plot19-gg\n#| echo: true\n#| out-width: 75%\n#| fig-align: center\nggdotchart(data = unicorns, x = \"height\", y = \"food\")\n```\n\n\n### Pairs plots\n\nPreviously in this Chapter we used the `plot()` function to create a scatterplot to explore the relationship between two numeric variables.\nWith datasets that contain many numeric variables, it's often handy to create multiple scatterplots to visualise relationships between all these variables.\nWe could use the `plot()` function to create each of these plot individually, but a much easier way is to use the `pairs()` function.\nThe `pairs()` function creates a multi-panel scatterplot (sometimes called a scatterplot matrix) which plots all combinations of variables.\nLet's create a multi-panel scatterplot of all of the numeric variables in our `unicorns` data frame.\nNote, you may need to click on the 'Zoom' button in RStudio to display the plot clearly.\n\n\n```{r}\n#| label: plot20\n#| echo: true\n#| out-width: 75%\n#| fig-align: center\npairs(unicorns[, c(\n  \"height\", \"weight\", \"mane_size\",\n  \"fluffyness\", \"horn_rings\"\n)])\n# or we could use the equivalent\n# pairs(unicorns[, 4:8])\n```\n\nInterpretation of the pairs plot takes a bit of getting used to.\nThe panels on the diagonal give the variable names.\nThe first row of plots displays the `height` variable on the y axis and the variables `weight`, `mane_size`, `fluffyness` and `unicorns` on the x axis for each of the four plots respectively.\nThe next row of plots have `weight` on the y axis and `height`, `mane_size`, `fluffyness` and `unicorns` on the x axis.\nWe interpret the rest of the rows in the same way with the last row displaying the `unicorns` variable on the y axis and the other variables on the x axis.\nHopefully you'll notice that the plots below the diagonal are the same plots as those above the diagonal just with the axis reversed.\n\n\nTo do pairs plot with ggplot, you nee the `ggpairs()`function from `GGally`package.\nThe output is quite similar but you have only the lower part of the matrix of plots, you get a density plot on the diagonal and the correlations on the upper part of the plot.\n\n\n```{r}\nggpairs(unicorns[, c(\n  \"height\", \"weight\", \"mane_size\",\n  \"fluffyness\", \"horn_rings\"\n)])\n```\n\nThe `pairs()` function can be tweak to do similar things and more but is more involved.\nHave a lok at the great help file for the `pairs()` function (`?pairs`)which provide all the details to do something like the plot below.\n\n```{r}\n#| label: plot22\n#| echo: false\npanel.cor <- function(x, y, digits = 2, prefix = \"\", cex.cor, ...) {\n  usr <- par(\"usr\")\n  par(usr = c(0, 1, 0, 1))\n  r <- abs(cor(x, y))\n  txt <- format(c(r, 0.123456789), digits = digits)[1]\n  txt <- paste0(prefix, txt)\n  if (missing(cex.cor)) cex.cor <- 0.8 / strwidth(txt)\n  text(0.5, 0.5, txt, cex = cex.cor * r)\n}\npanel.hist <- function(x, ...) {\n  usr <- par(\"usr\")\n  par(usr = c(usr[1:2], 0, 1.5))\n  h <- hist(x, plot = FALSE)\n  breaks <- h$breaks\n  nB <- length(breaks)\n  y <- h$counts\n  y <- y / max(y)\n  rect(breaks[-nB], 0, breaks[-1], y, col = \"cyan\", ...)\n}\n\npairs(\n  unicorns[, c(\n    \"height\", \"weight\", \"mane_size\",\n    \"fluffyness\", \"horn_rings\"\n  )],\n  lower.panel = panel.cor,\n  diag.panel = panel.hist,\n  upper.panel = panel.smooth\n)\n```\n\n\n### Coplots\n\nWhen examining the relationship between two numeric variables, it is often useful to be able to determine whether a third variable is obscuring or changing any relationship.\nA really handy plot to use in these situations is a conditioning plot (also known as conditional scatterplot plot) which we can create in R by using the `coplot()` function.\nThe `coplot()` function plots two variables but each plot is conditioned (`|`) by a third variable.\nThis third variable can be either numeric or a factor.\nAs an example, let's look at how the relationship between the number of unicorns (`unicorns` variable) and the `weight` of unicorns changes dependent on `mane_size`.\nNote the `coplot()` function has a `data =` argument so no need to use the `$` notation.\n\n```{r}\n#| label: plot26\n#| echo: true\n#| out-width: 75%\n#| fig-align: center\ncoplot(horn_rings ~ weight | mane_size, data = unicorns)\n```\n\n```{r}\ngg_coplot(unicorns,\n  x = weight, y = horn_rings,\n  faceting = mane_size\n)\n```\n\nIt takes a little practice to interpret coplots.\nThe number of unicorns is plotted on the y axis and the weight of unicorns on the x axis.\nThe six plots show the relationship between these two variables for different ranges of leaf area.\nThe bar plot at the top indicates the range of leaf area values for each of the plots.\nThe panels are read from bottom left to top right along each row.\nFor example, the bottom left panel shows the relationship between number of unicorns and weight for unicorns with the lowest range of leaf area values (approximately 5 - 11 cm^2^).\nThe top right plot shows the relationship between unicorns and weight for unicorns with a leaf area ranging from approximately 16 - 50 cm^2^.\nNotice that the range of values for leaf area differs between panels and that the ranges overlap from panel to panel.\nThe `coplot()` function does it's best to split the data up to ensure there are an adequate number of data points in each panel.\nIf you don't want to produce plots with overlapping data in the panel you can set the `overlap =` argument to `overlap = 0` \n\n\nYou can also use the `coplot()` function with factor conditioning variables.\nWith `gg_coplot()` you need to first set the factor as numeric before plotting and specify `overlap=0`.\nFor example, we can examine the relationship between `unicorns` and `weight` variables conditioned on the factor `food`.\nThe bottom left plot is the relationship between `unicorns` and `weight` for those unicorns in the `low` food treatment.\nThe top left plot shows the same relationship but for unicorns in the `high` food treatment.\n\n```{r}\n#| label: plot28\n#| echo: true\n#| out-width: 75%\n#| fig-align: center\ncoplot(horn_rings ~ weight | food, data = unicorns)\n```\n\n```{r}\nunicorns <- mutate(unicorns, food_num = as.numeric(food))\ngg_coplot(unicorns,\n  x = weight, y = horn_rings,\n  faceting = food_num, overlap = 0\n)\n```\n\n\n\n### Summary of plot function\n\n|       Graph type          |     ggplot2       |      Base R function      |\n|:--------------------------|:---------------------------|:--------------------------|\n|scatterplot                |`geom_point()`                  |`plot()`                   |\n|frequency histogram        |`geom_histogram()` |`hist()`                   |\n|boxplot                    |`geom_boxplot()`                  |`boxplot()`                |\n|Cleveland dotplot          |`ggdotchart()`                 |`dotchart()`               |\n|scatterplot matrix         |`ggpairs()`                   |`pairs()`                  |\n|conditioning plot          |`gg_coplot()`         |`coplot()`                 |\n\n\n\nHopefully, you're getting the idea that we can create really informative exploratory plots quite easily using either base R or ggplot graphics.\nWhich one you use is entirely up to you (that's the beauty of using R, you get to choose) and we happily mix and match to suit our needs.\nIn the next section we cover how to customise your base R plots to get them to look exactly how you want.\n\n\n## Multiple graphs {#sec-mult-graphs}\n\n### Base R\n\nIn base R, one of the most common methods to plot multiple graphs is to use the main graphical function `par()` to split the plotting device up into a number of defined sections using the `mfrow =` argument.\nWith this method, you first need to specify the number of rows and columns of plots you would like and then run the code for each plot.\nFor example, to plot two graphs side by side we would use `par(mfrow = c(1, 2))` to split the device into 1 row and two columns.\n\n```{r}\n#| label: plot55\n#| echo: true\n#| out-width: 75%\n#| fig-align: center\npar(mfrow = c(1, 2))\nplot(unicorns$weight, unicorns$fluffyness,\n  xlab = \"weight\",\n  ylab = \"Fluffyness\"\n)\nboxplot(fluffyness ~ food, data = unicorns, cex.axis = 0.6)\n```\n\nOnce you've finished making your plots don't forget to reset your plotting device back to normal with `par(mfrow = c(1,1))`.\n\n### ggplot\nUsing ggplot in addition to the facet_grid() and facet_wrap functions allowing to easily repeat and organise multiple plots as a function of specific variables, there are multiple way of organising multiple ggplot together.\nThe approach we recommend is using the package `patchwork`.\n\nFirst you will need to install (if you don't have it yet) and make the `patchwork` :package: package available.\n\n```{r}\n#| label: loading-patchwork\n#| eval: false\n#| echo: true\n#| message: false\ninstall.packages(\"patchwork\")\nlibrary(patchwork)\n```\n\n```{r}\n#| label: loading-patchwork_true\n#| eval: true\n#| echo: false\n#| message: false\nlibrary(patchwork)\n```\n\nAn important note: For those who have used base R to produce their figures and are familiar with using `par(mfrow = c(2,2))` (which allows plotting of four figures in two rows and two columns) be aware that this does not work for `ggplot2` objects.\nInstead you will need to use either the `patchwork` package or alternative packages such as `gridArrange` or `cowplot` or covert the `ggplot2` objects to grobs.\n\nTo plot both of the plots together we need to assign each figure to a separate object and then use these objects when we use `patchwork`.\n\nSo we can generate 2 figures and assign them to objects. \nAs you can see, the figures do not appear in the plot window. \nThey will appear only when you call the object.\n\n```{r}\n#| label: calling-figure-name\n#| echo: true\n#| message: false\n#| out-width: 75%\n#| fig-align: center\nfirst_figure <- ggplot(\n  aes(x = height, y = fluffyness, color = food),\n  data = unicorns\n) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  facet_grid(block ~ p_care)\nsecond_figure <- ggplot(\n  aes(x = weight, y = fluffyness, color = food),\n  data = unicorns\n) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  facet_grid(block ~ p_care)\n```\n\n\nWe have two immediate and simple options with patchwork; arrange figures on top of each other (specified with a `/`) or arrange figures side-by-side (specified with either a `+` or a `|`).\nLet's try to plot both figures, one on top of the other.\n\n\n```{r}\n#| label: side-by-side-patchwork\n#| echo: true\n#| message: false\n#| warning: false\n#| out-width: 85%\n#| fig-align: center\nfirst_figure / second_figure\n```\n\n\n*Play around*: Try to create a side-by-side version of the above figure (hint: try the other operators).\n\nWe can take this one step further and assign nested `patchwork` figures to an object and use this in turn to create labels for individuals figures.\n\n\n```{r}\n#| label: labelled-nested\n#| message: false\n#| warning: false\n#| out-width: 75%\n#| fig-align: center\nnested_compare <- first_figure / second_figure\n\nnested_compare +\n  plot_annotation(tag_levels = \"A\", tag_suffix = \")\")\n```\n\n## Customising ggplots {#sec-custom-plot}\n\n**Went for a walk to be edited** :unicorn:\n\n## Exporting plots {#sec-export-plots}\n\nCreating plots in R is all well and good but what if you want to use these plots in your thesis, report or publication? One option is to click on the 'Export' button in the 'Plots' tab in RStudio.\nYou can also export your plots from R to an external file by writing some code in your R script.\nThe advantage of this approach is that you have a little more control over the output format and it also allows you to generate (or update) plots automatically whenever you run your script.\nYou can export your plots in many different formats but the most common are, pdf, png, jpeg and tiff.\n\nBy default, R (and therefore RStudio) will direct any plot you create to the plot window.\nTo save your plot to an external file you first need to redirect your plot to a different graphics device.\nYou do this by using one of the many graphics device functions to start a new graphic device.\nFor example, to save a plot in pdf format we will use the `pdf()` function.\nThe first argument in the `pdf()` function is the filepath and filename of the file we want to save (don't forget to include the .pdf extension).\nOnce we've used the `pdf()` function we can then write all of the code we used to create our plot including any graphical parameters such as setting the margins and splitting up the plotting device.\nOnce the code has run we need to close the pdf plotting device using the `dev.off()` function.\n\n\n```{r}\n#| label: plot60\n#| echo: true\n#| eval: false\npdf(file = \"output/my_plot.pdf\")\npar(mar = c(4.1, 4.4, 4.1, 1.9), xaxs = \"i\", yaxs = \"i\")\nplot(unicorns$weight, unicorns$fluffyness,\n  xlab = \"weight (g)\",\n  ylab = expression(paste(\"shoot area (cm\"^\"2\", \")\")),\n  xlim = c(0, 30), ylim = c(0, 200), bty = \"l\",\n  las = 1, cex.axis = 0.8, tcl = -0.2,\n  pch = 16, col = \"dodgerblue1\", cex = 0.9\n)\ntext(x = 28, y = 190, label = \"A\", cex = 2)\ndev.off()\n```\n\nIf we want to save this plot in png format we simply use the `png()` function in more or less the same way we used the `pdf()` function.\n\n```{r}\n#| label: plot61\n#| echo: true\n#| eval: false\npng(\"output/my_plot.png\")\npar(mar = c(4.1, 4.4, 4.1, 1.9), xaxs = \"i\", yaxs = \"i\")\nplot(unicorns$weight, unicorns$fluffyness,\n  xlab = \"weight (g)\",\n  ylab = expression(paste(\"shoot area (cm\"^\"2\", \")\")),\n  xlim = c(0, 30), ylim = c(0, 200), bty = \"l\",\n  las = 1, cex.axis = 0.8, tcl = -0.2,\n  pch = 16, col = \"dodgerblue1\", cex = 0.9\n)\ntext(x = 28, y = 190, label = \"A\", cex = 2)\ndev.off()\n```\n\nOther useful functions are; `jpeg()`, `tiff()` and `bmp()`.\nAdditional arguments to these functions allow you to change the size, resolution and background colour of your saved images.\nSee `?png` for more details.\n\n`ggplot2` :package: provide a really useful function `ggsave()` function which simplify saving plots a lot but works only for ggplots.\n\nAfter producing a plot and seeing it in your IDE, you can simply run ggsave() with the adequate argument to save the last ggplot produced.\nYou can of course, also, specify which plot to save.\n\n```{r}\n#| label: ggsave\n#| eval: false\nggsave(\"file.png\")\n```\n\n\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":true,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","from":"markdown+emoji","number-sections":true,"output-file":"04-graphics_short.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en-CA","fig-responsive":true,"quarto-version":"1.5.31","version":"0.6.0","year":2024,"bibliography":["biblio/book.bib","biblio/grateful-refs.bib"],"biblio-style":"apalike","csl":"biblio/ecology.csl","cit-title":"Do what you think is interesting,  \ndo something that you think is fun and worthwhile,  \nbecause otherwise you won’t do it well anyway.\n","cit-author":"Brian W. Kernighan","theme":{"light":"cosmo","dark":["cosmo","css/theme-dark.scss"]},"author-meta":"Julien Martin"},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"paged","error":false,"eval":true,"cache":true,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"lualatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","from":"markdown+emoji","number-sections":true,"output-file":"04-graphics_short.pdf"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"block-headings":false,"version":"0.6.0","year":2024,"bibliography":["biblio/book.bib","biblio/grateful-refs.bib"],"biblio-style":"apalike","csl":"biblio/ecology.csl","lang":"en-CA","cit-title":"Do what you think is interesting,  \ndo something that you think is fun and worthwhile,  \nbecause otherwise you won’t do it well anyway.\n","cit-author":"Brian W. Kernighan","documentclass":"scrreprt","classoption":["chapterprefix=true","headings=big","twoside=semi"],"papersize":"letter","fontsize":"11pt","geometry":["top=2cm","bottom=2cm","left=2cm","right=2cm","footskip=1cm"],"colorlinks":true,"linestretch":1.5,"template-partials":["latex/before-title.tex","latex/before-body.tex"]},"extensions":{"book":{"selfContainedOutput":true}}},"epub":{"identifier":{"display-name":"ePub","target-format":"epub","base-format":"epub"},"execute":{"fig-width":5,"fig-height":4,"fig-format":"png","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"epub","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":false,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"default-image-extension":"png","html-math-method":"mathml","to":"epub","toc":true,"output-file":"04-graphics_short.epub"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"version":"0.6.0","year":2024,"bibliography":["biblio/book.bib","biblio/grateful-refs.bib"],"biblio-style":"apalike","csl":"biblio/ecology.csl","lang":"en-CA","cit-title":"Do what you think is interesting,  \ndo something that you think is fun and worthwhile,  \nbecause otherwise you won’t do it well anyway.\n","cit-author":"Brian W. Kernighan","dev":"svglite","stylesheet":"css/epub.css"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","pdf","epub"]}