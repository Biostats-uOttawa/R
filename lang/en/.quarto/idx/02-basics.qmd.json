{"title":"Some R basics","markdown":{"headingText":"Some R basics","headingAttr":{"id":"sec-basics_r","classes":[],"keyvalue":[]},"containsRefs":false,"markdown":"\nIn this Chapter we'll cover how to:\n\n- create objects and assigning values to objects\n- exploring different types of objects and how to perform some common operations on objects\n- get help in R and highlight some resources to help support your R learning.\n- save your work\n- use and install packages to extend base R capabilities.\n\n## Important considerations\n\nWe provide screenshot of RStudio but everything is really similar when using VSCode.\n\nBefore we continue, here are a few things to bear in mind as you work through this Chapter:\n\n- R is case sensitive i.e.\n`A` is not the same as `a` and `anova` is not the same as `Anova`.\n\n- Anything that follows a `#` symbol is interpreted as a comment and ignored by R.\nComments should be used liberally throughout your code for both your own information and also to help your collaborators.\nWriting comments is a bit of an [art][comment] and something that you will become more adept at as your experience grows.\n\n- In R, commands are generally separated by a new line.\nYou can also use a semicolon `;` to separate your commands but we strongly recommend to avoid using it.\n\n- If a continuation prompt `+` appears in the console after you execute your code this means that you haven't completed your code correctly.\nThis often happens if you forget to close a bracket and is especially common when nested brackets are used (`(((some command))`).\nJust finish the command on the new line and fix the typo or hit escape on your keyboard (see point below) and fix.\n\n- In general, R is fairly tolerant of extra spaces inserted into your code, in fact using spaces is actively encouraged.\nHowever, spaces should not be inserted into operators i.e.\n`<-` should not read `< -` (note the space).\nSee the [style guide][style-google] for advice on where to place spaces to make your code more readable.\n\n- If your console 'hangs' and becomes unresponsive after running a command you can often get yourself out of trouble by pressing the escape key (esc) on your keyboard or clicking on the stop icon in the top right of your console.\nThis will terminate most current operations.\n\n## First step in the console\n\nIn @sec-chap1, we learned about the [R Console](#sec-cons) and creating scripts and [Projects](#sec-rsprojs).\nWe also saw how you write your R code in a script and then source this code into the console to get it to run (if you've forgotten how to do this, pop back to the console section (-@sec-cons) to refresh your memory).\nWriting your code in a script means that you'll always have a permanent record of everything you've done (provided you save your script) and also allows you to make loads of comments to remind your future self what you've done.\nSo, while you're working through this Chapter we suggest that you create a new script (or RStudio [Project](#sec-rsprojs)) to write your code as you follow along.\n\nAs we saw in @sec-chap1, at a basic level we can use R much as you would use a calculator.\nWe can type an arithmetic expression into our script, then source it into the console and receive a result.\nFor example, if we type the expression `1 + 1` and then source this line of code we get the answer `2` (:smiley:!)\n\n```{r}\n#| echo: true\n#| eval: true\n1 + 1\n```\n\nThe `[1]` in front of the result tells you that the observation number at the beginning of the line is the first observation.\nThis is not much help in this example, but can be quite useful when printing results with multiple lines (we'll see an example below).\nThe other obvious arithmetic operators are `-`, `*`, `/` for subtraction, multiplication and division respectively. Matrix multiplication operator is `%*%`.\nR follows the usual mathematical convention of [order of operations][op-prec].\nFor example, the expression `2 + 3 * 4` is interpreted to have the value `2 + (3 * 4) = 14`, not `(2 + 3) * 4 = 20`.\nThere are a huge range of mathematical functions in R, some of the most useful include; `log()`, `log10()`, `exp()`, `sqrt()`.\n\n```{r}\n#| echo: true\n#| eval: true\nlog(1) # logarithm to base e\nlog10(1) # logarithm to base 10\nexp(1) # natural antilog\nsqrt(4) # square root\n4^2 # 4 to the power of 2\npi # not a function but useful\n```\n\nIt's important to realize that when you run code as we've done above, the result of the code (or **value**) is only displayed in the console.\nWhilst this can sometimes be useful it is usually much more practical to store the value(s) in aN object.\n\n## Objects in R\n\nAt the heart of almost everything you will do (or ever likely to do) in R is the concept that everything in R is an [object][chambers].\nThese objects can be almost anything, from a single number or character string (like a word) to highly complex structures like the output of a plot, a summary of your statistical analysis or a set of R commands that perform a specific task.\nUnderstanding how you create objects and assign values to objects is key to understanding R.\n\n### Creating objects {#sec-r_objs}\n\nTo create an object we simply give the object a name.\nWe can then assign a value to this object using the *assignment operator* `<-` (sometimes called the *gets operator*).\nThe assignment operator is a composite symbol comprised of a ‘less than’ symbol `<` and a hyphen `-` .\n\n```{r}\n#| echo: true\n#| eval: true\nmy_obj <- 32\n```\n\nIn the code above, we created an object called `my_obj` and assigned it a value of the number `32` using the assignment operator (in our head we always read this as '*my_obj is 32*').\nYou can also use `=` instead of `<-` to assign values but this is bad practice since it can lead to confusion later on when programming in `R` (see @sec-prog_r) and we would discourage you from using this notation.\n\nTo view the value of the object you simply type the name of the object\n\n```{r}\n#| echo: true\n#| eval: true\nmy_obj\n```\n\nNow that we've created this object, R knows all about it and will keep track of it during this current R session.\nAll of the objects you create will be stored in the current workspace and you can view all the objects in your workspace in RStudio by clicking on the 'Environment' tab in the top right hand pane.\n\n```{r}\n#| label: fig-rstudio_env\n#| fig-cap: RStudio Environment tab\n#| echo: false\n#| out-width: 75%\n#| fig-align: center\nknitr::include_graphics(path = \"images/basic/rs_env.png\")\n```\n\nIf you click on the down arrow on the 'List' icon in the same pane and change to 'Grid' view RStudio will show you a summary of the objects including the type (numeric - it's a number), the length (only one value in this object), its 'physical' size and its value (48 in this case). In VSCode, go on the R extension pane, and you can obtain the same information.\n\n```{r}\n#| label: fig-rstudio_env2\n#| fig-cap: RStudio Environment tab in grid format\n#| echo: false\n#| out-width: 75%\n#| fig-align: center\nknitr::include_graphics(path = \"images/basic/rs_env2.png\")\n```\n\nThere are many different types of values that you can assign to an object.\nFor example\n\n```{r}\n#| echo: true\n#| eval: true\nmy_obj2 <- \"R is cool\"\n```\n\nHere we have created an object called `my_obj2` and assigned it a value of `R is cool` which is a character string.\nNotice that we have enclosed the string in quotes.\nIf you forget to use the quotes you will receive an error message.\n\nOur workspace now contains both objects we've created so far with `my_obj2` listed as type character.\n\n```{r}\n#| label: fig-rstudio_env3\n#| fig-cap: RStudio environment tab with my_obj2 as a character\n#| echo: false\n#| out-width: 75%\n#| fig-align: center\nknitr::include_graphics(path = \"images/basic/rs_env3.png\")\n```\n\nTo change the value of an existing object we simply reassign a new value to it.\nFor example, to change the value of `my_obj2` from `\"R is cool\"` to the number `1024`\n\n```{r}\n#| echo: true\n#| eval: true\nmy_obj2 <- 1024\n```\n\nNotice that the Type has changed to numeric and the value has changed to 1024 in the environment\n\n```{r}\n#| label: fig-rstudio_env4\n#| fig-cap: RStudio environment tab with updated my_obj2 as numeric\n#| echo: false\n#| out-width: 75%\n#| fig-align: center\nknitr::include_graphics(path = \"images/basic/rs_env4.png\")\n```\n\nOnce we have created a few objects, we can do stuff with our objects.\nFor example, the following code creates a new object `my_obj3` and assigns it the value of `my_obj` added to `my_obj2` which is 1072 (48 + 1024 = 1072).\n\n```{r}\n#| echo: true\n#| eval: true\nmy_obj3 <- my_obj + my_obj2\nmy_obj3\n```\n\nNotice that to display the value of `my_obj3` we also need to write the object's name.\nThe above code works because the values of both `my_obj` and `my_obj2` are numeric (i.e.\na number).\nIf you try to do this with objects with character values (**character class**) you will receive an error\n\n```{r}\n#| echo: true\n#| eval: false\nchar_obj <- \"hello\"\nchar_obj2 <- \"world!\"\nchar_obj3 <- char_obj + char_obj2\n# Error in char_obj+char_obj2:non-numeric argument to binary operator\n```\n\nThe error message is essentially telling you that either one or both of the objects `char_obj` and `char_obj2` is not a number and therefore cannot be added together.\n\nWhen you first start learning R, dealing with errors and warnings can be frustrating as they're often difficult to understand (what's an [*argument*][r_arg]? what's a [*binary operator*][bin_op]?).\nOne way to find out more information about a particular error is to search for a generalised version of the error message.\nFor the above error try searching [*'non-numeric argument to binary operator error + r'*][non_num_err] or even [*'common r error messages'*][com_err].\n\nAnother error message that you'll get quite a lot when you first start using R is `Error: object 'XXX' not found`.\nAs an example, take a look at the code below\n\n```r\nmy_obj <- 48\nmy_obj4 <- my_obj + no_obj\n# Error: object 'no_obj' not found\n```\n\nR returns an error message because we haven't created (defined) the object `no_obj` yet.\nAnother clue that there's a problem with this code is that, if you check your environment, you'll see that object `my_obj4` has not been created.\n\n### Naming objects\n\nNaming your objects is one of the most difficult things you will do in R.\nIdeally your object names should be kept both short and informative which is not always easy.\nIf you need to create objects with multiple words in their name then use either an underscore or a dot between words or capitalise the different words.\nWe prefer the underscore format and never include uppercase in names (called [*snake_case*][snake])\n\n```r\noutput_summary <- \"my analysis\" # recommended#\noutput.summary <- \"my analysis\"\noutputSummary <- \"my analysis\"\n```\n\nThere are also a few limitations when it come to giving objects names.\nAn object name cannot start with a number or a dot followed by a number (i.e.\n`2my_variable` or `.2my_variable`).\n You should also avoid using non-alphanumeric characters in your object names (i.e.\n&, ^, /, ! etc).\nIn addition, make sure you don’t name your objects with reserved words (i.e.\n`TRUE`, `NA`) and it's never a good idea to give your object the same name as a built-in function.\nOne that crops up more times than we can remember is\n\n```r\ndata <- read.table(\"mydatafile\", header = TRUE)\n```\n\nYes, `data()` is a function in R to load or list available data sets from packages.\n\n\n## Using functions in R {#sec-funcs}\n\nUp until now we've been creating simple objects by directly assigning a single value to an object.\nIt's very likely that you'll soon want to progress to creating more complicated objects as your R experience grows and the complexity of your tasks increase.\nHappily, R has a multitude of functions to help you do this.\nYou can think of a function as an object which contains a series of instructions to perform a specific task.\nThe base installation of R comes with many functions already defined or you can increase the power of R by installing one of the 10,000's of [packages](#sec-packages) now available.\nOnce you get a bit more experience with using R you may want to define your own functions to perform tasks that are specific to your goals (more about this in @sec-prog_r).\n\n\nThe first function we will learn about is the `c()` function.\nThe `c()` function is short for concatenate and we use it to join together a series of values and store them in a data structure called a [**vector**][vector] (more on vectors in @sec-data-r).\n\n```{r}\n#| echo: true\n#| eval: true\nmy_vec <- c(2, 3, 1, 6, 4, 3, 3, 7)\n```\n\nIn the code above we've created an object called `my_vec` and assigned it a value using the function `c()`.\nThere are a couple of really important points to note here.\nFirstly, when you use a function in R, the function name is **always** followed by a pair of round brackets even if there's nothing contained between the brackets.\nSecondly, the argument(s) of a function are placed inside the round brackets and are separated by commas.\nYou can think of an argument as way of customising the use or behaviour of a function.\nIn the example above, the arguments are the numbers we want to concatenate.\nFinally, one of the tricky things when you first start using R is to know which function to use for a particular task and how to use it.\nThankfully each function will always have a help document associated with it which will explain how to use the function (more on this later @sec-help) and a quick web search will also usually help you out.\n\nTo examine the value of our new object we can simply type out the name of the object as we did before\n\n```{r}\n#| echo: true\n#| eval: true\nmy_vec\n```\n\nNow that we've created a vector we can use other functions to do useful stuff with this object.\nFor example, we can calculate the mean, variance, standard deviation and number of elements in our vector by using the `mean()`, `var()`, `sd()` and `length()` functions\n\n```{r}\n#| echo: true\n#| eval: true\nmean(my_vec) # returns the mean of my_vec\nvar(my_vec) # returns the variance of my_vec\nsd(my_vec) # returns the standard deviation of my_vec\nlength(my_vec) # returns the number of elements in my_vec\n```\n\nIf we wanted to use any of these values later on in our analysis we can just assign the resulting value to another object\n\n```{r}\n#| echo: true\n#| eval: true\nvec_mean <- mean(my_vec) # returns the mean of my_vec\nvec_mean\n```\n\nSometimes it can be useful to create a vector that contains a regular sequence of values in steps of one.\nHere we can make use of a shortcut using the `:` symbol.\n\n```{r}\n#| echo: true\n#| eval: true\nmy_seq <- 1:10 # create regular sequence\nmy_seq\nmy_seq2 <- 10:1 # in decending order\nmy_seq2\n```\n\nOther useful functions for generating vectors of sequences include the `seq()` and `rep()` functions.\nFor example, to generate a sequence from 1 to 5 in steps of 0.5\n\n```{r}\n#| echo: true\n#| eval: true\nmy_seq2 <- seq(from = 1, to = 5, by = 0.5)\nmy_seq2\n```\n\nHere we've used the arguments `from =` and `to =` to define the limits of the sequence and the `by =` argument to specify the increment of the sequence.\nPlay around with other values for these arguments to see their effect.\n\nThe `rep()` function allows you to replicate (repeat) values a specified number of times.\nTo repeat the value 2, 10 times\n\n```{r}\n#| echo: true\n#| eval: true\nmy_seq3 <- rep(2, times = 10) # repeats 2, 10 times\nmy_seq3\n```\n\nYou can also repeat non-numeric values\n\n```{r}\n#| echo: true\n#| eval: true\nmy_seq4 <- rep(\"abc\", times = 3) # repeats ‘abc’ 3 times\nmy_seq4\n```\n\nor each element of a series\n\n```{r}\n#| echo: true\n#| eval: true\nmy_seq5 <- rep(1:5, times = 3) # repeats the series 1 to\n# 5, 3 times\nmy_seq5\n```\n\nor elements of a series\n\n```{r}\n#| echo: true\n#| eval: true\nmy_seq6 <- rep(1:5, each = 3) # repeats each element of the\n# series 3 times\nmy_seq6\n```\n\nWe can also repeat a non-sequential series\n\n```{r}\n#| echo: true\n#| eval: true\nmy_seq7 <- rep(c(3, 1, 10, 7), each = 3) # repeats each\n# element of the\n# series 3 times\nmy_seq7\n```\n\nNote in the code above how we've used the `c()` function inside the `rep()` function.\nNesting functions allows us to build quite complex commands within a single line of code and is a very common practice when using R.\nHowever, care needs to be taken as too many nested functions can make your code quite difficult for others to understand (or yourself some time in the future!).\nWe could rewrite the code above to explicitly separate the two different steps to generate our vector.\nEither approach will give the same result, you just need to use your own judgement as to which is more readable.\n\n```{r}\n#| echo: true\n#| eval: true\nin_vec <- c(3, 1, 10, 7)\nmy_seq7 <- rep(in_vec, each = 3) # repeats each element of\n# the series 3 times\nmy_seq7\n```\n\n\n## Working with vectors {#sec-vectors}\n\nManipulating, summarising and sorting data using R is an important skill to master but one which many people find a little confusing at first.\nWe'll go through a few simple examples here using vectors to illustrate some important concepts but will build on this in much more detail in @sec-data-r where we will look at more complicated (and useful) data structures.\n\n### Extracting elements\n\nTo extract (also known as indexing or subscripting) one or more values (more generally known as elements) from a vector we use the square bracket `[ ]` notation.\nThe general approach is to name the object you wish to extract from, then a set of square brackets with an index of the element you wish to extract contained within the square brackets.\nThis index can be a position or the result of a logical test.\n\n#### Positional index {-}\n\nTo extract elements based on their position we simply write the position inside the `[ ]`.\nFor example, to extract the 3rd value of `my_vec`\n\n```{r}\n#| echo: true\n#| eval: true\nmy_vec # remind ourselves what my_vec looks like\nmy_vec[3] # extract the 3rd value\n\n# if you want to store this value in another object\nval_3 <- my_vec[3]\nval_3\n```\n\nNote that the positional index starts at 1 rather than 0 like some other other programming languages (i.e.\nPython).\n\nWe can also extract more than one value by using the `c()` function inside the square brackets.\nHere we extract the 1^st^, 5^th^, 6^th^ and 8^th^ element from the `my_vec` object\n\n```{r}\n#| echo: true\n#| eval: true\nmy_vec[c(1, 5, 6, 8)]\n```\n\nOr we can extract a range of values using the `:` notation.\nTo extract the values from the 3^rd^ to the 8^th^ elements\n\n```{r}\n#| echo: true\n#| eval: true\nmy_vec[3:8]\n```\n\n#### Logical index {#sec-logical-index}\n\nAnother really useful way to extract data from a vector is to use a logical expression as an index.\nFor example, to extract all elements with a value greater than 4 in the vector `my_vec`\n\n```{r}\n#| echo: true\n#| eval: true\nmy_vec[my_vec > 4]\n```\n\nHere, the logical expression is `my_vec > 4` and R will only extract those elements that satisfy this logical condition.\nSo how does this actually work? If we look at the output of just the logical expression without the square brackets you can see that R returns a vector containing either `TRUE` or `FALSE` which correspond to whether the logical condition is satisfied for each element.\nIn this case only the 4^th^ and 8^th^ elements return a `TRUE` as their value is greater than 4.\n\n```{r}\n#| echo: true\n#| eval: true\nmy_vec > 4\n```\n\nSo what R is actually doing under the hood is equivalent to\n\n```{r}\n#| echo: true\n#| eval: true\nmy_vec[c(FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, TRUE)]\n```\n\nand only those element that are `TRUE` will be extracted.\n\nIn addition to the `<` and `>` operators you can also use composite operators to increase the complexity of your expressions.\nFor example the expression for 'greater or equal to' is `>=`.\nTo test whether a value is equal to a value we need to use a double equals symbol `==` and for 'not equal to' we use `!=` (the `!` symbol means 'not').\n\n```{r}\n#| echo: true\n#| eval: true\nmy_vec[my_vec >= 4] # values greater or equal to 4\nmy_vec[my_vec < 4] # values less than 4\nmy_vec[my_vec <= 4] # values less than or equal to 4\nmy_vec[my_vec == 4] # values equal to 4\nmy_vec[my_vec != 4] # values not equal to 4\n```\n\nWe can also combine multiple logical expressions using [Boolean expressions][boolean].\nIn R the `&` symbol means AND and the `|` symbol means OR.\nFor example, to extract values in `my_vec` which are less than 6 AND greater than 2\n\n```{r}\n#| echo: true\n#| eval: true\nval26 <- my_vec[my_vec < 6 & my_vec > 2]\nval26\n```\n\nor extract values in `my_vec` that are greater than 6 OR less than 3\n\n```{r}\n#| echo: true\n#| eval: true\nval63 <- my_vec[my_vec > 6 | my_vec < 3]\nval63\n```\n\n### Replacing elements\n\nWe can change the values of some elements in a vector using our `[ ]` notation in combination with the assignment operator `<-`.\nFor example, to replace the 4^th^ value of our `my_vec` object from `6` to `500`\n\n```{r}\n#| echo: true\n#| eval: true\nmy_vec[4] <- 500\nmy_vec\n```\n\nWe can also replace more than one value or even replace values based on a logical expression\n\n```{r}\n#| echo: true\n#| eval: true\n# replace the 6th and 7th element with 100\nmy_vec[c(6, 7)] <- 100\nmy_vec\n\n# replace element that are less than or equal to 4 with 1000\nmy_vec[my_vec <= 4] <- 1000\nmy_vec\n```\n\n### Ordering elements {#sec-vec_ord}\n\nIn addition to extracting particular elements from a vector we can also order the values contained in a vector.\nTo sort the values from lowest to highest value we can use the `sort()` function\n\n```{r}\n#| echo: true\n#| eval: true\nvec_sort <- sort(my_vec)\nvec_sort\n```\n\nTo reverse the sort, from highest to lowest, we can either include the `decreasing = TRUE` argument when using the `sort()` function\n\n```{r}\n#| echo: true\n#| eval: true\nvec_sort2 <- sort(my_vec, decreasing = TRUE)\nvec_sort2\n```\n\nor first sort the vector using the `sort()` function and then reverse the sorted vector using the `rev()` function.\nThis is another example of nesting one function inside another function.\n\n```{r}\n#| echo: true\n#| eval: true\nvec_sort3 <- rev(sort(my_vec))\nvec_sort3\n```\n\nWhilst sorting a single vector is fun, perhaps a more useful task would be to sort one vector according to the values of another vector.\nTo do this we should use the `order()` function in combination with `[ ]`.\nTo demonstrate this let's create a vector called `height` containing the height of 5 different people and another vector called `p.names` containing the names of these people (so Joanna is 180 cm, Charlotte is 155 cm etc)\n\n```{r}\n#| echo: true\n#| eval: true\nheight <- c(180, 155, 160, 167, 181)\nheight\n\np.names <- c(\"Joanna\", \"Charlotte\", \"Helen\", \"Karen\", \"Amy\")\np.names\n```\n\nOur goal is to order the people in `p.names` in ascending order of their `height`.\nThe first thing we'll do is use the `order()` function with the `height` variable to create a vector called `height_ord`\n\n```{r}\n#| echo: true\n#| eval: true\nheight_ord <- order(height)\nheight_ord\n```\n\nOK, what's going on here? The first value, `2`, (remember ignore `[1]`) should be read as ‘the smallest value of `height` is the second element of the `height` vector’.\nIf we check this by looking at the `height` vector above, you can see that element 2 has a value of 155, which is the smallest value.\nThe second smallest value in `height` is the 3^rd^ element of `height`, which when we check is 160 and so on.\nThe largest value of `height` is element `5` which is 181.\nNow that we have a vector of the positional indices of heights in ascending order (`height_ord`), we can extract these values from our `p.names` vector in this order\n\n```{r}\n#| echo: true\n#| eval: true\nnames_ord <- p.names[height_ord]\nnames_ord\n```\n\nYou're probably thinking ‘what’s the use of this?’ Well, imagine you have a dataset which contains two columns of data and you want to sort each column.\nIf you just use `sort()` to sort each column separately, the values of each column will become uncoupled from each other.\nBy using the 'order()' on one column, a vector of positional indices is created of the values of the column in ascending order  This vector can be used on the second column, as the index of elements which will return a vector of values based on the first column.\nIn all honestly, when you have multiple related vectors you need to use a data.frame type of object (see @sec-data-r) instead of multiple independent vectors.\n\n### Vectorisation\n\nOne of the great things about R functions is that most of them are vectorised.\nThis means that the function will operate on all elements of a vector without needing to apply the function on each element separately.\nFor example, to multiple each element of a vector by 5 we can simply use\n\n```{r}\n#| echo: true\n#| eval: true\n# create a vector\nmy_vec2 <- c(3, 5, 7, 1, 9, 20)\n\n# multiply each element by 5\nmy_vec2 * 5\n```\n\nOr we can add the elements of two or more vectors\n\n```{r}\n#| echo: true\n#| eval: true\n# create a second vector\nmy_vec3 <- c(17, 15, 13, 19, 11, 0)\n\n# add both vectors\nmy_vec2 + my_vec3\n\n# multiply both vectors\nmy_vec2 * my_vec3\n```\n\nHowever, you must be careful when using vectorisation with vectors of different lengths as R will quietly recycle the elements in the shorter vector rather than throw a wobbly (error).\n\n```{r}\n#| echo: true\n#| eval: true\n# create a third vector\nmy_vec4 <- c(1, 2)\n\n# add both vectors - quiet recycling!\nmy_vec2 + my_vec4\n```\n\n### Missing data {#sec-na_vals}\n\nIn R, missing data is usually represented by an `NA` symbol meaning 'Not Available'.\nData may be missing for a whole bunch of reasons, maybe your machine broke down, maybe you broke down, maybe the weather was too bad to collect data on a particular day etc etc.\nMissing data can be a pain in the proverbial both from an R perspective and also a statistical perspective.\nFrom an R perspective missing data can be problematic as different functions deal with missing data in different ways.\nFor example, let's say we collected air temperature readings over 10 days, but our thermometer broke on day 2 and again on day 9 so we have no data for those days\n\n```{r}\n#| echo: true\n#| eval: true\ntemp <- c(7.2, NA, 7.1, 6.9, 6.5, 5.8, 5.8, 5.5, NA, 5.5)\ntemp\n```\n\nWe now want to calculate the mean temperature over these days using the `mean()` function\n\n```{r}\n#| echo: true\n#| eval: true\nmean_temp <- mean(temp)\nmean_temp\n```\n\nIf a vector has a missing value then the only possible value to return when calculating a mean is `NA`.\nR doesn't know that you perhaps want to ignore the `NA` values (R can't read your mind - yet!).\nIf we look at the help file (using `?mean` - see the next section @sec-help for more details) associated with the `mean()` function we can see there is an argument `na.rm = ` which is set to `FALSE` by default.\n\n> na.rm - a logical value indicating whether NA values should be stripped before the computation proceeds.\n\nIf we change this argument to `na.rm = TRUE` when we use the `mean()` function this will allow us to ignore the `NA` values when calculating the mean\n\n```{r}\n#| echo: true\n#| eval: true\nmean_temp <- mean(temp, na.rm = TRUE)\nmean_temp\n```\n\nIt's important to note that the `NA` values have not been removed from our `temp` object (that would be bad practice), rather the `mean()` function has just ignored them.\nThe point of the above is to highlight how we can change the default behaviour of a function using an appropriate argument.\nThe problem is that not all functions will have an `na.rm =` argument, they might deal with `NA` values differently.\nHowever, the good news is that every help file associated with any function will **always** tell you how missing data are handled by default.\n\n## Getting help {#sec-help}\n\nThis book is intended as a relatively brief introduction to R and as such you will soon be using functions and packages that go beyond this scope of this introductory text.\nFortunately, one of the strengths of R is its comprehensive and easily accessible help system and wealth of online resources where you can obtain further information.\n\n### R help\n\nTo access R’s built-in help facility to get information on any function simply use the `help()` function.\nFor example, to open the help page for our friend the `mean()` function.\n\n```r\nhelp(\"mean\")\n```\n\nor you can use the equivalent shortcut\n\n```r\n?mean\n```\n\nthe help page is displayed in the 'Help' tab in the Files pane (usually in the bottom right of RStudio)\n\n```{r}\n#| label: fig-rstudio_help\n#| fig-cap: Help page for the `mean()` function in RStudio Help pane\n#| echo: false\n#| out-width: 50%\n#| fig-align: center\nknitr::include_graphics(path = \"images/basic/rs_help.png\")\n```\n\nAdmittedly the help files can seem anything but helpful when you first start using R.\nThis is probably because they're written in a very concise manner and the language used is often quite technical and full of jargon.\nHaving said that, you do get used to this and will over time even come to appreciate a certain beauty in their brevity (honest!).\nOne of the great things about the help files is that they all have a very similar structure regardless of the function.\nThis makes it easy to navigate through the file to find exactly what you need.\n\nThe first line of the help document contains information such as the name of the function and the package where the function can be found.\nThere are also other headings that provide more specific information such as\n\n| Headings | Description |\n|:----|:---------------|\n| **Description:** | gives a brief description of the function and what it does.|\n| **Usage:** | gives the name of the arguments associated with the function and possible default values.|\n| **Arguments:** | provides more detail regarding each argument and what they do.|\n| **Details:** | gives further details of the function if required.|\n| **Value:** | if applicable, gives the type and structure of the object returned by the function or the operator.|\n| **See Also:** | provides information on other help pages with similar or related content.|\n| **Examples:** | gives some examples of using the function.|\n\n<!--\n: Help file structure {#tbl-help}\n-->\n\nThe **Examples** are are really helpful, all you need to do is copy and paste them into the console to see what happens.\nYou can also access examples at any time by using the `example()` function (i.e.\n`example(\"mean\")`)\n\nThe `help()` function is useful if you know the name of the function.\nIf you're not sure of the name, but can remember a key word then you can search R's help system using the `help.search()` function.\n\n```r\nhelp.search(\"mean\")\n```\n\nor you can use the equivalent shortcut\n\n```r\n??mean\n```\n\nThe results of the search will be displayed in RStudio under the 'Help' tab as before.\nThe `help.search()` function searches through the help documentation, code demonstrations and package vignettes and displays the results as clickable links for further exploration.\n\n```{r}\n#| label: fig-rstudio_help2\n#| fig-cap: Output of the `help.search()` function in RStudio\n#| echo: false\n#| out-width: 50%\n#| fig-align: center\nknitr::include_graphics(path = \"images/basic/rs_help2.png\")\n```\n\nAnother useful function is `apropos()`.\nThis function can be used to list all functions containing a specified character string.\nFor example, to find all functions with `mean` in their name\n\n```{r}\n#| echo: true\n#| eval: true\napropos(\"mean\")\n```\n\nYou can then bring up the help file for the relevant function.\n\n```r\nhelp(\"kmeans\")\n```\n\nAnother function is `RSiteSearch()` which enables you to search for keywords and phrases in function help pages and vignettes for all CRAN packages.\nThis function allows you to access the search engine of the R website <https://www.r-project.org/search.html> directly from the Console with the results displayed in your web browser.\n\n```r\nRSiteSearch(\"regression\")\n```\n\n### Other sources of help {#sec-rhelp}\n\nThere really has never been a better time to start learning R.\nThere are a plethora of freely available online resources ranging from whole courses to subject specific tutorials and mailing lists.\nThere are also plenty of paid for options if that's your thing but unless you've money to burn there really is no need to part with your hard earned cash.\nSome resources we have found helpful are listed below.\n\n#### General R resources\n\n- [R-Project][r-docs]: User contributed documentation\n- [The R Journal][r-journal]: Journal of the R project for statistical computing\n- [Swirl][swirl]: An R package that teaches you R from within R\n- [RStudio's printable cheatsheets][rstudio-cheat]\n- [Rseek][rseek] A custom Google search for R-related sites\n\n#### Getting help\n\n- [Google it!][google-cust]: Try Googling any error messages you get.\nIt's not cheating and everyone does it! You'll be surprised how many other people have probably had the same problem and solved it.\n\n- [Stack Overflow][stackr]: There are many thousands of questions relevant to R on Stack Overflow.\n[Here][stack-pop] are the most popular ones, ranked by vote.\nMake sure you search for similar questions before asking your own, and make sure you include a [reproducible example][stack-repro] to get the most useful advice.\nA reproducible example is a minimal example that lets others who are trying to help you to see the error themselves.\n\n#### R markdown resources\n\n- [Basic markdown and R markdown reference][bio-con]\n- [A good markdown reference][md-ref]\n- [A good 10-minute markdown tutorial][md-tut]\n- [RStudio's R markdown cheatsheet][rmd-cheat]\n- [R markdown reference sheet][rmd-ref]\n- [The R markdown documentation][rs-rm-docs] including a [getting started guide][rm-lesson], a [gallery of demos][rm-gallery], and several [articles][rs-articles] for more advanced usage.\n- [The knitr website][knitr] has lots of useful reference material about how knitr works.\n\n#### Git and GitHub resources\n\n- [Happy Git][git_happy]: Great resource for using Git and GitHub\n- [Version control with RStudio][rs-Git]: RStudio document for using version control\n- [Using Git from RStudio][git-rs]: Good 10 minute guide\n- [The R Class][rclass]: In depth guide to using Git and GitHub with RStudio\n\n#### R programming\n\n- [R Programming for Data Science][r-rprog]: In depth guide to R programming\n- [R for Data Science][r4ds]: Fantastic book, tidyverse orientated\n\n## Saving stuff in R\n\nYour approach to saving work in R and RStudio depends on what you want to save.\nMost of the time the only thing you will need to save is the R code in your script(s).\nRemember your script is a reproducible record of everything you've done so all you need to do is open up your script in a new RStudio session and source it into the R Console and you're back to where you left off.\n\nUnless you've followed our suggestion about changing the default settings for RStudio Projects (see @sec-rsprojs) you will be asked whether you want to save your workspace image every time you exit RStudio.\nWe suggest that 99.9% of the time that you don't want do this.\nBy starting with a clean RStudio session each time we come back to our analysis we can be sure to avoid any potential conflicts with things we've done in previous sessions.\n\nThere are, however, some occasions when saving objects you've created in R is useful.\nFor example, let's say you're creating an object that takes hours (even days) of computational time to generate.\nIt would be extremely inconvenient to have to wait all this time each time you come back to your analysis (although we would suggest exporting this to an external file is a better solution).\nIn this case we can save this object as an external `.RData` file which we can load back into RStudio the next time we want to use it.\nTo save an object to an `.RData` file you can use the `save()` function (notice we don't need to use the assignment operator here)\n\n```r\nsave(nameOfObject, file = \"name_of_file.RData\")\n```\n\nor if you want to save all of the objects in your workspace into a single `.RData` file use the `save.image()` function\n\n```r\nsave.image(file = \"name_of_file.RData\")\n```\n\nTo load your `.RData` file back into RStudio use the `load()` function\n\n```r\nload(file = \"name_of_file.RData\")\n```\n\n## R packages {#sec-packages}\n\nThe base installation of R comes with many useful packages as standard. \nThese packages will contain many of the functions you will use on a daily basis.\nHowever, as you start using R for more diverse projects (and as your own use of R evolves) you will find that there comes a time when you will need to extend R's capabilities.\nHappily, many thousands of R users have developed useful code and shared this code as installable packages.\nYou can think of a package as a collection of functions, data and help files collated into a well defined standard structure which you can download and install in R.\nThese packages can be downloaded from a variety of sources but the most popular are [CRAN][cran-packages], [Bioconductor][bioconductor] and [GitHub][github].\nCurrently, CRAN hosts over 15000 packages and is the official repository for user contributed R packages.\nBioconductor provides open source software oriented towards bioinformatics and hosts over 1800 R packages.\nGitHub is a website that hosts git repositories for all sorts of software and projects (not just R).\nOften, cutting edge development versions of R packages are hosted on GitHub so if you need all the new bells and whistles then this may be an option.\nHowever, a potential downside of using the development version of an R package is that it might not be as stable as the version hosted on CRAN (it's in development!) and updating packages won't be automatic.\n\n### Using packages\n\nOnce you have installed a package onto your computer it is not immediately available for you to use.\nTo use a package you first need to load the package by using the `library()` function.\nFor example, to load the `remotes` :package:  package you previously installed\n\n```r\nlibrary(remotes)\n```\n\nThe `library()` function will also load any additional packages required and may print out additional package information.\nIt is important to realize that every time you start a new R session (or restore a previously saved session) you need to load the packages you will be using.\nWe tend to put all our `library()` statements required for our analysis near the top of our R scripts to make them easily accessible and easy to add to as our code develops.\nIf you try to use a function without first loading the relevant R package you will receive an error message that R could not find the function.\nFor example, if you try to use the `install_github()` function without loading the `remotes` :package: package first you will receive the following error\n\n```r\ninstall_github(\"tidyverse/dplyr\")\n\n# Error in install_github(\"tidyverse/dplyr\") :\n#  could not find function \"install_github\"\n```\n\nSometimes it can be useful to use a function without first using the `library()` function.\nIf, for example, you will only be using one or two functions in your script and don't want to load all of the other functions in a package then you can access the function directly by specifying the package name followed by two colons and then the function name\n\n```r\nremotes::install_github(\"tidyverse/dplyr\")\n```\n\nThis is how we were able to use the `install()` and `install_github()` functions [above][Bioconductor packages] without first loading the packages `BiocManager` :package:  and `remotes` :package: .\nMost of the time we recommend using the `library()` function.\n\n### Installing R packages\n#### CRAN packages {#sec-cran_packages}\n\nTo install a package from CRAN you can use the `install.packages()` function.\nFor example if you want to install the `remotes` package enter the following code into the Console window of RStudio (note: you will need a working internet connection to do this)\n\n```r\ninstall.packages(\"remotes\", dependencies = TRUE)\n```\n\nYou may be asked to select a CRAN mirror, just select '0-cloud' or a mirror near to your location.\nThe `dependencies = TRUE` argument ensures that additional packages that are required will also be installed.\n\nIt's good practice to regularly update your previously installed packages to get access to new functionality and bug fixes.\nTo update CRAN packages you can use the `update.packages()` function (you will need a working internet connection for this)\n\n```r\nupdate.packages(ask = FALSE)\n```\n\nThe `ask = FALSE` argument avoids having to confirm every package download which can be a pain if you have many packages installed.\n\n#### Bioconductor packages\n\nTo install packages from Bioconductor the process is a [little different][bioc-install].\nYou first need to install the `BiocManager` :package: package.\nYou only need to do this once unless you subsequently reinstall or upgrade R\n\n```r\ninstall.packages(\"BiocManager\", dependencies = TRUE)\n```\n\nOnce the `BiocManager`:package: package has been installed you can either install all of the 'core' Bioconductor packages with\n\n```r\nBiocManager::install()\n```\n\nor install specific packages such as the `GenomicRanges` :package:  and `edgeR` :package: packages\n\n```r\nBiocManager::install(c(\"GenomicRanges\", \"edgeR\"))\n```\n\nTo update Bioconductor packages just use the `BiocManager::install()` function again\n\n```r\nBiocManager::install(ask = FALSE)\n```\n\nAgain, you can use the `ask = FALSE` argument to avoid having to confirm every package download.\n\n#### GitHub packages\n\nThere are multiple options for installing packages hosted on GitHub.\nPerhaps the most efficient method is to use the `install_github()` function from the `remotes` :package: package (you installed this package previously (@sec-cran_packages)).\nBefore you use the function you will need to know the GitHub username of the repository owner and also the name of the repository.\nFor example, the development version of `dplyr` :package: from Hadley Wickham is hosted on the tidyverse GitHub account and has the repository name 'dplyr' (just search for 'github dplyr').\nTo install this version from GitHub use\n\n```r\nremotes::install_github(\"tidyverse/dplyr\")\n```\n\nThe safest way (that we know of) to update a package installed from GitHub is to just reinstall it using the above command.\n \n```{r}\n#| label: links\n#| child: images/_links.md\n```\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":true,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","from":"markdown+emoji","number-sections":true,"output-file":"02-basics.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en-CA","fig-responsive":true,"quarto-version":"1.5.31","version":"0.6.0","year":2024,"bibliography":["biblio/book.bib","biblio/grateful-refs.bib"],"biblio-style":"apalike","csl":"biblio/ecology.csl","cit-title":"Do what you think is interesting,  \ndo something that you think is fun and worthwhile,  \nbecause otherwise you won’t do it well anyway.\n","cit-author":"Brian W. Kernighan","theme":{"light":"cosmo","dark":["cosmo","css/theme-dark.scss"]},"author-meta":"Julien Martin"},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"paged","error":false,"eval":true,"cache":true,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"lualatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","from":"markdown+emoji","number-sections":true,"output-file":"02-basics.pdf"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"block-headings":false,"version":"0.6.0","year":2024,"bibliography":["biblio/book.bib","biblio/grateful-refs.bib"],"biblio-style":"apalike","csl":"biblio/ecology.csl","lang":"en-CA","cit-title":"Do what you think is interesting,  \ndo something that you think is fun and worthwhile,  \nbecause otherwise you won’t do it well anyway.\n","cit-author":"Brian W. Kernighan","documentclass":"scrreprt","classoption":["chapterprefix=true","headings=big","twoside=semi"],"papersize":"letter","fontsize":"11pt","geometry":["top=2cm","bottom=2cm","left=2cm","right=2cm","footskip=1cm"],"colorlinks":true,"linestretch":1.5,"template-partials":["latex/before-title.tex","latex/before-body.tex"]},"extensions":{"book":{"selfContainedOutput":true}}},"epub":{"identifier":{"display-name":"ePub","target-format":"epub","base-format":"epub"},"execute":{"fig-width":5,"fig-height":4,"fig-format":"png","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"epub","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":false,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"default-image-extension":"png","html-math-method":"mathml","to":"epub","toc":true,"output-file":"02-basics.epub"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"version":"0.6.0","year":2024,"bibliography":["biblio/book.bib","biblio/grateful-refs.bib"],"biblio-style":"apalike","csl":"biblio/ecology.csl","lang":"en-CA","cit-title":"Do what you think is interesting,  \ndo something that you think is fun and worthwhile,  \nbecause otherwise you won’t do it well anyway.\n","cit-author":"Brian W. Kernighan","dev":"svglite","stylesheet":"css/epub.css"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","pdf","epub"]}