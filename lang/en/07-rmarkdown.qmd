# Reproducible reports with R markdown / Quarto {#rmarkdown_r}

```{r, include=FALSE, message = FALSE}
library(knitr)
suppressPackageStartupMessages(library(knitr))
```


::: {.callout-warning}
in the process of being updated to Quarto
screenshot are still with Rmarkdown
links need to be updated too
need to describe YAML code chunk notation
:::

This chapter will introduce you to creating reproducible reports using R markdown / Quarto to encourage best (or better) practice to facilitate open science.
It will first describe what R markdown and Quarto are and why you might want to consider using it, describe how to create an R markdown document using RStudio and then how to convert this document to a html or pdf formatted report.
During this Chapter you will learn about the different components of an R markdown document, how to format text, graphics and tables within the document and finally how to avoid some of the common difficulties using R markdown.

## What is R markdown?

R markdown is a simple and easy to use plain text language used to combine your R code, results from your data analysis (including plots and tables) and written commentary into a single nicely formatted and reproducible document (like a report, publication, thesis chapter or a web page like this one).
 

Technically, R markdown is a combination of three languages, R, Mardown and YAML (yet another markup language).
 Both Markdown and YAML are a type of 'markup' language.
A markup language simply provides a way of creating an easy to read plain text file which can incorporate formatted text, images, headers and links to other documents.
If you're interested you can find more information about markup languages [here][markup].
Actually, you are exposed to a markup language on a daily basis, as most of the internet content you digest every day is underpinned by a markup language called HTML (**H**yper**t**ext **M**arkup **L**anguage).
Anyway, the main point is that R markdown is very easy to learn (much, much easier than HTML) and when used with a good IDE (RStudio or VS Code) it's ridiculously easy to integrate into your workflow to produce feature rich content (so why wouldn't you?!).

## What is Quarto?

Quarto is a multi-language, next generation version of R Markdown from Posit, with many new new features and capabilities and is compatible not only with R but also with other language like Python and Julia.
Like R Markdown, Quarto uses knitr to execute R code, and is therefore able to render most existing Rmd files without modification.
However, it also comes with a plethora of new functionalities.
More importantly, it makes it much easier to create different type of output since the coding is homogenize for specific format without having to rely on different r packages each with there own specificity (*e.g* bookdown, hugodown, blogdown, thesisdown, rticles, xaringan, ...).

In the rest of this chapter, we will talk about Quarto but nearly everything can be done with R markdown.
Quarto uses `.qmd` files while R markdown works with `.Rmd`.
Notes that Quarto is also able to knit and render `.Rmd` files.

## Why use Quarto?

During the previous Chapters we talked a lot about conducting your research in a robust and reproducible manner to facilitate open science.
In a nutshell, open science is about doing all we can to make our data, methods, results and inferences transparent and available to everyone.
Some of the main tenets of open science are described [here][open-sci2] and include:

- Transparency in experimental methodology, observation, collection of data and analytical methods.
- Public availability and re-usability of scientific data
- Public accessibility and transparency of scientific communication
- Using web-based tools to facilitate scientific collaboration

By now all of you will (hopefully) be using R to explore and analyse your interesting data.
As such, you're already well along the road to making your analysis more reproducible, transparent and shareable.
However, perhaps your current workflow looks something like this:

\  

```{r, echo=FALSE, fig.align='center', out.width='90%'}
include_graphics("images/workflow1.png")
```

\  

Your data is imported from your favourite spreadsheet software into R, you write your R code to explore and analyse your data, you save plots as external files, copy tables of analysis output and then manually combine all of this and your written prose into a single MS Word document (maybe a paper or thesis chapter).
Whilst there is nothing particularly wrong with this approach (and it's certainly better than using point and click software to analyse your data) there are some limitations:

- It's not particularly reproducible.
Because this workflow separates your R code from the final document there are multiple opportunities for undocumented decisions to be made (which plots did you use? what analysis did/didn't you include? etc).
   

- It's inefficient.
If you need to go back and change something (create a new plot or update your analysis etc) you will need to create or amend multiple documents increasing the risk of mistakes creeping into your workflow.

- It's difficult to maintain.
If your analysis changes you again need to update multiple files and documents.

- It can be difficult to decide what to share with others.
Do you share all of your code (initial data exploration, model validation etc) or just the code specific to your final document? It's quite a common (and bad!) practice for researchers to maintain two R scripts, one used for the actual analysis and one to share with the final paper or thesis chapter.
This can be both time consuming and confusing and should be avoided.

Perhaps a more efficient and robust workflow would look something like this: 

\  

```{r, echo=FALSE, fig.align='center', out.width='90%'}
include_graphics("images/workflow2.png")
```

\ 

Your data is imported into R as before but this time all of the R code you used to analyse your data, produce your plots and your written text (Introduction, Materials and Methods, Discussion etc) is contained within a single Quarto document which is then used (along with your data) to automatically create your final document.
This is exactly what Quarto allows you to do.

Some of the advantages of using Quarto include: 

- Explicitly links your data with your R code and output creating a fully reproducible workflow.
**ALL** of the R code used to explore, summarise and analyse your data can be included in a single easy to read document.
You can decide what to include in your final document (as you will learn below) but all of your R code can be included in the Quarto document.

- You can create a wide variety of output formats (pdf, html web pages, MS Word and many others) from a single Quarto document which enhances both collaboration and communication.

- Enhances transparency of your research.
Your data and Quarto file can be included with your publication or thesis chapter as supplementary material or hosted on a GitHub repository (see the GitHub [Chapter](#github_r)).

- Increases the efficiency of your workflow.
If you need to modify or extend your current analysis you just need to update your Quarto document and these changes will automatically be included in your final document.

## Get started with Quarto

To use Quarto you will first need to install the `Quarto` software and the `quarto` R package (with its dependencies).
You can find instructions on how to do this for both Windows and Mac OSX operating systems [here](#install-rm).
If you would like to create pdf documents (or MS Word documents) from your Quarto file you will also need to install a version of {{< latex >}} on your computer.
If you've not installed {{< latex >}} before, we recommend that you install [TinyTeX][tinytex].
Again, instructions on how to do this can be found [here](#install-rm).

## Create a Quarto document, `.qmd` {#new_rm}

Right, time to create your first Quarto document.
Within RStudio, click on the menu `File` -> `New File` -> `Quarto...`.
In the pop up window, give the document a 'Title' and enter the 'Author' information (your name) and select HTML as the default output.
We can change all of this later so donâ€™t worry about it for the moment.

\  

```{r, echo=FALSE, fig.align='center', out.width='85%'}
include_graphics("images/new_rm2.png")
```

\  

You will notice that when your new Quarto document is created it includes some example Quarto code.
Normally you would just highlight and delete everything in the document except the information at the top between the `---` delimiters (this is called the YAML header which we will discuss in a bit) and then start writing your own code.
However, just for now we will use this document to practice converting Quarto to both html and pdf formats and check everything is working.
   

\  

```{r, echo=FALSE, fig.align='center', out.width='85%'}
include_graphics("images/new_file_rm.png")
```

\  

Once you've created your Quarto document it's good practice to save this file somewhere convenient.
You can do this by selecting `File` -> `Save` from RStudio menu (or use the keyboard shortcut ctrl + s on Windows or cmd + s on a Mac) and enter an appropriate file name (maybe call it `my_first_rmarkdown`).
Notice the file extension of your new Quarto file is `.qmd`.
 

Now, to convert your `.qmd` file to a HTML document click on the little black triangle next to the `Knit` icon at the top of the source window and select `knit to HTML`  

\  

```{r, echo=FALSE, fig.align='center', out.width='85%'}
include_graphics("images/knit_rm.png")
```

\  

RStudio will now 'knit' (or render) your `.qmd` file into a HTML file.
Notice that there is a new `Quarto` tab in your console window which provides you with information on the rendering process and will also display any errors if something goes wrong.

\  

```{r, echo=FALSE, fig.align='center', out.width='85%'}
include_graphics("images/Rmarkdown_console.png")
```

\  

If everything went smoothly a new HTML file will have been created and saved in the same directory as your `.Rmd` file (ours will be called `my_first_rmarkdown.html`).
To view this document simply double click on the file to open in a browser (like Chrome or Firefox) to display the rendered content.
RStudio will also display a preview of the rendered file in a new window for you to check out (your window might look slightly different if you're using a Windows computer).

\  

```{r, echo=FALSE, fig.align='center', out.width='85%'}
include_graphics("images/html_rendered.png")
```

\  

Great, you've just rendered your first Quarto document.
If you want to knit your `.Rmd` file to a pdf document then all you need to do is choose `knit to PDF` instead of `knit to HTML` when you click on the `knit` icon.
This will create a file called `my_first_rmarkdown.pdf` which you can double click to open.
Give it a go!

You can also knit an `.Rmd` file using the command line in the console rather than by clicking on the knit icon.
To do this, just use the `render()` function from the  `rmarkdown` package as shown below.
Again, you can change the output format using the `output_format=` argument as well as many other options.

\  

```{r, class.source='fold-show', echo=TRUE, eval=FALSE}
library(rmarkdown)

render('my_first_rmarkdown.Rmd', output_format = 'html_document')

# alternatively if you don't want to load the rmarkdown package

rmarkdown::render('my_first_rmarkdown.Rmd', output_format = 'html_document')

# see ?render for more options
```

## Quarto anatomy

OK, now that you can render a Quarto file in RStudio into both HTML and pdf formats let's take a closer look at the different components of a typical Quarto document.
Normally each Quarto document is composed of 3 main components, 1) a YAML header, 2) formatted text and 3) code chunks.

\  

```{r, echo=FALSE, fig.align='left', out.width='85%'}
include_graphics("images/rm_components.png")
```

\  

### YAML header

YAML stands for '**Y**AML **A**inâ€™t **M**arkup **L**anguage' (it's an 'in' [joke][joke]!) and this optional component contains the metadata and options for the entire document such as the author name, date, output format, etc.
The YAML header is surrounded before and after by a `---` on its own line.
In RStudio a minimal YAML header is automatically created for you when you create a new Quarto document as we did [above](#new_rm) but you can change this any time.
A simple YAML header may look something like this:

```yaml
---
title: My first Quarto document
author: Jane Doe
date: March 01, 2020
output: html_document
---
```

In the YAML header above the output format is set to HTML.
If you would like to change the output to pdf format then you can change it from `output: html_document` to  `output: pdf_document` (you can also set more than one output format if you like).
You can also change the default font and font size for the whole document and even include fancy options such as a table of contents and inline references and a bibliography.
If you want to explore the plethora of other options see [here][bookdownr].
Just a note of caution, many of the options you can specify in the YAML header will work with both HTML and pdf formatted documents, but not all.
If you need multiple output formats for your Quarto document check whether your YAML options are compatible between these formats.
Also, indentation in the YAML header has a meaning, so be careful when aligning text.
For example, if you want to include a table of contents you would modify the `output:` field in the YAML header as follows

```yaml
---
title: My first Quarto document
author: Jane Doe
date: March 01, 2020
output:
  html_document:
    toc: yes
---
```

### Formatted text

As mentioned above, one of the great things about Quarto is that you don't need to rely on your word processor to bring your R code, analysis and writing together.
Quarto is able to render (almost) all of the text formatting that you are likely to need such as italics, bold, strike-through, super and subscript as well as bulleted and numbered lists, headers and footers, images, links to other documents or web pages and also equations.
However, in contrast to your familiar *What-You-See-Is-What-You-Get* ([WYSIWYG][WYSIWYG]) word processing software you don't see the final formatted text in your Quarto document (as you would in MS Word), rather you need to 'markup' the formatting in your text ready to be rendered in your output document.
At first, this might seem like a right pain in the proverbial but it's actually very easy to do and also has many [advantages][markup-adv] (do you find yourself spending more time on making your text look pretty in MS Word rather than writing good content?!).
 

Here is an example of marking up text formatting in an Quarto document 

```md
#### Benthic Biodiversity experiment
These data were obtained from a mesocosm experiment which aimed to examine the effect 
of benthic polychaete (*Nereis diversicolor*) biomass on sediment nutrient 
(NH~4~, NO~3~ and PO~3~) release.
At the start of the experiment 15 replicate mesocosms 
were filled with 20 cm^2^ of **homogenised** marine sediment and assigned to one of five 
polychaete biomass treatments (0, 0.5, 1, 1.5, 2 g per mesocosm).
```

which would look like this in the final rendered document (can you spot the markups?)

>#### Benthic Biodiversity experiment {.unlisted .unnumbered}

>These data were obtained from a mesocosm experiment which aimed to examine the effect of benthic polychaete (*Nereis diversicolor*) biomass on sediment nutrient (NH~4~, NO~3~ and PO~3~) release.
At the start of the experiment replicate mesocosms were filled with 20 cm^2^ of **homogenised** marine sediment and assigned to one of five polychaete biomass treatments (0, 0.5, 1, 1.5, 2 g per mesocosm).

#### Emphasis {-}

Some of the most common Quarto syntax for providing emphasis and formatting text is given below.

\  

|     Goal       |    Quarto       |     output        |
|:--------------:|:-------------------:|:-----------------:|
|  bold text     |   `**mytext**`   |   **mytext**   |
|  italic text   |   `*mytext*`   |   *mytext*   |
|  strikethrough | `~~mytext~~` | ~~mytext~~ |
|  superscript   |   `mytext^2^`  |   mytext^2^  |
|  subscript     |   `mytext~2~`    |   mytext~2~    |

\  

Interestingly there is no underline Quarto syntax by default.
We think this is because bold and italics are used to emphasise content (a semantic meaning) whereas an underline is considered a stylistic element (there may well be other [reasons][underline]).
If you really want to underline text you can use `<span style="text-decoration:underline">underline this text</span>` for HTML output or `$\text{\underline{This sentence underlined using \LaTeX}}$` for pdf output.
We just avoid underlining!

#### White space and line breaks {-}

One of the things that can be confusing for new users of Quarto is the use of spaces and carriage returns (the enter key on your keyboard).
In Quarto multiple spaces within the text are generally ignored as are carriage returns.
For example this Quarto text

```md
These      data were      obtained from a
mesocosm experiment which    aimed to examine the
effect
of          benthic polychaete (*Nereis diversicolor*) biomass.
```

will be rendered as 

>These      data were      obtained from a
>mesocosm experiment which    aimed to examine the
>effect
>of          benthic polychaete (*Nereis diversicolor*) biomass.


This is generally a good thing (no more random multiple spaces in your text).
If you want your text to start on a new line then you can simply add two blank spaces at the end of the preceding line 


>These      data were      obtained from a  
>mesocosm experiment which    aimed to examine the    
>effect          benthic polychaete (*Nereis diversicolor*) biomass.
    


If you really want multiple spaces within your text then you can use the **N**on **b**reaking **sp**ace tag `&nbsp;`

```
These &nbsp; &nbsp; &nbsp; data were &nbsp; &nbsp; &nbsp; &nbsp; obtained from a  
mesocosm experiment which &nbsp; &nbsp; aimed to examine the    
effect &nbsp; &nbsp; &nbsp; &nbsp; benthic polychaete (*Nereis diversicolor*) biomass.
```
 

>These &nbsp; &nbsp; &nbsp; data were &nbsp; &nbsp; &nbsp; &nbsp; obtained from a  
>mesocosm experiment which &nbsp; &nbsp; aimed to examine the    
>effect &nbsp; &nbsp; &nbsp; &nbsp; benthic polychaete (*Nereis diversicolor*) biomass.

#### Headings {-}

You can add headings and subheadings to your Quarto document by using the `#` symbol at the beginning of the line.
You can decrease the size of the headings by simply adding more `#` symbols.
For example 

```md
# Benthic Biodiversity experiment
## Benthic Biodiversity experiment
### Benthic Biodiversity experiment
#### Benthic Biodiversity experiment
##### Benthic Biodiversity experiment
###### Benthic Biodiversity experiment
```

results in headings in decreasing size order

```{asis, echo=TRUE, eval=knitr::is_html_output()}
># Benthic Biodiversity experiment {.unlisted .unnumbered}
>## Benthic Biodiversity experiment {.unlisted .unnumbered}
>### Benthic Biodiversity experiment {.unlisted .unnumbered}
>#### Benthic Biodiversity experiment {.unlisted .unnumbered}
>##### Benthic Biodiversity experiment {.unlisted .unnumbered}
>###### Benthic Biodiversity experiment {.unlisted .unnumbered}
```

#### Comments {-}

As you can see above the meaning of the `#` symbol is different when formatting text in an Quarto document compared to a standard R script (which is used to included a comment - remember?!).
You can, however, use a `#` symbol to comment code inside a [code chunk](#code_chunks) as usual (more about this in a bit).
If you want to include a comment in your Quarto document outside a code chunk which won't be included in the final rendered document then enclose your comment between `<!--` and `-->`.

```md
<!--
this is an example of how to format a comment using Quarto.
-->
```

#### Lists {-}

If you want to create a bullet point list of text you can format an unordered list with sub items.
Notice that the sub-items need to be indented.
 

```markdown
- item 1
- item 2
   + sub-item 2
   + sub-item 3
- item 3
- item 4
```

\  

>- item 1
>- item 2
>   + sub-item 2
>   + sub-item 3
>- item 3
>- item 4

\  

If you need an ordered list 

```md

1.
item 1
2.
item 2
     + sub-item 2
     + sub-item 3
3.
item 3
4.
item 4
```

\  

>1.
item 1
>2.
item 2
>     + sub-item 2
>     + sub-item 3
>3.
item 3
>4.
item 4

#### Images {-}

Another useful feature is the ability to embed images and links to web pages (or other documents) into your Quarto document.
You can include images into your Quarto document in a number of different ways.
Perhaps the simplest method is to use

```markdown
![Cute grey kitten](images/Cute_grey_kitten.jpg)
```

resulting in:

![Cute grey kitten](images/Cute_grey_kitten.jpg)

The code above will only work if the image file (`Cute_grey_kitten.jpg`) is in the right place relative to where you saved your `.Rmd` file.
In the example above the image file is in a sub directory (folder) called `images` in the directory where we saved our `my_first_rmarkdown.Rmd` file.
You can embed images saved in many different file types but perhaps the most common are `.jpg` and `.png`.

We think a more flexible way of including images in your document is to use the `include_graphics()` function from the `knitr` package as this gives finer control over the alignment and image size (it also works more or less the same with both HTML and pdf output formats).
However, to do this you will need to include this R code in a ['code chunk'](#code_chunks) which we haven't covered yet.
Despite this we'll leave the code here for later reference.
This code center aligns the image and scales it to 50% of it's original size.
See `?include_graphics` for more options.

````md
`r ''````{r, echo=FALSE, fig.align='center', out.width='50%'}
library(knitr)
include_graphics("images/Cute_grey_kitten.jpg")
```
````

```{r, echo=FALSE, fig.align='center', out.width='50%'}
include_graphics("images/Cute_grey_kitten.jpg")
```

#### Links {-}

In addition to images you can also include links to webpages or other links in your document.
Use the following syntax to create a clickable link to an existing webpage.
The link text goes between the square brackets and the URL for the webpage between the round brackets immediately after.
 

```markdown
You can include a text for your clickable [link](https://www.worldwildlife.org)
```

which gives you: 

>You can include a text for your clickable [link](https://www.worldwildlife.org)

### Code chunks {#code_chunks}

Now to the heart of the matter.
To include R code into your Quarto document you simply place your code into a 'code chunk'.
All code chunks start and end with three backticks ```` ``` ````.
Note, these are also known as 'grave accents' or 'back quotes' and are not the same as an apostrophe! On most keyboards you can [find the backtick][backtick] on the same key as tilde (~).

````md
`r ''````{r}
Any valid R code goes here
```
````

You can insert a code chunk by either typing the chunk delimiters ```` ```{r} ```` and ```` ``` ```` manually or use your IDE option (RStudio toolbar (the Insert button) or by clicking on the menu `Code` -> `Insert Chunk`.
IN VS Code you can use code snippets) Perhaps an even better way is to get familiar with the keyboard shortcuts for you IDE.

There are a many things you can do with code chunks: you can produce text output from your analysis, create tables and figures and insert images amongst other things.
Within the code chunk you can place rules and arguments between the curly brackets `{}` that give you control over how your code is interpreted and output is rendered.
These are known as chunk options.
The only mandatory chunk option is the first argument which specifies which language you're using (`r` in our case but [other][engines] languages are supported).
Note, chunk options can be written in two ways:

1.
either all of your chunk options must be written between the curly brackets on one line with no line breaks
2.
or they can be written using a YAML notation within the code chunk using #| notation at the beginning of the line.
 

You can also specify an optional code chunk name (or label)  which can be useful when trying to debug problems and when performing advanced document rendering.
In the following block we name the code chunk `summary-stats`, create a dataframe (`dataf`) with two variables `x` and `y` and then use the `summary()` function to display some summary statistics .
When we run the code chunk both the R code and the resulting output are displayed in the final document.

````md
`r ''````{r, summary-stats, echo = TRUE}
x <- 1:10    # create an x variable
y <- 10:1    # create a y variable
dataf <- data.frame(x = x, y = y)

summary(dataf)
```
````
````md
`r ''````{r}
#| label: summary-stats
#| echo: true
x <- 1:10    # create an x variable
y <- 10:1    # create a y variable
dataf <- data.frame(x = x, y = y)

summary(dataf)
```
````

```{r, summary-stats, class.source='fold-show' }
x <- 1:10    # create an x variable
y <- 10:1    # create a y variable
dataf <- data.frame(x = x, y = y)

summary(dataf)
```

When using chunk names make sure that you don't have duplicate chunk names in your Quarto document and avoid spaces and full stops as this will cause problems when you come to knit your document (We use a `-` to separate words in our chunk names).

If we wanted to only display the output of our R code (just the summary statistics for example) and not the code itself in our final document we can use the chunk option `echo=FALSE`

````md
`r ''````{r, summary-stats, echo=FALSE}
x <- 1:10    # create an x variable
y <- 10:1    # create a y variable
dataf <- data.frame(x = x, y = y)
summary(dataf)
```
````

```{r, summary-stats2, echo=FALSE}
x <- 1:10    # create an x variable
y <- 10:1    # create a y variable
dataf <- data.frame(x = x, y = y)
summary(dataf)
```

To display the R code but not the output use the `results='hide'` chunk option.

````md
`r ''````{r}
#| label: summary-stats
#| results: 'hide'
x <- 1:10    # create an x variable
y <- 10:1    # create a y variable
dataf <- data.frame(x = x, y = y)
summary(dataf)
```
````

```{r, summary-stats3, results='hide', class.source='fold-show'}
x <- 1:10    # create an x variable
y <- 10:1    # create a y variable
dataf <- data.frame(x = x, y = y)
summary(dataf)
```

Sometimes you may want to execute a code chunk without showing any output at all.
You can suppress the entire output using the chunk option `include=FALSE`.

````md
`r ''````{r, summary-stats, include=FALSE}
x <- 1:10    # create an x variable
y <- 10:1    # create a y variable
dataf <- data.frame(x = x, y = y)
summary(dataf)
```
````

```{r, summary-stats4, include=FALSE, class.source='fold-show'}
x <- 1:10    # create an x variable
y <- 10:1    # create a y variable
dataf <- data.frame(x = x, y = y)
summary(dataf)
```

There are a large number of chunk options documented [here][chunk-opt] with a more condensed version [here][rmd-ref].
Perhaps the most commonly used are summarised below with the default values shown.
 

|     Chunk option       |    default value       |     Function        |
|:-----------------|:-----------------------|:--------------------|
|  echo     |   `echo=TRUE`   |   If FALSE, will not display the code in the final document   |
|  results   |   `results='markup'`   |   If 'hide', will not display the codeâ€™s results in the final document.
If 'hold', will delay displaying all output pieces until the end of the chunk.
If 'asis', will pass through results without reformatting them.
  |
|  include | `include=TRUE` | If FALSE, will run the chunk but not include the chunk in the final document.
|
|  eval   |   `eval=TRUE`  |   If FALSE, will not run the code in the code chunk.
 |
|  message     |   `message=TRUE`    |   If FALSE, will not display any messages generated by the code.
   |
|  warning     |   `warning=TRUE`    |   If FALSE, will not display any warning messages generated by the code.
   |

### Adding figures

By default, figures produced by R code will be placed immediately after the code chunk they were generated from.
For example:

````md
`r ''````{r, simple-plot}
x <- 1:10    # create an x variable
y <- 10:1    # create a y variable
dataf <- data.frame(x = x, y = y)
plot(dataf$x, dataf$y, xlab = "x axis", ylab = "y axis")
```
````

```{r, simple-plot, class.source='fold-show'}
x <- 1:10    # create an x variable
y <- 10:1    # create a y variable
dataf <- data.frame(x = x, y = y)
plot(dataf$x, dataf$y, xlab = "x axis", ylab = "y axis")
```

If you want to change the plot dimensions in the final document you can use the `fig.width=` and `fig.height=` chunk options (in inches!).
You can also change the alignment of the figure using the `fig.align=` chunk option.

````md
`r ''````{r, simple-plot, fig.width=4, fig.height=3, fig.align='center'}
x <- 1:10    # create an x variable
y <- 10:1    # create a y variable
dataf <- data.frame(x = x, y = y)
plot(dataf$x, dataf$y, xlab = "x axis", ylab = "y axis")
```
````

```{r, simple-plot2, class.source='fold-show', fig.width=4, fig.height=3, fig.align='center'}
x <- 1:10    # create an x variable
y <- 10:1    # create a y variable
dataf <- data.frame(x = x, y = y)
plot(dataf$x, dataf$y, xlab = "x axis", ylab = "y axis")
```

\  

You can add a figure caption using the `fig.cap=` option.

````md
`r ''````{r, simple-plot-cap, fig.cap="A simple plot", fig.align='center'}
x <- 1:10    # create an x variable
y <- 10:1    # create a y variable
dataf <- data.frame(x = x, y = y)
plot(dataf$x, dataf$y, xlab = "x axis", ylab = "y axis")
```
````

```{r, simple-plot-cap, class.source='fold-show', fig.cap="A simple plot", fig.align='center'}
x <- 1:10    # create an x variable
y <- 10:1    # create a y variable
dataf <- data.frame(x = x, y = y)
plot(dataf$x, dataf$y, xlab = "x axis", ylab = "y axis")
```

\  

If you want to suppress the figure in the final document use the `fig.show='hide'` option.

````md
`r ''````{r, simple-plot, fig.show='hide'}
x <- 1:10    # create an x variable
y <- 10:1    # create a y variable
dataf <- data.frame(x = x, y = y)
plot(dataf$x, dataf$y, xlab = "x axis", ylab = "y axis")
```
````

```{r, simple-plot3, class.source='fold-show', fig.show='hide'}
x <- 1:10    # create an x variable
y <- 10:1    # create a y variable
dataf <- data.frame(x = x, y = y)
plot(dataf$x, dataf$y, xlab = "x axis", ylab = "y axis")
```

\  

If you're using a package like [`ggplot2`][ggplot] to create your plots then don't forget you will need to make the package available with the `library()` function in the code chunk (or in a preceding code chunk).

````md
`r ''````{r}
#| label: simple-ggplot
x <- 1:10    # create an x variable
y <- 10:1    # create a y variable
dataf <- data.frame(x = x, y = y)

library(ggplot2)
ggplot(dataf, aes(x = x, y = y)) +
  geom_point()
```
````

```{r, simple-ggplot, class.source='fold-show'}
x <- 1:10    # create an x variable
y <- 10:1    # create a y variable
dataf <- data.frame(x = x, y = y)

library(ggplot2)
ggplot(dataf, aes(x = x, y = y)) +
  geom_point()
```

\  

Again, there are a large number of chunk options specific to producing plots and figures.
See [here][rmd-ref] for more details.

### Adding tables

Quarto can print the contents of a dataframe as a table (or any other tabular object such as a summary of model output) by including the name of the dataframe in a code chunk.
For example, to create a table of the first 10 rows of the inbuilt dataset `iris`

````md
`r ''````{r, ugly-table}
iris[1:10,]
```
````

```{r, ugly-table, echo=FALSE, warning=FALSE}

iris[1:10,]

```

But how ugly is that! You can create slightly nicer looking tables using native markdown syntax (this doesn't need to be in a code chunk).

\  
```markdown
    |     x      |    y       |
    |:----------:|:----------:|
    |  1         |   5        |   
    |  2         |   4        |
    |  3         |   3        |
    |  4         |   2        |
    |  5         |   1        |
```

\  

|     x      |    y       |
|:----------:|:----------:|
|  1         |   5        |   
|  2         |   4        |
|  3         |   3        |
|  4         |   2        |
|  5         |   1        |

\  

The `:-------:` lets Quarto know that the line above should be treated as a header and the lines below as the body of the table.
Alignment within the table is set by the position of the `:`.
To center align use `:------:`, to left align `:------` and right align `------:`.
Whilst it can be fun(!) to create tables with raw markup it's only  practical for very small and simple tables.
 

The easiest way we know to include tables in an Quarto document is by using the `kable()` function from the `knitr` package (this should have already been installed when you installed the `rmarkdown` package).
The `kable()` function can create tables for HTML, PDF and Word outputs.

To create a table of the first 10 rows of the `iris` dataframe using the `kable()` function simply write your code block as

````md
`r ''````{r, kable-table}
library(knitr)
kable(iris[1:10,])
```
````

```{r, kable-table-html, echo=FALSE, eval=knitr::is_html_output(), warning=FALSE}
library(knitr)
kable(iris[1:10,])
```

```{r, kable-table-latex, echo=FALSE, eval=knitr::is_latex_output(), warning=FALSE}
library(knitr)
kable(iris[1:10,], "latex", booktabs = T)
```

The `kable()` function offers plenty of options to change the formatting of the table.
For example, if we want to round numeric values to one decimal place use the `digits =` argument.
To center justify the table contents use `align = 'c'` and to provide custom column headings use the `col.names =` argument.
See `?knitr::kable` for more information.

````md
`r ''````{r, kable-table2}
kable(iris[1:10,], digits = 0, align = 'c', 
       col.names = c('sepal length', 'sepal width', 
       'petal length', 'petal width', 'species'))
```
````

```{r, kable-table2-html, eval=knitr::is_html_output(), echo=FALSE, warning=FALSE}
library(knitr)
kable(iris[1:10,], digits=0, align = 'c', col.names = c('sepal length', 'sepal width', 'petal length', 'petal width', 'species'))
```

```{r, kable-table2-latex, echo=FALSE, eval=knitr::is_latex_output(), warning=FALSE}
library(knitr)
kable(iris[1:10,], "latex", booktabs = T, digits=0, align = 'c', col.names = c('sepal length', 'sepal width', 'petal length', 'petal width', 'species'))
```
\  

You can further enhance the look of your `kable` tables using the `kableExtra` package (don't forget to install the package first!).
See [here][kableExtra] :package: for more details and a helpful tutorial.

````md
`r ''````{r, kableExtra-table}
library(kableExtra)
kable(iris[1:10,]) %>%
    kable_styling(bootstrap_options = "striped", font_size = 10)
```
````

```{r, kableExtra-table-html, echo=FALSE, eval=knitr::is_html_output(), warning=FALSE}
library(kableExtra)
kable(iris[1:10,]) %>%
  kable_styling(bootstrap_options = "striped", font_size = 10)
```

```{r, kableExtra-table-latex, echo=FALSE, eval=knitr::is_latex_output(), warning=FALSE}
library(kableExtra)
kable(iris[1:10,],"latex", booktabs = T) %>%
  kable_styling(bootstrap_options = "striped", font_size = 10, position = "center")
```

\  

If you want even more control and customisation options for your tables take a look at the [`gt`][gt] package.
`gt`stands for grammar of tables and is based on similar principle for tables that are used for plots in ggplot.

### Inline R code

Up till now we've been writing and executing our R code in code chunks.
Another great reason to use Quarto is that we can also include our R code directly within our text.
This is known as 'inline code'.
To include your code in your Quarto text you simply write `` `r knitr::inline_expr("write your code here")` ``.
This can come in really useful when you want to include summary statistics within your text.
For example, we could describe the `iris` dataset as follows:  

```
Morphological characteristics (variable names: 
`r knitr::inline_expr("names(iris)[1:4]")`) were measured from 
`r knitr::inline_expr("nrow(iris)")` *Iris sp.* plants from 
`r knitr::inline_expr("length(levels(iris$Species))")` different species.
The mean Sepal length was
`r knitr::inline_expr("round(mean(iris$Sepal.Length), digits = 2)")` mm.
  
```

which will be rendered as  

>Morphological characteristics (variable names: `r names(iris)[1:4]`) were
>measured from `r nrow(iris)` *iris* plants from `r length(levels(iris$Species))`
>different species.
The mean Sepal length was 
>`r round(mean(iris$Sepal.Length), digits = 2)` mm.

The great thing about including inline R code in your text is that these values will automatically be updated if your data changes.

## Some tips and tricks {#tips_tricks}

**Problem :** 

When rendering my Quarto document to pdf my code runs off the edge of the page.

**Solution:**

Add a global_options argument at the start of your .Rmd file in a code chunk:

````md
`r ''````{r, global_options, include=FALSE}
knitr::opts_chunk$set(message=FALSE, tidy.opts=list(width.cutoff=60), tidy=TRUE) 
```
````

This code chunk wonâ€™t be displayed in the final document due to the `include = FALSE` argument and you should place the code chunk immediately after the YAML header to affect everything below that.

`tidy.opts = list(width.cutoff = 60), tidy=TRUE` defines the margin cutoff point and wraps text to the next line.
Play around with this value to get it right (60-80 should be OK for most documents).

\  

**Problem:** 

When I load a package in my Quarto document my rendered output contains all of the startup messages and/or warnings.

**Solution:**

You can load all of your packages at the start of your Quarto document in a code chunk along with setting your global options.

````md
```{r, global_options, include=FALSE}`r ''`
knitr::opts_chunk$set(message=FALSE, warning=FALSE, tidy.opts=list(width.cutoff=60)) 
suppressPackageStartupMessages(library(ggplot2))
```
````

The `message=FALSE` and `warning=FALSE` arguments suppress messages and warnings.
The `suppressPackageStartupMessages(library(ggplot2))` will load the `ggplot2` package but suppress startup messages.

\  

**Problem:**

When rendering my Quarto document to pdf my tables and/or figures are split over two pages.

**Solution:**

Add a page break using the {{< latex >}} `\pagebreak` notation before your offending table or figure

\  

**Problem:**

The code in my rendered document looks ugly!

**Solution:**

Add the argument `tidy=TRUE` to your global arguments.
Sometimes, however, this can cause problems especially with correct code indentation.

````md
`r ''````{r, global_options, include=FALSE}
knitr::opts_chunk$set(message=FALSE, tidy.opts=list(width.cutoff=60), tidy=TRUE) 
```
````

## Further Information

Although we've covered more than enough to get you quite far using Quarto, as with most things R related, we've really only had time to scratch the surface.
Happily, there's a wealth of information available to you should you need to expand your knowledge and experience.
A good place to start is the excellent quarto website [here](https://quarto.org/).

Another useful and concise Quarto reference guide can be found [here][rmd-ref]

A quick and easy R Markdown [cheatsheet][rmd-cheat]

```{r links, child="_links.md"}
```
  

