{"title":"Introduction à R","markdown":{"headingText":"Introduction à R","containsRefs":false,"markdown":"\nAprès avoir complété cet exercice de laboratoire, vous pourrez :\n\n- Ouvrir des fichiers de données R déjà existants\n- Importer des ensembles de données rectangulaires\n- Exporter des donnes de R vers un fichier texte\n- Vérifier si les données ont été correctement importées\n- Examiner la distribution des observations d’une variable\n- Examiner visuellement et tester la normalité d’une variable\n- Calculer des statistiques descriptives d’une variable\n- Effectuer des transformations de données\n\n## Paquets et données requises pour le labo {#set-intro}\n\nCe laboratoire nécessite:\n\n* les paquets R:\n  * questionr\n  * ggplot2\n* les fichiers de données\n  * ErablesGatineau.csv\n  * sturgeon.csv\n\n## Premier pas avec R\n\nUne fois R et RStudio installés sur votre machine, nous n'allons pas lancer R mais plutôt RStudio.\n\nRStudio n'est pas à proprement parler une interface graphique qui permettrait d'utiliser R de manière \"classique\" via la souris, des menus et des boîtes de dialogue. Il s'agit plutôt de ce qu'on appelle un *Environnement de développement intégré* (IDE) qui facilite l'utilisation de R et le développement de scripts.\n\n### La console\n\n#### L'invite de commandes\n\nAu premier lancement de RStudio, l'écran principal est découpé en trois grandes zones :\n\n<!-- ![Interface de Rstudio](images/screenshots/rstudio_start.png) -->\n\n\n```{r }\n#| echo: false\n#| fig-cap: Interface de RStudio\n#| out-width: 100%\nknitr::include_graphics(\"images/screenshots/rstudio_start.png\")\n```\n\n\nLa zone de gauche se nomme *Console*. À son démarrage, RStudio a lancé une nouvelle session de R et c'est dans cette fenêtre que nous allons pouvoir interagir avec lui.\n\nLa *Console* doit normalement afficher un texte de bienvenue ressemblant à ceci :\n\n```\nR version 4.0.2 (2020-06-22) -- \"Taking Off Again\"\nCopyright (C) 2020 The R Foundation for Statistical Computing\nPlatform: x86_64-pc-linux-gnu (64-bit)\n\nR est un logiciel libre livré sans AUCUNE GARANTIE.\nVous pouvez le redistribuer sous certaines conditions.\nTapez 'license()' ou 'licence()' pour plus de détails.\n\nR est un projet collaboratif avec de nombreux contributeurs.\nTapez 'contributors()' pour plus d'information et\n'citation()' pour la façon de le citer dans les publications.\n\nTapez 'demo()' pour des démonstrations, 'help()' pour l'aide\nen ligne ou 'help.start()' pour obtenir l'aide au format HTML.\nTapez 'q()' pour quitter R.\n```\n\nsuivi d'une ligne commençant par le caractère `>` et sur laquelle devrait se trouver votre curseur. Cette ligne est appelée l'*invite de commande* (ou *prompt* en anglais). Elle signifie que R est disponible et en attente de votre prochaine commande.\n\nNous pouvons tout de suite lui fournir une première commande, en saisissant le texte suivant puis en appuyant sur `Entrée` :\n\n```{r}\n2 + 2\n```\n\nR nous répond immédiatement, et nous pouvons constater avec soulagement qu'il sait faire des additions à un chiffre^[On peut ignorer pour le moment la présence du `[1]` en début de ligne.]. On peut donc continuer avec d'autres opérations :\n\n\n```{r}\n5 - 7\n4 * 12\n-10 / 3\n5^2\n```\n\nCette dernière opération utilise le symbole `^` qui représente l'opération *puissance*. `5^2` signifie donc \"5 au carré\", soit 25.\n\n#### Précisions concernant la saisie des commandes\n\nLorsqu'on saisit une commande, les espaces autour des opérateurs n'ont pas d'importance. Les trois commandes suivantes sont donc équivalentes, mais on privilégie en général la deuxième pour des raisons de lisibilité du code.\n\n```{r}\n#| eval: false\n10+2\n10 + 2\n10       +       2\n```\n\n\nQuand vous êtes dans la console, vous pouvez utiliser les flèches vers le haut et vers le bas pour naviguer dans l'historique des commandes que vous avez tapées précédemment. Vous pouvez à tout moment modifier la commande affichée, et l'exécuter en appuyant sur `Entrée`.\n\nEnfin, il peut arriver qu'on saisisse une commande de manière incomplète : oubli d'une parenthèse, faute de frappe, etc. Dans ce cas, R remplace l'invite de commande habituel par un signe `+` :\n\n```{r}\n#| eval: false\n4 *\n+\n```\n\nCela signifie qu'il \"attend la suite\". On peut alors soit compléter la commande sur cette nouvelle ligne et appuyer sur `Entrée`, soit, si on est perdu, tout annuler et revenir à l'invite de commandes normal en appuyant sur `Esc` ou `Échap`.\n\n\n\n### Objets\n\n#### Objets simples\n\nFaire des calculs c'est bien, mais il serait intéressant de pouvoir stocker un résultat quelque part pour pouvoir le réutiliser ultérieurement sans avoir à faire du copier/coller.\n\nPour conserver le résultat d'une opération, on peut le stocker dans un *objet* à l'aide de l'opérateur d'assignation `<-`. Cette \"flèche\" stocke ce qu'il y a à sa droite dans un objet dont le nom est indiqué à sa gauche.\n\nPrenons tout de suite un exemple :\n\n```{r}\nx <- 2\n```\n\nCette commande peut se lire *\"prend la valeur 2 et mets la dans un objet qui s'appelle `x`\"*.\n\nSi on exécute une commande comportant juste le nom d'un objet, R affiche son contenu :\n\n```{r}\nx\n```\n\nOn voit donc que notre objet `x` contient bien la valeur 2.\n\nOn peut évidemment réutiliser cet objet dans d'autres opérations. R le remplacera alors par sa valeur :\n\n```{r}\nx + 4\n```\n\nOn peut créer autant d'objets qu'on le souhaite.\n\n```{r}\nx <- 2\ny <- 5\nresultat <- x + y\nresultat\n```\n\n::: {.callout-important}\nLes noms d'objets peuvent contenir des lettres, des chiffres, les symboles `.` et `_`. Ils ne peuvent pas commencer par un chiffre. Attention, R fait la différence entre minuscules et majuscules dans les noms d'objets, ce qui signifie que `x` et `X` seront deux objets différents, tout comme `resultat` et `Resultat`.\n\nDe manière générale, il est préférable d'éviter les majuscules (pour les risques d'erreur) et les caractères accentués (pour des questions d'encodage) dans les noms d'objets.\n\nDe même, il faut essayer de trouver un équilibre entre clarté du nom (comprendre à quoi sert l'objet, ce qu'il contient) et sa longueur. Par exemple, on préfèrera comme nom d'objet `taille_conj1` à `taille_du_conjoint_numero_1` (trop long) ou à `t1` (pas assez explicite).\n:::\n\nQuand on assigne une nouvelle valeur à un objet déjà existant, la valeur précédente est perdue. Les objets n'ont pas de mémoire.\n\n```{r}\nx <- 2\nx <- 5\nx\n```\n\nDe la même manière, assigner un objet à un autre ne crée pas de \"lien\" entre les deux. Cela copie juste la valeur de l'objet de droite dans celui de gauche :\n\n```{r}\nx <- 1\ny <- 3\nx <- y\nx\n## Si on modifie y, cela ne modifie pas x\ny <- 4\nx\n```\n\nOn le verra, les objets peuvent contenir tout un tas d'informations. Jusqu'ici on n'a stocké que des nombres, mais ils peuvent aussi contenir des chaînes de caractères (du texte), qu'on délimite avec des guillemets simples ou doubles (`'` ou `\"`) :\n\n```{r}\nchien <- \"Chihuahua\"\nchien\n```\n\n\n\n### Vecteurs\n\nImaginons maintenant qu'on a demandé la taille en centimètres de 5 personnes et qu'on souhaite calculer leur taille moyenne. On pourrait créer autant d'objets que de tailles et faire l'opération mathématique qui va bien :\n\n```{r}\ntaille1 <- 156\ntaille2 <- 164\ntaille3 <- 197\ntaille4 <- 147\ntaille5 <- 173\n(taille1 + taille2 + taille3 + taille4 + taille5) / 5\n```\n\nCette manière de faire n'est évidemment pas pratique du tout. On va plutôt stocker l'ensemble de nos tailles dans un seul objet, de type *vecteur*, avec la syntaxe suivante :\n\n```{r}\ntailles <- c(156, 164, 197, 147, 173)\n```\n\nSi on affiche le contenu de cet objet, on voit qu'il contient bien l'ensemble des tailles saisies :\n\n```{r}\ntailles\n```\n\nUn *vecteur* dans R est un objet qui peut contenir plusieurs informations du même type, potentiellement en très grand nombre.\n\nL'avantage d'un vecteur est que lorsqu'on lui applique une opération, celle-ci s'applique à toutes les valeurs qu'il contient. Ainsi, si on veut la taille en mètres plutôt qu'en centimètres, on peut faire :\n\n```{r}\ntailles_m <- tailles / 100\ntailles_m\n```\n\nCela fonctionne pour toutes les opérations de base :\n\n```{r}\ntailles + 10\ntailles^2\n```\n\nImaginons maintenant qu'on a aussi demandé aux cinq mêmes personnes leur poids en kilos. On peut alors créer un deuxième vecteur :\n\n```{r}\npoids <- c(45, 59, 110, 44, 88)\n```\n\nOn peut alors effectuer des calculs utilisant nos deux vecteurs `tailles` et `poids`. On peut par exemple calculer l'indice de masse corporelle (IMC) de chacun de nos enquêtés en divisant leur poids en kilo par leur taille en mètre au carré :\n\n```{r}\nimc <- poids / (tailles / 100) ^ 2\nimc\n```\n\nUn vecteur peut contenir des nombres, mais il peut aussi contenir du texte. Imaginons qu'on a demandé aux 5 mêmes personnes leur niveau de diplôme : on peut regrouper l'information dans un vecteur de *chaînes de caractères*. Une chaîne de caractère contient du texte libre, délimité par des guillemets simples ou doubles :\n\n```{r}\ndiplome <- c(\"PHD\", \"Bac\", \"MSc\", \"MSc\", \"Bac\")\ndiplome\n```\n\nL'opérateur `:`, lui, permet de générer rapidement un vecteur comprenant tous les nombres entre deux valeurs, opération assez courante sous R :\n\n```{r}\nx <- 1:10\nx\n```\n\nEnfin, notons qu'on peut accéder à un élément particulier d'un vecteur en faisant suivre le nom du vecteur de crochets contenant le numéro de l'élément désiré. Par exemple :\n\n```{r}\ndiplome[2]\n```\n\nCette opération, qui utilise l'opérateur `[]`, permet donc la sélection d'éléments d'un vecteur.\n\nDernière remarque, si on affiche dans la console un vecteur avec beaucoup d'éléments, ceux-ci seront répartis sur plusieurs lignes. Par exemple, si on a un vecteur de 50 nombres on peut obtenir quelque chose comme :\n\n     [1] 294 425 339 914 114 896 716 648 915 587 181 926 489\n    [14] 848 583 182 662 888 417 133 146 322 400 698 506 944\n    [27] 237 324 333 443 487 658 793 288 897 588 697 439 697\n    [40] 914 694 126 969 744 927 337 439 226 704 635\n\nOn remarque que R ajoute systématiquement un nombre entre crochets au début de chaque ligne : il s'agit en fait de la position du premier élément de la ligne dans le vecteur. Ainsi, le 848 de la deuxième ligne est le 14e élément du vecteur, le 914 de la dernière ligne est le 40e, etc.\n\nCeci explique le `[1]` qu'on obtient quand on affiche un simple nombre et permet de constater que pour R, un nombre est un vecteur à un seul élément :\n\n     [1] 4\n\n\n\n### Fonctions\n\n#### Principe\n\nNous savons désormais effectuer des opérations arithmétiques de base sur des nombres et des vecteurs, et stocker des valeurs dans des objets pour pouvoir les réutiliser plus tard.\n\nPour aller plus loin, nous devons aborder les *fonctions* qui sont, avec les objets, un deuxième concept de base de R. On utilise des fonctions pour effectuer des calculs, obtenir des résultats et accomplir des actions.\n\nFormellement, une fonction a un *nom*, elle prend en entrée entre parenthèses un ou plusieurs *arguments* (ou *paramètres*), et retourne un *résultat*.\n\nPrenons tout de suite un exemple. Si on veut connaître le nombre d'éléments du vecteur `tailles` que nous avons construit précédemment, on peut utiliser la fonction `length`, de cette manière :\n\n```{r}\nlength(tailles)\n```\n\nIci, `length` est le nom de la fonction, on l'appelle en lui passant un argument entre parenthèses (en l'occurrence notre vecteur `tailles`), et elle nous renvoie un résultat, à savoir le nombre d'éléments du vecteur passé en paramètre.\n\nAutre exemple, les fonctions `min` et `max` retournent respectivement les valeurs minimales et maximales d'un vecteur de nombres :\n\n```{r}\nmin(tailles)\nmax(tailles)\n```\n\nLa fonction `mean` calcule et retourne la moyenne d'un vecteur de nombres :\n\n```{r}\nmean(tailles)\n```\n\nLa fonction `sum` retourne la somme de tous les éléments du vecteur :\n\n```{r}\nsum(tailles)\n```\n\n\nJusqu'à présent on n'a vu que des fonctions qui calculent et retournent un unique nombre. Mais une fonction peut renvoyer d'autres types de résultats. Par exemple, la fonction `range` (étendue) renvoie un vecteur de deux nombres, le minimum et le maximum :\n\n```{r}\nrange(tailles)\n```\n\nOu encore, la fonction `unique`, qui supprime toutes les valeurs en double dans un vecteur, qu'il s'agisse de nombres ou de chaînes de caractères :\n\n```{r}\ndiplome\nunique(diplome)\n```\n\n\n\n#### Arguments\n\nUne fonction peut prendre plusieurs arguments, dans ce cas on les indique toujours entre parenthèses, séparés par des virgules.\n\nOn a déjà rencontré un exemple de fonction acceptant plusieurs arguments : la fonction `c`, qui combine l'ensemble de ses arguments en un vecteur^[`c` est l'abbréviation de *combine*, son nom est très court car on l'utilise très souvent] :\n\n```{r}\ntailles <- c(156, 164, 197, 181, 173)\n```\n\nIci, `c` est appelée en lui passant cinq arguments, les cinq tailles séparées par des virgules, et elle renvoie un vecteur numérique regroupant ces cinq valeurs.\n\nSupposons maintenant que dans notre vecteur `tailles` nous avons une valeur manquante (une personne a refusé de répondre, ou notre mètre mesureur était en panne). On symbolise celle-ci dans R avec le code interne `NA` :\n\n```{r}\ntailles <- c(156, 164, 197, NA, 173)\ntailles\n```\n\n::: {.callout-note}\n`NA` est l'abbréviation de *Not available*, non disponible. Cette valeur particulière peut être utilisée pour indiquer une valeur manquante, qu'il s'agisse d'un nombre, d'une chaîne de caractères, etc.\n:::\n\nSi je calcule maintenant la taille moyenne à l'aide de la fonction `mean`, j'obtiens :\n\n```{r}\nmean(tailles)\n```\n\nEn effet, R considère par défaut qu'il ne peut pas calculer la moyenne si une des valeurs n'est pas disponible. Il considère alors que cette moyenne est elle-même \"non disponible\" et renvoie donc comme résultat `NA`.\n\nOn peut cependant indiquer à `mean` d'effectuer le calcul en ignorant les valeurs manquantes. Ceci se fait en ajoutant un argument supplémentaire, nommé `na.rm` (abbréviation de *NA remove*, \"enlever les NA\"), et de lui attribuer la valeur `TRUE` (code interne de R signifiant *vrai*) :\n\n```{r}\nmean(tailles, na.rm = TRUE)\n```\n\nPositionner le paramètre `na.rm` à `TRUE`  indique à la fonction `mean` de ne pas tenir compte des valeurs manquantes dans le calcul.\n\nSi on ne dit rien à la fonction `mean`, cet argument a une valeur par défaut, en l'occurrence `FALSE` (faux), qui fait qu'il ne supprime pas les valeurs manquantes. Les deux commandes suivantes sont donc rigoureusement équivalentes :\n\n```{r}\nmean(tailles)\nmean(tailles, na.rm = FALSE)\n```\n\n::: {.callout-note}\nLorsqu'on passe un argument à une fonction de cette manière, c'est-à-dire sous la forme `nom = valeur`, on parle d'*argument nommé*.\n:::\n\n#### Aide sur une fonction\n\nIl est fréquent de ne pas savoir (ou d'avoir oublié) quels sont les arguments d'une fonction, ou comment ils se nomment. On peut à tout moment faire appel à l'aide intégrée à R en passant le nom de la fonction (entre guillemets) à la fonction `help` :\n\n```{r}\n#| eval: false\nhelp(\"mean\")\n```\n\nOn peut aussi utiliser le raccourci `?mean`.\n\nCes deux commandes affichent une page (en anglais) décrivant la fonction, ses paramètres, son résultat, le tout accompagné de diverses notes, références et exemples. Ces pages d'aide contiennent à peu près tout ce que vous pourrez chercher à savoir, mais elles ne sont pas toujours d'une lecture aisée.\n\nDans RStudio, les pages d'aide en ligne s'ouvriront par défaut dans la zone en bas à droite,\nsous l'onglet *Help*. Un clic sur l'icône en forme de maison vous affichera la page d'accueil de l'aide.\n\n\n\n### Regrouper ses commandes dans des scripts\n\nJusqu'ici on a utilisé R de manière \"interactive\", en saisissant des commandes directement dans la console. Ça n'est cependant pas la manière dont on va utiliser R au quotidien, pour une raison simple : lorsque R redémarre, tout ce qui a été effectué dans la console est perdu.\n\nPlutôt que de saisir nos commandes dans la console, on va donc les regrouper dans des scripts (de simples fichiers texte), qui vont garder une trace de toutes les opérations effectuées, et ce sont ces scripts, sauvegardés régulièrement, qui seront le \"coeur\" de notre travail. C'est en rouvrant les scripts et en réexécutant les commandes qu'ils contiennent qu'on pourra \"reproduire\" les données, leur traitement, les analyses et leurs résultats.\n\nPour créer un script, il suffit de sélectionner le menu *File*, puis *New file* et *R script*. Une quatrième zone apparaît alors en haut à gauche de l'interface de RStudio. On peut enregistrer notre script à tout moment dans un fichier avec l'extension `.R`, en cliquant sur l'icône de disquette ou en choissant *File* puis *Save*.\n\nUn script est un fichier texte brut, qui s'édite de la manière habituelle. À la différence de la console, quand on appuie sur `Entrée`, cela n'exécute pas la commande en cours mais insère un saut de ligne (comme on pouvait s'y attendre).\n\nPour exécuter une commande saisie dans un script, il suffit de positionner le curseur sur la ligne de la commande en question, et de cliquer sur le bouton *Run* dans la barre d'outils juste au-dessus de la zone d'édition du script. On peut aussi utiliser le raccourci clavier `Ctrl + Entrée` (`Cmd + Entrée` sous Mac). On peut enfin sélectionner plusieurs lignes avec la souris ou le clavier et cliquer sur *Run* (ou utiliser le raccourci clavier), et l'ensemble des lignes est exécuté d'un coup.\n\nAu final, un script pourra ressembler à quelque chose comme ça :\n\n```{r}\n#| eval: false\ntailles <- c(156, 164, 197, 147, 173)\npoids <- c(45, 59, 110, 44, 88)\n\nmean(tailles)\nmean(poids)\n\nimc <- poids / (tailles / 100) ^ 2\nmin(imc)\nmax(imc)\n```\n\n\n#### Commentaires\n\nLes commentaires sont un élément très important d'un script. Il s'agit de texte libre, ignoré par R, et qui permet de décrire les étapes du script, sa logique, les raisons pour lesquelles on a procédé de telle ou telle manière... Il est primordial de documenter ses scripts à l'aide de commentaires, car il est très facile de ne plus se retrouver dans un programme qu'on a produit soi-même, même après une courte interruption.\n\nPour ajouter un commentaire, il suffit de le faire précéder d'un ou plusieurs symboles `#`. En effet, dès que R rencontre ce caractère, il ignore tout ce qui se trouve derrière, jussqu'à la fin de la ligne.\n\nOn peut donc documenter le script précédent :\n\n```{r}\n#| eval: false\n# Saisie des tailles et poids des enquêtés\ntailles <- c(156, 164, 197, 147, 173)\npoids <- c(45, 59, 110, 44, 88)\n\n# Calcul des tailles et poids moyens\nmean(tailles)\nmean(poids)\n\n# Calcul de l'IMC (poids en kilo divisé par les tailles en mètre au carré)\nimc <- poids / (tailles / 100) ^ 2\n# Valeurs extrêmes de l'IMC\nmin(imc)\nmax(imc)\n```\n\n\n\n### Installer et charger des extensions (*packages*) {#packages}\n\nR étant un logiciel libre, il bénéficie d'un développement communautaire riche et dynamique. L'installation de base de R permet de faire énormément de choses, mais le langage dispose en plus d'un système d'extensions permettant d'ajouter facilement de nouvelles fonctionnalités. La plupart des extensions sont développées et maintenues par la communauté des utilisateurs de R, et diffusées via un réseau de serveurs nommé CRAN (*Comprehensive R Archive Network*).\n\nPour installer une extension, si on dispose d'une connexion Internet, on peut utiliser le bouton *Install* de l'onglet *Packages* de RStudio.\n\n<!-- ![Installer une extension](images/screenshots/rstudio_package_install.png) -->\n\n```{r }\n#| echo: false\n#| fig-cap: Installer une extension\n#| out-width: 50%\nknitr::include_graphics(\"images/screenshots/rstudio_package_install.png\")\n```\n\nIl suffit alors d'indiquer le nom de l'extension dans le champ *Package* et de cliquer sur *Install*.\n\n<!-- ![Installation d'une extension](images/screenshots/rstudio_package_install2.png) -->\n\n```{r }\n#| echo: false\n#| fig-cap: Installation une extension\n#| out-width: 50%\nknitr::include_graphics(\"images/screenshots/rstudio_package_install2.png\")\n```\n\nimages/screenshots/rstudio_package_install.png\nOn peut aussi installer des extensions en utilisant la fonction `install.packages()` directement dans la console. Par exemple, pour installer le *package* `questionr` on peut exécuter la commande :\n\n```{r}\n#| eval: false\ninstall.packages(\"questionr\")\n```\n\nInstaller une extension via l'une des deux méthodes précédentes va télécharger l'ensemble des fichiers nécessaires depuis l'une des machines du CRAN, puis installer tout ça sur le disque dur de votre ordinateur. Vous n'avez besoin de le faire qu'une fois, comme vous le faites pour installer un programme sur votre Mac ou PC.\n\nUne fois l'extension installée, il faut la \"charger\" avant de pouvoir utiliser les fonctions qu'elle propose. Ceci se fait avec la fonction `library`. Par exemple, pour pouvoir utiliser les fonctions de `questionr`, vous devrez exécuter la commande suivante :\n\n```{r}\n#| eval: false\nlibrary(questionr)\n```\n\nAinsi, bien souvent, on regroupe en début de script toute une série d'appels à `library` qui permettent de charger tous les packages utilisés dans le script. Quelque chose comme :\n\n```{r}\n#| eval: false\nlibrary(readxl)\nlibrary(ggplot2)\nlibrary(questionr)\n```\n\nSi vous essayez d'exécuter une fonction d'une extension et que vous obtenez le message d'erreur `impossible de trouver la fonction`, c'est certainement parce que vous n'avez pas exécuté la commande `library` correspondante.\n\n\n\n\n\n\n\n### Exercices {#ex-introR}\n\n#### Exercice 1\n\nConstruire le vecteur `x` suivant :\n\n```{r}\n#| echo: false\nx <- c(120, 134, 256, 12)\nx\n```\n\n\n::: {.callout-tip collapse=\"true\"}\n# Solution\n```{r}\n#| eval: false\nx <- c(120, 134, 256, 12)\n```\n:::\n\nUtiliser ce vecteur `x` pour générer les deux vecteurs suivants :\n\n```{r}\n#| echo: false\nx + 100\nx * 2\n```\n\n\n::: {.callout-tip collapse=\"true\"}\n# Solution\n```{r}\n#| eval: false\nx + 100\nx * 2\n```\n:::\n\n\n\n#### Exercice 2\n\nOn a demandé à 4 ménages le revenu des deux conjoints, et le nombre de personnes du ménage :\n\n```{r}\n#| eval: false\nconjoint1 <- c(1200, 1180, 1750, 2100)\nconjoint2 <- c(1450, 1870, 1690, 0)\nnb_personnes <- c(4, 2, 3, 2)\n```\n\nCalculer le revenu total de chaque ménage, puis diviser par le nombre de personnes pour obtenir le revenu par personne de chaque ménage.\n\n\n\n::: {.callout-tip collapse=\"true\"}\n# Solution\n```{r}\n#| eval: false\nrevenu_total <- conjoint1 + conjoint2\nrevenu_total / nb_personnes\n```\n:::\n\n\n\n\n#### Exercice 3\n\nDans l'exercice précédent, calculer le revenu minimum et maximum parmi ceux du premier conjoint.\n\n```{r}\n#| eval: false\nconjoint1 <- c(1200, 1180, 1750, 2100)\n```\n\n\n\n::: {.callout-tip collapse=\"true\"}\n# Solution\n```{r}\n#| eval: false\nrange(conjoint1)\n```\n:::\n\n\n\n\nRecommencer avec les revenus suivants, parmi lesquels l'un des enquetés n'a pas voulu répondre :\n\n```{r}\n#| eval: false\nconjoint1 <- c(1200, 1180, 1750, NA)\n```\n\n\n\n::: {.callout-tip collapse=\"true\"}\n# Solution\n```{r}\n#| eval: false\nrange(conjoint1, na.rm = TRUE)\n```\n:::\n\n\n\n\n\n#### Exercice 4\n\nLes deux vecteurs suivants représentent les précipitations (en mm) et la température (en °C) moyennes sur la ville de Lyon, pour chaque mois de l'année, entre 1981 et 2010 :\n\n```{r}\ntemperature <- c(3.4, 4.8, 8.4, 11.4, 15.8, 19.4, 22.2, 21.6, 17.6, 13.4, 7.6, 4.4)\nprecipitations <- c(47.2, 44.1, 50.4, 74.9, 90.8, 75.6, 63.7, 62, 87.5, 98.6, 81.9, 55.2)\n```\n\nCalculer la température moyenne sur l'année.\n\nCalculer la quantité totale de précipitations sur l'année.\n\n\n::: {.callout-tip collapse=\"true\"}\n# Solution\n```{r}\n#| eval: false\nmean(temperature)\nsum(precipitations)\n```\n:::\n\n\n\nÀ quoi correspond et comment peut-on interpréter le résultat de la fonction suivante ? Vous pouvez vous aider de la page d'aide de la fonction si nécessaire.\n\n```{r}\ncumsum(precipitations)\n```\n\nMême question pour :\n\n```{r}\ndiff(temperature)\n```\n\n\n::: {.callout-tip collapse=\"true\"}\n# Solution\n`cumsum(precipitations)` correspond à la somme cumulée des précipitations sur l'année. Par exemple, la 6e valeur du vecteur résultat correspond au total de précipitations de janvier à juin.\n\n`diff(temperature)` correspond à la différence de température d'un mois sur l'autre. Par exemple, la 2e valeur de ce vecteur correspond à l'écart de température entre le mois de février et le mois de janvier.\n:::\n\n\n\n\n#### Exercice 5\n\nOn a relevé les notes en maths, anglais et sport d'une classe de 6 élèves et on a stocké ces données dans trois vecteurs :\n\n```{r}\nmaths <- c(12, 16, 8, 18, 6, 10)\nanglais <- c(14, 9, 13, 15, 17, 11)\nsport <- c(18, 11, 14, 10, 8, 12)\n```\n\nCalculer la moyenne des élèves de la classe en anglais.\n\nCalculer la moyenne générale de chaque élève.\n\n\n::: {.callout-tip collapse=\"true\"}\n# Solution\n```{r}\n#| eval: false\nmean(anglais)\n(maths + anglais + sport) / 3\n```\n:::\n\n\n\nEssayez de comprendre le résultat des deux fonctions suivantes (vous pouvez vous aider de la page d'aide de ces fonctions) :\n\n```{r}\npmin(maths, anglais, sport)\n```\n\n```{r}\npmax(maths, anglais, sport)\n```\n\n\n\n::: {.callout-tip collapse=\"true\"}\n# Solution\n`pmin` et `pmax` renvoient les minimum et maximum \"parallèles\" des trois vecteurs passés en argument. Ainsi, `pmin` renvoie pour chaque élève la note minimale dans les trois matières, et `pmax` la note maximale.\n:::\n\n\n## Premier travail avec des données\n\n\n### Jeu de données d'exemple\n\nDans cette partie nous allons (enfin) travailler sur des \"vraies\" données, et utiliser un jeu de données présent dans l'extension `questionr`. Nous devons donc avant toute chose installer cette extension.\n\nPour installer ce package, deux possibilités :\n\n- Dans l'onglet *Packages* de la zone de l'écran en bas à droite, cliquez sur le bouton *Install*. Dans le dialogue qui s'ouvre, entrez \"questionr\" dans le champ *Packages* puis cliquez sur *Install*.\n- Saisissez directement la commande suivante dans la console : `install.packages(\"questionr\")`\n\nDans les deux cas, tout un tas de messages devraient s'afficher dans la console. Attendez que l'invite de commandes `>` apparaisse à nouveau.\n\nPour plus d'informations sur les extensions et leur installation, voir la section \\@ref(packages).\n\nLe jeu de données que nous allons utiliser est un extrait de l'enquête *Histoire de vie* réalisée par l'INSEE en 2003. Il contient 2000 individus et 20 variables.\n\nPour pouvoir utiliser ces données, il faut d'abord charger l'extension `questionr` (après l'avoir installée, bien entendu) :\n\n```{r}\nlibrary(questionr)\n```\n\nL'utilisation de `library` permet de rendre \"disponibles\", dans notre session R, les fonctions et jeux de données inclus dans l'extension.\n\nNous devons ensuite indiquer à R que nous souhaitons accéder au jeu de données à l'aide de la commande `data` :\n\n```{r}\ndata(hdv2003)\n```\n\nCette commande ne renvoie aucun résultat particulier (sauf en cas d'erreur), mais vous devriez voir apparaître dans l'onglet *Environment* de RStudio un nouvel objet nommé `hdv2003` :\n\n<!-- ![Onglet *Environment*](images/screenshots/rstudio_environment.png) -->\n\n```{r }\n#| echo: false\n#| fig-cap: Onglet Environment\n#| out-width: 75%\nknitr::include_graphics(\"images/screenshots/rstudio_environment.png\")\n```\n\nCet objet est d'un type nouveau : il s'agit d'un tableau de données.\n\n\n### Tableau de données (*data frame*)\n\n\nUn *data frame* (ou tableau de données, ou table) est un type d'objet R qui contient des données au format tabulaire, avec les observations en ligne et les variables en colonnes, comme dans une feuille de tableur de type LibreOffice ou Excel.\n\nSi on se contente d'exécuter le nom de notre tableau de données :\n\n```{r}\n#| eval: false\nhdv2003\n```\n\nR va, comme à son habitude, nous l'afficher dans la console, ce qui est tout sauf utile.\n\nUne autre manière d'afficher le contenu du tableau est de cliquer sur l'icône en forme de tableau à droite du nom de l'objet dans l'onglet *Environment* :\n\n<!-- ![Icone view](images/screenshots/rstudio_view_icon.png) -->\n\n```{r }\n#| echo: false\n#| fig-cap: Icone view\n#| out-width: 75%\nknitr::include_graphics(\"images/screenshots/rstudio_view_icon.png\")\n```\n\nOu d'utiliser la fonction `View` :\n\n```{r}\n#| eval: false\nView(hdv2003)\n```\n\nDans les deux cas votre tableau devrait s'afficher dans RStudio avec une interface de type tableur :\n\n<!-- ![Interface \"View\"](images/screenshots/rstudio_view.png) -->\n\n```{r }\n#| echo: false\n#| fig-cap: Interface View\n#| out-width: 100%\nknitr::include_graphics(\"images/screenshots/rstudio_view.png\")\n```\n\nIl est important de comprendre que l'objet `hdv2003` contient *l'intégralité* des données du tableau.\nOn voit donc qu'un objet peut contenir des données de types très différents (simple nombre, texte, vecteur, tableau de données entier), et être potentiellement de très grande taille^[La seule limite pour la taille d'un objet étant la mémoire vive (RAM) de la machine sur laquelle tourne la session R.].\n\n::: {.callout-note}\nSous R, on peut importer ou créer autant de tableaux de données qu'on le souhaite, dans les limites des capacités de sa machine.\n:::\n\nUn *data frame* peut être manipulé comme les autres objets vus précédemment. On peut par exemple faire :\n\n```{r}\nd <- hdv2003\n```\n\nce qui va entraîner la copie de l'ensemble de nos données dans un nouvel objet nommé `d`. Ceci peut paraître parfaitement inutile mais a en fait l'avantage de fournir un objet avec un nom beaucoup plus court, ce qui diminuera la quantité de texte à saisir par la suite.\n\n**Pour résumer**, comme nous avons désormais décidé de saisir nos commandes dans un script et non plus directement dans la console, les premières lignes de notre fichier de travail sur les données de l'enquête *Histoire de vie* pourraient donc ressembler à ceci :\n\n\n```{r}\n#| eval: false\n## Chargement des extensions nécessaires\nlibrary(questionr)\n\n## Jeu de données hdv2003\ndata(hdv2003)\nd <- hdv2003\n```\n\n\n#### Structure du tableau\n\nUn tableau étant un objet comme un autre, on peut lui appliquer des fonctions. Par exemple, `nrow` et `ncol` retournent le nombre de lignes et de colonnes du tableau :\n\n```{r}\nnrow(d)\n```\n\n```{r}\nncol(d)\n```\n\nLa fonction `dim` renvoie ses dimensions, donc les deux nombres précédents :\n\n```{r}\ndim(d)\n```\n\nLa fonction `names` retourne les noms des colonnes du tableau, c'est-à-dire la liste de nos *variables* :\n\n```{r}\nnames(d)\n```\n\nEnfin, la fonction `str` renvoie un descriptif plus détaillé de la structure du tableau. Elle liste les différentes variables, indique leur type ^[Les différents types de variables seront décrits plus en détail dans le chapitre \\@ref(vectorfactor) sur les recodages.] et affiche les premières valeurs :\n\n```{r}\nstr(d)\n```\n\n\nSous RStudio, on peut afficher à tout moment la structure d'un objet en cliquant sur l'icône de triangle sur fond bleu à gauche du nom de l'objet dans l'onglet *Environment* :\n\n<!-- ![Structure d'un objet](images/screenshots/rstudio_environment_str.png) -->\n\n```{r }\n#| echo: false\n#| fig-cap: Structure d'un objet\n#| out-width: 100%\nknitr::include_graphics(\"images/screenshots/rstudio_environment_str.png\")\n```\n\n#### Accéder aux variables d'un tableau\n\nUne opération très importante est l'accès aux variables du tableau (à ses colonnes) pour pouvoir les manipuler, effectuer des calculs, etc. On utilise pour cela l'opérateur `$`, qui permet d'accéder aux colonnes du tableau. Ainsi, si l'on tape :\n\n```{r}\n#| include: false\noptions(max.print = 200)\n```\n\n\n```{r}\nd$sexe\n```\n\nR va nous afficher l'ensemble des valeurs de notre variable `sexe` dans la console, ce qui est à nouveau fort peu utile. Mais cela nous permet de constater que `d$sexe` est un vecteur de chaînes de caractères tels qu'on en a déjà rencontré précédemment.\n\nLa fonction `table$colonne` renvoie donc la colonne nommée `colonne` du tableau `table`, c'est-à-dire un vecteur, en général de nombres ou de chaînes de caractères.\n\nSi on souhaite afficher seulement les premières ou dernières valeurs d'une variable, on peut utiliser les fonctions `head` et `tail` :\n\n```{r}\nhead(d$age)\n```\n\n\n```{r}\ntail(d$age, 10)\n```\n\nLe deuxième argument numérique permet d'indiquer le nombre de valeurs à afficher.\n\n#### Créer une nouvelle variable\n\nOn peut aussi utiliser l'opérateur `$` pour créer une nouvelle variable dans notre tableau : pour cela, il suffit de lui assigner une valeur.\n\nPar exemple, la variable `heures.tv` contient le nombre d'heures passées quotidiennement devant la télé :\n\n```{r}\nhead(d$heures.tv, 10)\n```\n\nOn peut vouloir créer une nouvelle variable dans notre tableau qui contienne la même durée mais en minutes. On va donc créer une nouvelle variables `minutes.tv` de la manière suivante :\n\n```{r}\nd$minutes.tv <- d$heures.tv * 60\n```\n\nOn peut alors constater, soit visuellement soit dans la console, qu'une nouvelle variable (une nouvelle colonne) a bien été ajoutée au tableau :\n\n```{r}\nhead(d$minutes.tv)\n```\n\n\n\n### Analyse univariée\n\nOn a donc désormais accès à un tableau de données `d`, dont les lignes sont des observations (des individus enquêtés), et les colonnes des variables (des caractéristiques de chacun de ces individus), et on sait accéder à ces variables grâce à l'opérateur `$`.\n\nSi on souhaite analyser ces variables, les méthodes et fonctions utilisées seront différentes selon qu'il s'agit d'une variable *quantitative* (variable numérique pouvant prendre un grand nombre de valeurs : l'âge, le revenu, un pourcentage...) ou d'une variable *qualitative* (variable pouvant prendre un nombre limité de valeurs appelées modalités : le sexe, la profession, le dernier diplôme obtenu, etc.).\n\n#### Analyser une variable quantitative\n\nUne variable quantitative est une variable de type numérique (un nombre) qui peut prendre un grand nombre de valeurs. On en a plusieurs dans notre jeu de données, notamment l'âge (variable `age`) ou le nombre d'heures passées devant la télé (`heures.tv`).\n\n\n##### Indicateurs de centralité\n\nCaractériser une variable quantitative, c'est essayer de décrire la manière dont ses valeurs se répartissent, ou se distribuent.\n\nPour cela on peut commencer par regarder les valeurs extrêmes, avec les fonctions `min`, `max` ou `range` :\n\n```{r}\nmin(d$age)\nmax(d$age)\nrange(d$age)\n```\n\nOn peut aussi calculer des indicateurs de *centralité* : ceux-ci indiquent autour de quel nombre se répartissent les valeurs de la variable. Il y en a plusieurs, le plus connu étant la moyenne, qu'on peut calculer avec la fonction `mean` :\n\n```{r}\nmean(d$age)\n```\n\nIl existe aussi la médiane, qui est la valeur qui sépare notre population en deux : on a la moitié de nos observations en-dessous, et la moitié au-dessus. Elle se calcule avec la fonction `median` :\n\n```{r}\nmedian(d$age)\n```\n\nUne différence entre les deux indicateurs est que la médiane est beaucoup moins sensible aux valeurs \"extrêmes\" : on dit qu'elle est plus *robuste*. Ainsi, en 2013, le salaire net *moyen* des salariés à temps plein en France était de 2202 euros, tandis que le salaire net *médian* n'était que de 1772 euros. La différence étant due à des très hauts salaires qui \"tirent\" la moyenne vers le haut.\n\n\n##### Indicateurs de dispersion\n\nLes indicateurs de dispersion permettent de mesurer si les valeurs sont plutôt regroupées ou au contraire plutôt dispersées.\n\nL'indicateur le plus simple est l'étendue de la distribution, qui décrit l'écart maximal observé entre les observations :\n\n```{r}\nmax(d$age) - min(d$age)\n```\n\nLes indicateurs de dispersion les plus utilisés sont la variance ou, de manière équivalente, l'écart-type (qui est égal à la racine carrée de la variance). On obtient la première avec la fonction `var`, et le second avec `sd` (abbréviation de *standard deviation*) :\n\n```{r}\nvar(d$age)\n```\n\n```{r}\nsd(d$age)\n```\n\nPlus la variance ou l'écart-type sont élevés, plus les valeurs sont dispersées autour de la moyenne. À l'inverse, plus ils sont faibles et plus les valeurs sont regroupées.\n\nUne autre manière de mesurer la dispersion est de calculer les quartiles :\n\n- le premier quartile est la valeur pour laquelle on a 25% des observations en dessous et 75% au dessus\n- le deuxième quartile est la valeur pour laquelle on a 50% des observations en dessous et 50% au dessus (c'est donc la médiane)\n- le troisième quartile est la valeur pour laquelle on a 75% des observations en dessous et 25% au dessus\n\nOn peut les calculer avec la fonction `quantile` :\n\n```{r}\n### Premier quartile\nquantile(d$age, prob = 0.25)\n```\n\n```{r}\n## Troisième quartile\nquantile(d$age, prob = 0.75)\n```\n\n`quantile` prend deux arguments principaux : le vecteur dont on veut calculer le quantile, et un argument `prob` qui indique quel quantile on souhaite obtenir. `prob` prend une valeur entre 0 et 1 : 0.5 est la médiane, 0.25 le premier quartile, 0.1 le premier décile, etc.\n\nNotons enfin que la fonction `summary` permet d'obtenir d'un coup plusieurs indicateurs classiques :\n\n```{r}\nsummary(d$age)\n```\n\n##### Représentation graphique\n\nL'outil le plus utile pour étudier la distribution des valeurs d'une variable quantitative reste la représentation graphique.\n\nLa représentation la plus courante est sans doute l'histogramme. On peut l'obtenir avec la fonction `hist` :\n\n```{r}\n#| fig-cap: Histogramme de l'age par défaut\nhist(d$age)\n```\n\nCette fonction n'a pas pour effet direct d'effectuer un calcul ou de nous renvoyer un résultat : elle génère un graphique qui va s'afficher dans l'onglet *Plots* de RStudio.\n\nOn peut personnaliser l'apparence de l'histogramme en ajoutant des arguments supplémentaires à la fonction `hist`. L'argument le plus important est `breaks`, qui permet d'indiquer le nombre de classes que l'on souhaite.\n\n```{r}\n#| fig-cap: Histogramme de l'age avec 10 classes\nhist(d$age, breaks = 10, main = \"\")\n```\n\n```{r}\n#| fig-cap: Histogramme de l'age avec 70 classes\nhist(d$age, breaks = 70, main = \"\")\n```\n\n\nLe choix d'un \"bon\" nombre de classes pour un histogramme n'est pas un problème simple : si on a trop peu de classes, on risque d'effacer quasiment toutes les variations, et si on en a trop on risque d'avoir trop de détails et de masquer les grandes tendances.\n\nLes arguments de `hist` permettent également de modifier la présentation du graphique. On peut ainsi changer la couleur des barres avec `col`^[Les différentes manières de spécifier des couleurs sont indiquées dans l'encadré de la section \\@ref(scalecolor).], le titre avec `main`, les étiquettes des axes avec `xlab` et `ylab`, etc. :\n\n```{r}\n#| fig-cap: Histogramme modifié\nhist(d$age,\n  col = \"skyblue\",\n  main = \"Répartition des âges des enquêtés\",\n  xlab = \"Âge\",\n  ylab = \"Effectif\"\n)\n```\n\nLa fonction `hist` fait partie des fonctions graphique de base de R. On verra plus en détail d'autres fonctions graphiques\n<!-- dans la partie \\@ref(ggplot2) de ce document, consacrée à l'extension -->\navec l'extension `ggplot2` qui permet la production et la personnalisation de graphiques complexes.\n\n\n#### Analyser une variable qualitative\n\nUne variable qualitative est une variable qui ne peut prendre qu'un nombre limité de valeurs, appelées modalités. Dans notre jeu de données on trouvera par exemple le sexe (`sexe`), le niveau d'études (`nivetud`), la catégorie socio-professionnelle (`qualif`)...\n\nÀ noter qu'une variable qualitative peut tout-à-fait être numérique, et que certaines variables peuvent être traitées soit comme quantitatives, soit comme qualitatives : c'est le cas par exemple du nombre d'enfants ou du nombre de frères et soeurs.\n\n##### Tri à plat\n\nL'outil le plus utilisé pour représenter la répartition des valeurs d'une variable qualitative est le *tri à plat* : il s'agit simplement de compter, pour chacune des valeurs possibles de la variable (pour chacune des modalités), le nombre d'observations ayant cette valeur. Un tri à plat s'obtient sous R à l'aide de la fonction `table` :\n\n```{r}\ntable(d$sexe)\n```\n\nCe tableau nous indique donc que parmi nos enquêtés on trouve 899 hommes et 1101 femmes.\n\n```{r}\ntable(d$qualif)\n```\n\nUn tableau de ce type peut être affiché ou stocké dans un objet, et on peut à son tour lui appliquer des fonctions. Par exemple, la fonction `sort` permet de trier le tableau selon la valeur de l'effectif. On peut donc faire :\n\n```{r}\ntab <- table(d$qualif)\nsort(tab)\n```\n\n::: {.callout-important}\nAttention, par défaut la fonction `table` n'affiche pas les valeurs manquantes (`NA`). Si on souhaite les inclure il faut utiliser l'argument `useNA = \"always\"`, soit : `table(d$qualif, useNA = \"always\")`.\n:::\n\nÀ noter qu'on peut aussi appliquer `summary` à une variable qualitative. Le résultat est également le tri à plat de la variable, avec en plus le nombre de valeurs manquantes éventuelles :\n\n```{r}\nsummary(d$qualif)\n```\n\n\nPar défaut ces tris à plat sont en effectifs et ne sont donc pas toujours très lisibles, notamment quand on a des effectifs importants. On leur rajoute donc en général la répartition en pourcentages. Pour cela, nous allons utiliser la fonction `freq` de l'extension `questionr`, qui devra donc avoir précédemment été chargée avec `library(questionr)` :\n\n```{r}\n## À rajouter en haut de script et à exécuter\nlibrary(questionr)\n```\n\nOn peut alors utiliser la fonction :\n\n```{r}\n#| eval: false\nfreq(d$qualif)\n```\n```{r}\n#| echo: false\nprint(freq(d$qualif))\n```\n\n\nLa colonne `n` représente les effectifs de chaque catégorie, la colonne `%` le pourcentage, et la colonne `val%` le pourcentage calculé sur les valeurs valides, donc en excluant les `NA`. Une ligne a également été rajoutée pour indiquer le nombre et la proportion de `NA`.\n\n`freq` accepte un certain nombre d'arguments pour personnaliser son affichage. Par exemple :\n\n- `valid` indique si on souhaite ou non afficher les pourcentages sur les valeurs valides\n- `cum` indique si on souhaite ou non afficher les pourcentages cumulés\n- `total` permet d'ajouter une ligne avec les effectifs totaux\n- `sort` permet de trier le tableau par fréquence croissante (`sort=\"inc\"`) ou décroissante (`sort=\"dec\"`).\n\n```{r}\n#| eval: false\nfreq(d$qualif, valid = FALSE, total = TRUE, sort = \"dec\")\n```\n```{r}\n#| echo: false\nprint(freq(d$qualif, valid = FALSE, total = TRUE, sort = \"dec\"))\n```\n\n\n\n##### Représentations graphiques\n\nOn peut représenter graphiquement le tri à plat d'une variable qualitative avec un diagramme en barres, obtenu avec la fonction `barplot`. Attention, contrairement à `hist` cette fonction ne s'applique pas directement à la variable mais au résultat du tri à plat de cette variable, calculé avec `table`. Il faut donc procéder en deux étapes :\n\n```{r}\n#| fig-cap: Graphique en barre\ntab <- table(d$clso)\nbarplot(tab)\n```\n\n\nOn peut aussi trier le tri à plat avec la fonction `sort` avant de le représenter graphiquement, ce qui peut faciliter la lecture du graphique :\n\n```{r}\n#| fig-cap: Graphique en barre trié\nbarplot(sort(tab))\n```\n\nUne alternative au graphique en barres est le *diagramme de Cleveland*, qu'on peut obtenir avec la fonction `dotchart`. Celle-ci s'applique elle aussi au tri à plat de la variable calculé avec `table`.\n\n```{r}\n#| warning: false\n#| fig-cap: Graphique de Cleveland\ndotchart(table(d$qualif))\n```\nLà aussi, pour améliorer la lisibilité du graphique il est préférable de trier le tri à plat de la variable avant de le représenter :\n\n```{r}\n#| warning: false\n#| fig-cap: Graphique de Cleveland trié\ndotchart(sort(table(d$qualif)))\n```\n\n### Exercices {#ex-introR-univ}\n\n**Exercice 1**\n\nCréer un nouveau script qui effectue les actions suivantes :\n\n- charger l'extension `questionr`\n- charger le jeu de données nommé `hdv2003`\n- copier le jeu de données dans un nouvel objet nommé `df`\n- afficher les dimensions et la liste des variables de `df`\n\n\n\n\n::: {.callout-tip collapse=\"true\"}\n# Solution\n```{r}\n#| eval: false\nlibrary(questionr)\n\ndata(hdv2003)\ndf <- hdv2003\n\ndim(df)\nnames(df)\n```\n:::\n\n\n\n\n**Exercice 2**\n\nOn souhaite étudier la répartition du temps passé devant la télévision par les enquêtés (variable `heures.tv`). Pour cela, affichez les principaux indicateurs de cette variable : valeur minimale, maximale, moyenne, médiane et écart-type. Représentez ensuite sa distribution par un histogramme en 10 classes.\n\n\n\n::: {.callout-tip collapse=\"true\"}\n# Solution\n```{r}\n#| eval: false\nsummary(df$heures.tv)\nsd(df$heures.tv)\n\nhist(df$heures.tv, breaks = 10)\n```\n:::\n\n\n\n\n\n**Exercice 3**\n\nOn s'intéresse maintenant à l'importance accordée par les enquêtés à leur travail (variable `trav.imp`). Faites un tri à plat des effectifs des modalités de cette variable avec la commande `table`.\n\n\n\n::: {.callout-tip collapse=\"true\"}\n# Solution\n```{r}\n#| eval: false\ntable(df$trav.imp)\n```\n:::\n\n\n\n\n\nFaites un tri à plat affichant à la fois les effectifs et les pourcentages de chaque modalité. Y'a-t-il des valeurs manquantes ?\n\n\n\n::: {.callout-tip collapse=\"true\"}\n# Solution\n```{r}\n#| eval: false\nfreq(df$trav.imp)\n```\n:::\n\n\n\n\n\nReprésentez graphiquement les effectifs des modalités à l'aide d'un graphique en barres.\n\n\n\n\n::: {.callout-tip collapse=\"true\"}\n# Solution\n```{r}\n#| eval: false\ntab <- sort(table(df$trav.imp))\nbarplot(tab)\n```\n:::\n\n\n\nUtilisez l'argument `col` de la fonction `barplot` pour modifier la couleur du graphique en\n`tomato`.\n\n\n::: {.callout-tip collapse=\"true\"}\n# Solution\n```{r}\n#| eval: false\nbarplot(tab, col = \"tomato\")\n```\n:::\n\n\nTapez `colors()` dans la console pour afficher l'ensemble des noms de couleurs disponibles dans R. Testez chaque couleur une à une pour trouver votre couleur préférée.\n\n::: {.callout-tip collapse=\"true\"}\n# Solution\nC'est une blague, hein ! Cela dit `moccasin` ou `palevioletred` sont pas mal, si vous voulez essayer :-)\n:::\n\n## Analyse de 2 variables\n\nFaire une analyse bivariée, c'est étudier la relation entre deux variables : sont-elles liées ? les valeurs de l'une influencent-elles les valeurs de l'autre ? ou sont-elles au contraire indépendantes ?\n\nÀ noter qu'on va parler ici d'influence ou de lien, mais pas de relation de cause à effet : les outils présentés permettent de visualiser ou de déterminer une relation, mais des liens de causalité proprement dit sont plus difficiles à mettre en évidence. Il faut en effet vérifier que c'est bien telle variable qui influence telle autre et pas l'inverse, qu'il n'y a pas de \"variable cachée\", etc.\n\nLà encore, le type d'analyse ou de visualisation est déterminé par la nature qualitative ou quantitative des deux variables.\n\n\n### Croisement de deux variables qualitatives\n\n#### Tableaux croisés\n\nOn va continuer à travailler avec le jeu de données tiré de l'enquête *Histoire de vie* inclus dans l'extension `questionr`. On commence donc par charger l'extension, le jeu de données, et à le renommer en un nom plus court pour gagner un peu de temps de saisie au clavier :\n\n```{r}\nlibrary(questionr)\ndata(hdv2003)\nd <- hdv2003\n```\n\n\nQuand on veut croiser deux variables qualitatives, on fait un *tableau croisé*. Comme pour un tri à plat ceci s'obtient avec la fonction `table` de R, mais à laquelle on passe cette fois deux variables en argument. Par exemple, si on veut croiser la catégorie socio-professionnelle et le sexe des enquêtés :\n\n```{r}\ntable(d$qualif, d$sexe)\n```\n\nPour pouvoir interpréter ce tableau on doit passer du tableau en effectifs au tableau en pourcentages ligne ou colonne. Pour cela, on peut utiliser les fonctions `lprop` et `cprop` de l'extension `questionr`, qu'on applique au tableau croisé précédent.\n\nPour calculer les pourcentages ligne :\n\n```{r}\ntab <- table(d$qualif, d$sexe)\nlprop(tab)\n```\n\nEt pour les pourcentages colonne :\n\n```{r}\ncprop(tab)\n```\n\n::: {.callout-note}\nPour savoir si on doit faire des pourcentages ligne ou colonne, on pourra se référer à l'article suivant :\n\nhttp://alain-leger.lescigales.org/textes/lignecolonne.pdf\n\nEn résumé, quand on fait un tableau croisé, celui-ci est parfaitement symétrique : on peut inverser les lignes et les colonnes, ça ne change pas son interprétation. Par contre, on a toujours en tête un \"sens\" de lecture dans le sens où on considère que l'une des variables *dépend* de l'autre. Par exemple, si on croise sexe et type de profession, on dira que le type de profession dépend du sexe, et non l'inverse : le type de profession est alors la variable *dépendante* (à expliquer), et le sexe la variable *indépendante* (explicative).\n\nPour faciliter la lecture d'un tableau croisé, il est recommandé de **faire les pourcentages sur la variable indépendante**. Dans notre exemple, la variable indépendante est le sexe, elle est en colonne, on calcule donc les pourcentages colonnes qui permettent de comparer directement, pour chaque sexe, la répartition des catégories socio-professionnelles.\n:::\n\n<!--### Test du χ²\n\nComme on travaille sur un échantillon et pas sur une population entière, on peut compléter ce tableau croisé par un test d'indépendance du χ². Celui-ci permet de rejeter l'hypothèse d'indépendance des lignes et des colonnes du tableau, c'est à dire de rejeter l'hypothèse que les écarts à l'indépendance observés seraient uniquement dus au biais d'échantillonnage (au fait qu'on n'a pas interrogé toute notre population).\n\nPour effectuer un test de ce type, on applique la fonction `chisq.test` au tableau croisé calculé précédemment :\n\n```{r}\nchisq.test(tab)\n```\n\nLe résultat nous indique trois valeurs :\n\n- `X-squared`, la valeur de la statistique du χ² pour notre tableau, c'est-à-dire une \"distance\" entre notre tableau observé et celui attendu si les deux variables étaient indépendantes.\n- `df`, le nombre de degrés de libertés du test.\n- `p-value`, le fameux *p*, qui indique la probabilité d'obtenir une valeur de la statistique du χ² au moins aussi extrême sous l'hypothèse d'indépendance.\n\nIci, le *p* est extrêmement petit (la notation `< 2.2e-16` indique qu'il est plus petit que la plus petite valeur proche de zéro calculable par R), donc certainement en-dessous du seuil de décision choisi préalablement au test (souvent 5%, soit 0.05). On peut donc rejeter l'hypothèse d'indépendance des lignes et des colonnes du tableau.\n\nEn complément du test du χ², on peut aussi regarder les *résidus* de ce test pour affiner la lecture du tableau. Ceux-ci s'obtiennent avec la fonction `chisq.residuals` de `questionr` :\n\n```{r}\nchisq.residuals(tab)\n```\n\nL'interprétation des résidus est la suivante :\n\n- si la valeur du résidu pour une case est inférieure à -2, alors il y a une sous-représentation de cette case dans le tableau : les effectifs sont significativement plus faibles que ceux attendus sous l'hypothèse d'indépendance\n- à l'inverse, si le résidu est supérieur à 2, il y a sur-représentatation de cette case\n- si le résidu est compris entre -2 et 2, il n'y a pas d'écart à l'indépendance significatif\n\nLes résidus peuvent être une aide utile à l'interprétation, notamment pour des tableaux de grande dimension.\n-->\n\n#### Représentation graphique\n\nIl est possible de faire une représentation graphique d'un tableau croisé, par exemple avec la fonction `mosaicplot` :\n\n```{r}\n#| fig-height: 6\n#| fig-width: 6\n#| fig-cap: Graphique mosaique\nmosaicplot(tab)\n```\n\n\n\nOn peut améliorer ce graphique en colorant les cases selon les résidus du test du χ² (argument `shade = TRUE`) et en orientant verticalement les labels de colonnes (argument `las = 3`) :\n\n```{r}\n#| fig-height: 6\n#| fig-width: 6\n#| fig-cap: Graphique mosaique modifié\nmosaicplot(tab, las = 3, shade = TRUE)\n```\n\nChaque rectangle de ce graphique représente une case de tableau. Sa largeur correspond au pourcentage des modalités en colonnes (il y'a beaucoup d'employés et d'ouvriers et très peu d'\"autres\"). Sa hauteur correspond aux pourcentages colonnes : la proportion d'hommes chez les cadres est plus élevée que chez les employés. Enfin, la couleur de la case correspond au résidu du test du χ² correspondant : les cases en rouge sont sous-représentées, les cases en bleu sur-représentées, et les cases blanches sont proches des effectifs attendus sous l'hypothèse d'indépendance.\n\n\n### Croisement d'une variable quantitative et d'une variable qualitative\n\n#### Représentation graphique\n\nCroiser une variable quantitative et une variable qualitative, c'est essayer de voir si les valeurs de la variable quantitative se répartissent différemment selon la catégorie d'appartenance de la variable qualitative.\n\nPour cela, l'idéal est de commencer par une représentation graphique de type \"boîte à moustache\" à l'aide de la fonction `boxplot`. Par exemple, si on veut visualiser la répartition des âges selon la pratique ou non d'un sport, on va utiliser la syntaxe suivante :\n\n```{r}\n#| eval: false\n#| fig-cap: Graphique en boites à moustaches\nboxplot(age ~ sport, data = d)\n```\n\n::: {.callout-note}\nCette syntaxe de `boxplot` utilise une nouvelle notation de type \"formule\". Celle-ci est utilisée notamment pour la spécification des modèles de régression. Ici le `~` peut se lire comme \"en fonction de\" : on veut représenter le boxplot de l'âge en fonction du sport.\n:::\n\nCe qui va nous donner le résultat suivant :\n\n```{r}\n#| echo: false\n#| fig-cap: Graphique en boites à moustaches\nboxplot(age ~ sport, data = d)\n```\n\n\n::: {.callout-note}\nL'interprétation d'un boxplot est la suivante : Les bords inférieurs et supérieurs du carré central représentent le premier et le troisième quartile de la variable représentée sur l'axe vertical. On a donc 50% de nos observations dans cet intervalle. Le trait horizontal dans le carré représente la médiane. Enfin, des \"moustaches\" s'étendent de chaque côté du carré, jusqu'aux valeurs minimales et maximales, avec une exception : si des valeurs sont éloignées du carré de plus de 1,5 fois l'écart interquartile (la hauteur du carré), alors on les représente sous forme de points (symbolisant des valeurs considérées comme \"extrêmes\").\n:::\n\nDans le graphique ci-dessus, on voit que ceux qui ont pratiqué un sport au cours des douze derniers mois ont l'air d'être sensiblement plus jeunes que les autres.\n\n\n#### Calculs d'indicateurs\n\nOn peut aussi vouloir comparer certains indicateurs (moyenne, médiane) d'une variable quantitative selon les modalités d'une variable qualitative. Si on reprend l'exemple précédent, on peut calculer la moyenne d'âge pour ceux qui pratiquent un sport et pour ceux qui n'en pratiquent pas.\n\nUne première méthode pour cela est d'extraire de notre population autant de sous-populations qu'il y a de modalités dans la variable qualitative. On peut le faire notamment avec la fonction `subset`.\n\n<!-- ^[Le package en question est présenté en détail dans la partie \\@ref(dplyr).].\n\nOn commence par charger `dplyr` (en l'ayant préalablement installé) :\n\n```{r}\n#| message: false\nlibrary(dplyr)\n```\n-->\n\nOn applique `subset` pour créer deux sous-populations, stockées dans deux nouveaux tableaux de données :\n\n```{r}\nd_sport <- subset(d, sport == \"Oui\")\nd_nonsport <- subset(d, sport == \"Non\")\n```\n\nOn peut ensuite utiliser ces deux nouveaux tableaux de données comme on en a l'habitude, et calculer les deux moyennes d'âge :\n\n```{r}\nmean(d_sport$age)\n```\n```{r}\nmean(d_nonsport$age)\n```\n\nUne autre possibilité est d'utiliser la fonction `tapply`, qui prend en paramètre une variable quantitative, une variable qualitative et une fonction, puis applique automatiquement la fonction aux valeurs de la variables quantitative pour chaque niveau de la variable qualitative :\n\n```{r}\ntapply(d$age, d$sport, mean)\n```\n\n<!-- ### Tests statistiques\n\nUn des tests les plus connus est le test du *t* de Student, qui permet de tester si les moyennes de deux sous-populations peuvent être considérées comme différentes (compte tenu des fluctuations aléatoires provenant du biais d'échantillonnage).\n\nUn test *t* s'effectue à l'aide de la fonction `t.test`. Ainsi, on peut tester l'hypothèse d'égalité des âges moyens selon la pratique ou non d'un sport avec la commande suivante :\n\n```{r}\nt.test(d$age ~ d$sport)\n```\n\nLe résultat du test est significatif, avec un *p* extrêmement petit, et on peut rejeter l'hypothèse nulle d'égalité des moyennes des deux groupes. Le test nous donne même un intervalle de confiance à 95% pour la valeur de la différence entre les deux moyennes.\n\nNous sommes cependant allés un peu vite, et avons négligé le fait que le test *t* s'applique normalement à des distributions normales. On peut se faire un premier aperçu visuel de cette normalité en traçant les histogrammes des deux répartitions :\n\n```{r}\nhist(d_sport$age)\n```\n\n```{r}\nhist(d_nonsport$age)\n```\n\nSi l'âge dans le groupe des non sportifs se rapproche d'une distribution normale, celui des sportifs en semble assez éloigné, notamment du fait de la limite d'âge à 18 ans imposée par construction de l'enquête.\n\nOn peut tester cette normalité à l'aide du test de Shapiro-Wilk et de la fonction `shapiro.test` :\n\n\n```{r}\nshapiro.test(d_sport$age)\n```\n\n```{r}\nshapiro.test(d_nonsport$age)\n```\n\nLe test est significatif dans les deux cas et rejette l'hypothèse d'une normalité des deux distributions.\n\nDans ce cas on peut faire appel à un test non-paramétrique, qui ne fait donc pas d'hypothèses sur les lois de distribution des variables testées, en l'occurrence le test des rangs de Wilcoxon, à l'aide de la fonction `wilcox.test` :\n\n```{r}\nwilcox.test(d$age ~ d$sport)\n```\n\nLa valeur *p* étant à nouveau extrêmement petite, on peut rejeter l'hypothèse d'indépendance et considérer que les distributions des âges dans les deux sous-populations sont différentes.\n-->\n\n\n### Croisement de deux variables quantitatives\n\nLe jeu de données `hdv2003` comportant assez peu de variables quantitatives, on va s'intéresser maintenant à un autre jeu de données comportant des informations du recensement de la population de 2012. On le charge avec :\n\n```{r}\ndata(rp2012)\n```\n\nUn nouveau tableau de données `rp2012` devrait apparaître dans votre environnement. Celui-ci comprend les 5170 communes de France métropolitaine de plus de 2000 habitants, et une soixantaine de variables telles que le département, la population, le taux de chômage, etc. Pour une description plus complète et une liste des variables, voir section \\@ref(rp2012).\n\n\n#### Représentation graphique\n\nQuand on croise deux variables quantitatives, l'idéal est de faire une représentation graphique sous forme de nuage de points à l'aide de la fonction `plot`. On va représenter le croisement entre le pourcentage de cadres et le pourcentage de propriétaires dans la commune :\n\n```{r}\n#| fig-cap: Graphique du pourcentage de propriétaire en fonction du pourcentage de cadre\nplot(rp2012$cadres, rp2012$proprio)\n```\n\nUne représentation graphique est l'idéal pour visualiser l'existence d'un lien entre les deux variables. Voici quelques exemples d'interprétation :\n\n```{r}\n#| echo: false\n#| fig-height: 10\n#| fig-width: 6\n#| fig-cap: Illustration des relations bivariées\npar(mfrow = c(3, 2))\n\nx <- rnorm(100)\ny <- 2 * x + 1 + rnorm(100, 0, 0.4)\nplot(x, y,\n  main = \"Dépendance linéaire positive\",\n  xlab = \"\", ylab = \"\", col = \"red\"\n)\n\nx <- rnorm(100)\ny <- -3 * x + 15 + rnorm(100, 0, 0.4)\nplot(x, y,\n  main = \"Dépendance linéaire négative\",\n  xlab = \"\", ylab = \"\", col = \"red\"\n)\n\nx <- rnorm(100)\ny <- exp(x) + 1 + rnorm(100, 0, 0.4)\nplot(x, y,\n  main = \"Dépendance non-linéaire monotone\",\n  xlab = \"\", ylab = \"\", col = \"red\"\n)\n\nx <- rnorm(100)\ny <- 2 * x^2 + 1 + rnorm(100, 0, 0.4)\nplot(x, y,\n  main = \"Dépendance non-linéaire non monotone\",\n  xlab = \"\", ylab = \"\", col = \"red\"\n)\n\nx <- rnorm(100)\ny <- rnorm(100)\nplot(x, y,\n  main = \"Indépendance\",\n  xlab = \"\", ylab = \"\", col = \"red\"\n)\n\nx <- rnorm(100)\ny <- rnorm(100, 0, 0.03)\nplot(x, y,\n  main = \"Indépendance\",\n  xlab = \"\", ylab = \"\", col = \"red\", ylim = c(-2, 2)\n)\n```\n\n\nDans ce premier graphique généré sur nos données, il semble difficile de mettre en évidence une relation de dépendance. Si par contre on croise le pourcentage de cadres et celui de diplômés du supérieur, on obtient une belle relation de dépendance linéaire.\n\n```{r}\n#| fig-cap: Relation entre le nombre de personnes diplomées à l'université et le nombre\n#|   de cadre\nplot(dipl_sup ~ cadres, data = rp2012)\n```\n\n\n<!-- ### Calcul d'indicateurs\n\nEn plus d'une représentation graphique, on peut calculer certains indicateurs permettant de mesurer le degré d'association de deux variables quantitatives.\n\n##### Corrélation linéaire (Pearson)\n\nLa corrélation est une mesure du lien d'association *linéaire* entre deux variables quantitatives. Sa valeur varie entre -1 et 1. Si la corrélation vaut -1, il s'agit d'une association linéaire négative parfaite. Si elle vaut 1, il s'agit d'une association linéaire positive parfaite. Si elle vaut 0, il n'y a aucune association linéaire entre les variables.\n\nOn la calcule dans R à l'aide de la fonction `cor`.\n\nAinsi la corrélation entre le pourcentage de cadres et celui de diplômés du supérieur vaut :\n\n```{r}\ncor(rp2012$cadres, rp2012$dipl_sup)\n```\n\nCe qui est extrêmement fort. Il y a donc un lien linéaire et positif entre les deux variables (quand la valeur de l'une augmente, la valeur de l'autre augmente également).\n\nÀ l'inverse, la corrélation entre le pourcentage de cadres et le pourcentage de propriétaires vaut :\n\n```{r}\ncor(rp2012$cadres, rp2012$proprio)\n```\n\nCe qui indique, pour nos données, une absence de liaison linéaire entre les deux variables.\n\n\n\n\n##### Corrélation des rangs (Spearman)\n\nLe coefficient de corrélation de Pearson ci-dessus fait une hypothèse forte sur les données : elles doivent être liées par une association linéaire. Quand ça n'est pas le cas mais qu'on est en présence d'une association monotone, on peut utiliser un autre coefficient, le coefficient de corrélation des rangs de Spearman.\n\nPlutôt que de se baser sur les valeurs des variables, cette corrélation va se baser sur leurs rangs, c'est-à-dire sur leur position parmi les différentes valeurs prises par les variables.\n\nAinsi, si la valeur la plus basse de la première variable est associée à la valeur la plus basse de la deuxième, et ainsi de suite jusqu'à la valeur la plus haute, on obtiendra une corrélation de 1. Si la valeur la plus forte de la première variable est associée à la valeur la plus faible de la seconde, et ainsi de suite, et que la valeur la plus faible de la première est associée à la plus forte de la deuxième, on obtiendra une corrélation de -1. Si les rangs sont \"mélangés\", sans rapports entre eux, on obtiendra une corrélation autour de 0.\n\n\n```{r}\n#| echo: false\n#| fig-height: 10\n#| fig-width: 6\npar(mfrow = c(3, 2))\n\nx <- rnorm(100)\ny <- 2 * x + 1 + rnorm(100, 0, 0.4)\np <- round(cor(x, y), 2)\ns <- round(cor(x, y, method = \"spearman\"), 2)\ntitle <- paste0(\"Pearson : \", p, \" - Spearman : \", s)\nplot(x, y,\n  main = title,\n  xlab = \"\", ylab = \"\", col = \"red\"\n)\n\nx <- rnorm(100)\ny <- -3 * x + 15 + rnorm(100, 0, 0.4)\np <- round(cor(x, y), 2)\ns <- round(cor(x, y, method = \"spearman\"), 2)\ntitle <- paste0(\"Pearson : \", p, \" - Spearman : \", s)\nplot(x, y,\n  main = title,\n  xlab = \"\", ylab = \"\", col = \"red\"\n)\n\nx <- rnorm(100)\ny <- exp(x) + 1 + rnorm(100, 0, 0.4)\np <- round(cor(x, y), 2)\ns <- round(cor(x, y, method = \"spearman\"), 2)\ntitle <- paste0(\"Pearson : \", p, \" - Spearman : \", s)\nplot(x, y,\n  main = title,\n  xlab = \"\", ylab = \"\", col = \"red\"\n)\n\nx <- rnorm(100)\ny <- 2 * x^2 + 1 + rnorm(100, 0, 0.4)\np <- round(cor(x, y), 2)\ns <- round(cor(x, y, method = \"spearman\"), 2)\ntitle <- paste0(\"Pearson : \", p, \" - Spearman : \", s)\nplot(x, y,\n  main = title,\n  xlab = \"\", ylab = \"\", col = \"red\"\n)\n\nx <- rnorm(100)\ny <- rnorm(100)\np <- round(cor(x, y), 2)\ns <- round(cor(x, y, method = \"spearman\"), 2)\ntitle <- paste0(\"Pearson : \", p, \" - Spearman : \", s)\nplot(x, y,\n  main = title,\n  xlab = \"\", ylab = \"\", col = \"red\"\n)\n\nx <- rnorm(20)\ny <- x + 1 + rnorm(20, 0, 0.4)\nx <- c(x, 2, 1.8)\ny <- c(y, -2, -1.9)\np <- round(cor(x, y), 2)\ns <- round(cor(x, y, method = \"spearman\"), 2)\ntitle <- paste0(\"Pearson : \", p, \" - Spearman : \", s)\nplot(x, y,\n  main = title,\n  xlab = \"\", ylab = \"\", col = \"red\", ylim = c(-2, 2)\n)\n```\n\nLa corrélation des rangs a aussi pour avantage d'être moins sensibles aux valeurs extrêmes ou aux points isolés. On dit qu'elle est plus \"robuste\".\n\nPour calculer une corrélation de Spearman, on utilise la fonction `cor` mais avec l'argument `method = \"spearman\"` :\n\n```{r}\ncor(rp2012$cadres, rp2012$dipl_sup, method = \"spearman\")\n```\n\n#### Régression linéaire\n\nQuand on est en présence d'une association linéaire entre deux variables, on peut vouloir faire la régression linéaire d'une des variables sur l'autres.\n\nUne régression linéaire simple se fait à l'aide de la fonction `lm` :\n\n```{r}\nlm(rp2012$cadres ~ rp2012$dipl_sup)\n```\n\n::: {.callout-note}\nOn retrouve avec `lm` la syntaxe \"formule\" déjà rencontrée avec `boxplot`. Elle permet ici de spécifier des modèles de régression : la variable dépendante se place à gauche du `~`, et la variable indépendante à droite. Si on souhaite faire une régression multiple avec plusieurs variables indépendantes, on aura une formule du type `dep ~ indep1 + indep2`. Il est également possible de spécifier des termes plus complexes, des interactions, etc.\n:::\n\n`lm` nous renvoie par défaut les coefficients de la droite de régression :\n\n- l'ordonnée à l'origine `(Intercept)` vaut 0.92\n- le coefficient associé à `dipl_sup` vaut 1.08\n\nPour des résultats plus détaillés, on peut stocker le résultat de la régression dans un objet et utiliser la fonction `summary` :\n\n```{r}\nreg <- lm(rp2012$cadres ~ rp2012$dipl_sup)\nsummary(reg)\n```\n\nCes résultats montrent notamment que les coefficients sont significativement\ndifférents de 0. La part de cadres augmente donc bien avec celle de diplômés du supérieur.\n\nOn peut enfin représenter la droite de régression sur notre nuage de points à l'aide de la fonction `abline` :\n\n```{r}\nplot(rp2012$dipl_sup, rp2012$cadres)\nabline(reg, col = \"red\")\n```\n-->\n\n\n### Exercices {#ex-introR-biv}\n\n**Exercice 1**\n\nDans le jeu de données `hdv2003`, faire le tableau croisé entre la catégorie socio-professionnelle (variable `qualif`) et le fait de croire ou non en l'existence des classes sociales (variable `clso`). Identifier la variable indépendante et la variable dépendante, et calculer les pourcentages ligne ou colonne. Interpréter le résultat.\n\n```{r}\n#| include: false\n#| eval: false\nlibrary(questionr)\ndata(hdv2003)\ntab <- table(hdv2003$qualif, hdv2003$clso)\ntab\nlprop(tab)\nmosaicplot(tab, shade = TRUE)\n```\n\n\n\n::: {.callout-tip collapse=\"true\"}\n# Solution\n```{r}\n#| eval: false\nlibrary(questionr)\ndata(hdv2003)\ntab <- table(hdv2003$qualif, hdv2003$clso)\n\n## Ici la variable indépendante est `qualif`, on calcule donc\n## les pourcentages lignes\nlprop(tab)\n```\n:::\n\n\n<!--\nFaire un test du χ². Peut-on rejeter l'hypothèse d'indépendance ?\n\n\n::: {.callout-tip collapse=\"true\"}\n# Solution\n```{r}\n#| eval: false\nchisq.test(tab)\n```\n## On peut rejeter l'hypothèse d'indépendance au seuil de 0.05,\n## et même au seuil de 0.001\n:::\n-->\n\nReprésenter ce tableau croisé sous la forme d'un `mosaicplot` en colorant les cases selon les résidus du test du χ².\n\n\n::: {.callout-tip collapse=\"true\"}\n# Solution\n```{r}\n#| eval: false\nmosaicplot(tab, shade = TRUE)\n```\n:::\n\n\n\n\n**Exercice 2**\n\nToujours sur le jeu de données `hdv2003`, faire le boxplot qui croise le nombre d'heures passées devant la télévision (variable `heures.tv`) avec le statut d'occupation (variable `occup`).\n\n\n::: {.callout-tip collapse=\"true\"}\n# Solution\n```{r}\n#| eval: false\nboxplot(hdv2003$heures.tv ~ hdv2003$occup)\n```\n:::\n\n\n\n\nCalculer la durée moyenne devant la télévision en fonction du statut d'occupation à l'aide de `tapply`.\n\n\n::: {.callout-tip collapse=\"true\"}\n# Solution\n```{r}\n#| eval: false\ntapply(hdv2003$heures.tv, hdv2003$occup, mean, na.rm = TRUE)\n```\n:::\n\n**Exercice 3**\n\nSur le jeu de données `rp2012`, représenter le nuage de points croisant le pourcentage de personnes sans diplôme (variable `dipl_aucun`) et le pourcentage de propriétaires (variable `proprio`).\n\n::: {.callout-tip collapse=\"true\"}\n# Solution\n```{r}\n#| eval: false\nlibrary(questionr)\ndata(rp2012)\nplot(rp2012$dipl_aucun, rp2012$proprio)\n## ou\nplot(proprio ~ dipl_aucun, data = rp2012)\n```\n:::\n\n<!--\nCalculer le coefficient de corrélation linéaire correspondant.\n\n\n::: {.callout-tip collapse=\"true\"}\n# Solution\n```{r}\n#| eval: false\ncor(rp2012$dipl_aucun, rp2012$proprio)\n```\n:::\n-->\n\n## Gérer les données\n\n### Importer et exporter des données\n\nIl existe de multiple format four sauvegarder les données, les 2 plus utiles sont `.csv` et `.Rdata`.\nLes fichiers `.csv` sont utilisés pour stocker des données.\nIls sont ouvrables par les éditeurs de texte (e.g. Word, Writer, atom, ...) et les tableurs (e.g. MS Excel, LO Calc).\nIls sont lus avec la fonction `read.csv` et créés avec `write.csv`.\nLes fichiers `.Rdata` sont utilisés pour stocker n'importe quel objet R pas uniquement des données.\nCependant, ces fichiers ne peuvent être lus et utilisés que par R.\nCes fichiers sont lus avec la fonction `load` et créés avec la fonction `save`.\n\nLes données pour les exercices de laboratoire et pour les devoirs vous sont fournies en format `.csv`.\n\n\n#### Répertoire de travail\n\n::: {.callout-warning}\nUne des erreurs les plus communes lorsque l'on débute avec R est lié au chargement des données et la lecture de fichier externe à R.\n:::\nUn message d'erreur typique est:\n\n```r\nError in file(file, \"rt\") : cannot open the connection\nIn addition: Warning message:\nIn file(file, \"rt\") :\n  cannot open file 'ou_est_mon_fichier.csv': No such file or directory\n```\n\nL'erreur est du au fait que R ne sache pas où trouver le fichier. Par défaut lorsqu'on ouvre R, R utilise le dossier utilisateur sur l'ordinateur comme dossier de travail. Cela signifie que R va cherhcer à lire les fichiers dans ce dossier et écrire les nouveaux fichiers dans ce dossier. Ceci n'est pas toujours pratique surtout lorsque l'on débute avec R.\nPour lire/écrire un fichier dans un endroit particulier sur l'ordinateur, il faut spécifier à R le chemin de cet endroit. Cela peut ce faire de 3 manières différentes:\n\n1. avec la fonction `file.choose()`. La fonction ouvrira une boîte de dialogue vous permettant d’aller choisir un fichier sur votre ordinateur. Si cette option semble très attirante de part sa simplicité, je ne recommande pas de s'en servir car elle ne permet pas de reproduire l'analyse facilement. En effet, elle nécessite de choisir le document chaque fois que l'on souhaite l'utiliser.\n2. en spécifiant le chemin complet du fichier dans la commande. Par example `\"/home/julien/Documents/cours/BIO4558/labo/data/monfichier.csv\"`. C'est assez long à taper et surtout cela ne permet pas de facilement utliser le code sur un autre ordinateur.\n3. en spécifiant un répertoire de travail avec la fonction `setwd()`. Ceci indique à R de chercher et d'écrire les fichiers dans un dossier en particulier. Le chemin des fichiers est toujours interprété de manière relative au répertoire de travail. Cela à l'avantage de pouvoir facilement utiliser le même code sur plusieurs ordinateur ssi la structure du dossier est la même.\n\nPOur connaitre le répertoire de travail de R il faut utiliser la fonction `getwd()`. La fonction `setwd()` permet de spécifier le chemin du dossier à utiliser comme répertoire de travail.\n\n::: {.callout-note}\nSi vous ouvrez `RStudio` en double-cliquant sur un fichier `.R` alors `Rstudio` utlisera le dossier où ce fichier est présent comme répertoire de travail. Plutôt pratique car cela évite d'avoir à utiliser la fonction `setwd()`.\n:::\n\n::: {.callout-important}\nPour l'ensemble des laboratoire du cours, je suggère de créer un dossier dans lequel seront sauvegardés tous les scripts d'analyses et de sauvegardés tous les fichiers de données dans un sous dossier `data`. Le code du labo est structuré de cette manière. C'est pourquoi tous les codes de chargement ou d'écriture de données seront du type `data/mon_fichier.xxx`.\n:::\n\n#### Ouvrir un fichier de données en format `.Rdata`\n\nPour ouvrir ces fichiers, vous pouvez cliquer dessus et laisser votre système d’exploitation démarrer une nouvelle session de R ou encore, à partir de la console de R, utliser la fonction `load` avec le nom et le chemin du fichier de données.\nPar example, pour ouvrir le fichier `ErablesGatineau.Rdata` qui se situe dans le dossier `data` du dossier de travail, il faut taper:\n\n```{r}\n#| label: load\n#| eval: false\nload(\"data/ErablesGatineau.Rdata\")\n```\n\n\n#### Ouvrir un fichier de données en format `.csv`\n\nPour importer ces données en format `.csv` dans R, il faut utiliser la commande `read.csv()`.\nPar exemple, pour créer un objet R `erables` qui contient les données du fichier `ErablesGatineau.csv`, il faut utiliser la commande suivant.\n\n```{r}\n#| label: erables\nerables <- read.csv(\"data/ErablesGatineau.csv\")\n```\n\n::: {.callout-warning}\nAttention si vous travaillez dans une langue utilisant la virgule au lieu du point décimal.\nPar défaut, R utilise le point décimal et vous n’obtiendrez pas le résultat escompté.\nIl existe une version modifiée de `read.csv()` appelée `read.csv2()` qui règle ce problème.\nGooglez-la si vous en avez besoin.\n:::\n\nPour vérifier si les données ont bel et bien été lues, vous pouvez lister les objets en mémoire avec la fonction `ls()` ou en obtenir une liste avec une description plus détaillée avec `ls.str()`.\n\n::: {.callout-note}\nJe vous déconseille cependant, la fonction `ls.str()` car elle peut produire des sorties extrèmementn longue si vous avez beaucoup d'objet dans l'environnement R. Je vous suggère donc d'utliser `ls()` et ensuite `str()` sur l'objet qui vous intéresse.\n:::\n\n```{r}\n#| label: ls\nls()\nstr(erables)\n```\n\nR confirme avoir en mémoire l’objet `erables`.\n`erables` est un tableau de données rectangulaire (data.frame) contenant 100 observations (lignes) de 3 variables (colonnes): `station`, une variable de type Facteur avec 2 niveaux, et `diam` et `biom` qui sont 2 variables numériques.\n\n\n#### Entrer des données\n\nR n’est pas un environnement idéal pour entrer des données.\nC’est possible, mais la syntaxe est lourde et peut inciter à s'arracher les cheveux.\nUtilisez votre chiffrier préféré pour faire l’entrée de données.\nCe sera plus efficace et moins frustrant.\n\n\n#### Nettoyer/corriger des données\n\nUne autre opération qui peut être frustrante en R.\nMon conseil : ne le faites pas là.\nRetournez au fichier original, faites la correction, puis re-exportez les données vers R.\nIl est finalement plus simple de refaire exécuter les quelques lignes de code par la machine.\nVous aurez à la fin une seule version (corrigée) de vos données et un code qui vous permet de refaire votre analyse.\n\n\n#### Exporter des données à partir de R.\n\nVous pouvez utiliser la fonction,\n\n```{r}\n#| label: write\n#| eval: false\nwrite.csv(mydata, file = \"outfilename.csv\", row.names = FALSE)\n```\n\noù `mydata` est le nom du base de données à exporter et `outfilename.csv` est le nom du fichier à produire.\nNotez que ce fichier sera créé dans le répertoire de travail (qui peut être changé par le menu à `File>Change dir`, ou par la commande `setwd()`)\n\n\n### Examen préliminaire des données\n\nLa première étape de toute analyse est l’examen des données.\nElle nous permet de découvrir si on a bien importé les données, si les nombres enregistrés sont possibles, si toutes les données ont bien été lues, etc.\nL’examen préliminaire des données permet souvent aussi d’identifier des observations suspectes, possiblement dûes à des erreurs d’entrée de donnée.\nFinalement, l’examen graphique préliminaire permet en général de visualiser les tendances principales qui seront confirmées par l’analyse statistique en tant que telle.\nLe fichier `sturgeon.csv` contient les données d’une étude effectuée sur les esturgeons de la rivière Saskatchewan.\nCes données ont été récoltées, entre autres, pour examiner comment la taille des esturgeons varie entre les sexes (sex), les sites (location), et les années (year).\n\n<!-- - Pour recommencer avec une ardoise vide, videz la mémoire de R de tout son contenu en tapant la commande `rm(list=ls())`-->\n\n- Chargez les données du fichier `sturgeon.csv` dans un objet `sturgeon`.\n- Pour obtenir un aperçu des éléments du fichier qui ont été chargés en mémoire, taper la commande `str(sturgeon)`.\n\n```{r}\n#| label: load-stur\nsturgeon <- read.csv(\"data/sturgeon.csv\")\nstr(sturgeon)\n```\n\n#### Sommaire statistique\n\nPour un sommaire du contenu du base de données appelé sturgeon qui est en mémoire, taper la commande\n\n```{r}\n#| label: sum-stur\nsummary(sturgeon)\n```\n\nPour chaque variable, R donne le minimum, le maximum, la médiane qui est la valeur au milieu de la liste des observations ordonnées (appelée le 50 ième percentile), ici, la 93 ième valeur des 186 observations, les valeurs au premier (25%) et troisième quartile (75%), et si il y a des valeurs manquantes dans la colonne.\nNotez que plusieurs des variables ont des observations manquantes (NA).\nDonc, seules les variables fklngth (longueur à la fourche), sex, location et year ont 186 observations.\n\n::: {.callout-warning}\n**Attention aux valeurs manquantes**\nPlusieurs fonctions de R y réagissent mal et on doit souvent faire les analyses sur des sous- ensembles sans valeur manquante, par des commandes ou des options dans les commandes.\nOn y reviendra, mais prenez l’habitude de noter mentalement si il y a des données manquantes et de vous en rappeler en faisant l’analyse.\n:::\n\n#### Histogramme, densité de probabilité empirique, boxplot et examen visuel de la normalité\n\nExaminons maintenant de plus près la distribution de fklngth.\nLa commande `hist()` permet de tracer un histogramme de la variable fklngth dans le base de données sturgeon.\n\n```{r}\n#| label: hist-stur\nhist(sturgeon$fklngth)\n```\n\nLes données semblent suivre approximativement une distribution normale.\n\n::: {.callout-note}\nCette syntaxe peut paraître un peu lourde puisqu’on doit ajouter le préfixe `sturgeon$` devant chaque nom de variable.\nOn pourrait se faciliter la tâche en utilisant la commande `attach()` **mais cela est fortement déconseillé** et jamais utilisé dans ce document.\n:::\n\nCet histogramme est la représentation classique.\nMais les histogrammes ne sont pas parfaits.\nLeur forme dépend en partie du nombre de catégories utilisées, surtout pour les petits échantillons.\nOn peut faire mieux, particulièrement si on est intéressé à comparer visuellement la distribution des observations à une distribution normale.\nMais il faut programmer un peu (ou savoir copier-coller...).\nLe code suivant est un histogramme fait avec l'extension `ggplot2`.\n\n::: {.callout-caution}\n# Exercice\nCopiez-collez le code suivant dans une nouvelle fenêtre script (File->New script, ou Ctrl-n dans Windows), puis exécutez le.\n:::\n\n```{r}\n#| label: stur-g1\n#| warning: false\n#| message: false\n## Chargez l'extension ggplot si besoin\nlibrary(ggplot2)\n##  créer un graphique `mygraph` utilisant les données de \"sturgeon\"\n## et définir l'axe des X comme la longueur `fklngth`\nmygraph <- ggplot(data = sturgeon, aes(x = fklngth))\n\n## ajouter différentes parties au graphique\nmygraph <- mygraph +\n  ## histogramme semi-transparent\n  geom_histogram(aes(y = ..density..), bins = 30, color = \"black\", alpha = 0.3) +\n  ##  line de densité\n  geom_density() +\n  ##  localisation des observations\n  geom_rug() +\n  ##  courbe de distribution normale approximé au données\n  stat_function(\n    fun = dnorm,\n    args = list(\n      mean = mean(sturgeon$fklngth),\n      sd = sd(sturgeon$fklngth)\n    ),\n    color = \"red\"\n  )\n\n## montrer le graphique\nmygraph\n```\n\nChaque observation est représentée par une barre sous l’axe des x (rug).\nEn rouge est la distribution normale de données avec la même moyenne et écart-type que les observations.\nEt l’autre ligne est la densité de probabilité empirique, « lissée » à partir des observations.\nSi vous êtes plus aventureux, vous pouvez examiner la distribution des observations de fklngth par sous-groupes (par exemple sex et year) avec :\n\n```{r}\n#| label: aventure\nmygraph + facet_grid(year ~ sex)\n```\n\nChaque panneau illustre la distribution pour un sexe cette année-là, et la courbe en rouge récurrente représente la distribution normale pour l’ensemble des données.\nCette courbe peut servir à mieux évaluer visuellement les différences entre les panneaux.\nUne autre façon d’évaluer la normalité de données visuellement est de faire un QQ plot avec la paire de commandes `qqnorm()` et `qqline()`.\n```{r}\n#| label: stur-norm\nqqnorm(sturgeon$fklngth)\nqqline(sturgeon$fklngth)\n```\n\nDes données parfaitement normales suivraient la ligne droite diagonale.\nIci, il y a des déviations dans les queues de la distribution, et un peu à droite du centre.\nComparez cette représentation à celle des deux graphiques précédents.\nVous conviendrez sans doute avec moi qu’il est plus facile de visualiser comment la distribution dévie de la normalité sur les histogrammes et les graphiques de la densité empirique de probabilité que sur les QQ plots.\nCeci dit, les QQ plots sont souvent utilisés et vous devriez être capable de les interpréter.\nDe plus, on peut facilement éprouver statistiquement l’hypothèse que les données sont distribuées normalement avec R par la commande `shapiro.test()` qui calcule une statistique (W) qui est une mesure de la tendance des points d’un QQ plot à former une ligne parfaite.\nSi oui, alors W=1.\nSi W s’éloigne de 1 (vers 0), alors les données s’éloignent de la normalité.\nIci,\n```{r}\n#| label: shapito-stur\nshapiro.test(sturgeon$fklngth)\n```\n\nW n’est pas très loin de 1, mais suffisamment pour que la différence soit significative.\nL’examen visuel des grands échantillons est souvent compliqué par le fait que plusieurs points se superposent et qu’il devient plus difficile de bien visualiser la tendance centrale.\nLes boxplots avec \"moustaches\" (box and whiskers plots) offrent une alternative intéressante.\nLa commande `boxplot()` peut produire un boxplot de fklngth pour chaque niveau de sex, et ajoute les coches.\n\n```{r}\n#| label: boxplot-stur\nboxplot(fklngth ~ sex, data = sturgeon, notch = TRUE)\n```\n\nLa ligne un peu plus épaisse dans la boîte de la Figure indique la médiane.\nLa coche est proportionnelle à l’incertitude quant à la position de la médiane.\nOn peut visuellement interpréter approximativement les différences entre médianes en examinant si il y a chevauchement entre les coches (ici, il n’y a pas chevauchement, et on conclurait provisoirement que la médiane de fklngth pour les femelles est supérieure à celle des mâles).\nLes boîtes s’étendent du premier au troisième quartile (du 25ième au 75ième percentile si vous préférez), Les barres (moustaches ou whiskers) au-dessus et en dessous des boîtes s’étendent soit de la valeur minimum à la valeur maximum, ou, si il y a des valeurs extrêmes, de la plus petite à la plus grande valeur à l’intérieur de 1.5x la largeur de l’étendue interquartile .\nEnfin, les observations qui excèdent les limites des moustaches (donc à plus de 1.5x l’étendue interquartile de chaque côté de la médiane) sont indiquées par des symboles.Ce sont des valeurs qui pourraient être considérées comme extrêmes et possiblement aberrantes.\n\n#### Diagrammes de dispersion bivariés\n\nEn plus des graphiques pour chacune des variables séparément, il est très souvent intéressant de jeter un coup d’oeil aux diagrammes de dispersion .\nLa commande `plot(y~x)` permet de faire le graphique de y sur l’axe vertical (l’ordonnée) en fonction de x sur l’axe horizontal (l’abscisse).\n\n::: {.callout-caution}\n# Exercice\n Faites un graphique de fklngth en fonction de age avec la commande plot.\n:::\n\nVous devriez obtenir:\n\n```{r}\n#| label: stur-biv-plot\nplot(fklngth ~ age, data = sturgeon)\n```\n\nR a une fonction qui permet la création des graphiques de dispersion de toutes les paires de variables (`pairs()`).\nUne des option de ¬ est l’ajout d’une trace lowess qui indique la tendance de la relation entre les variables.\nPour obtenir la matrice de ces graphiques avec la trace lowess pour toutes les variable dans sturgeon, entrer la commande `pairs(sturgeon[,1:6], panel=panel.smooth)` et vous devriez obtenir\n\n```{r}\n#| label: pairs-stur\npairs(sturgeon[, 1:6], panel = panel.smooth)\n```\n\n### Créer des sous-ensembles de cas\n\nIl arrive fréquemment qu'une analyse se concentre sur un sous-ensemble des observations contenues dans un fichier de données.\nLes cas sont d’habitude sélectionnés selon un critère en particulier.\nPour utiliser un sous-ensemble de vos données en créant un graphique ou en performant une analyse, on peut utiliser la commande `subset()`.\nPar exemple, pour créer un sous ensemble des données du tableau sturgeon qui ne contient que les femelles capturées en 1978, on peut écrire :\n\n```{r}\n#| label: stur-subset\nsturgeon_female_1978 <- subset(sturgeon, sex == \"FEMALE\" & year == \"1978\")\nsturgeon_female_1978\n```\n\n::: {.callout-warning}\nDans ces comparaisons, il faut toujours utiliser `==` pour égal à.\nDans ce contexte, si vous utilisez `=` seulement, vous n’obtiendrez pas ce que vous désirez.\nDans le tableau qui suit se trouve une liste de commandes communes que vous allez probablement utiliser pour créer des expressions en R.\n:::\n\nOperateur | Explication | Operateur | Explication\n----------|----------|----------|----------\n ==       | Égal à   | !=       | Pas égal à\n \\>       | Plus que | <        | Moins que\n \\>=      | Plus que ou égal à | <= | Moins que ou égal à\n \\& | Et vectorisé | \\| | Ou vectorisé\n \\&\\& | Et contrôle | \\|\\| | Ou contrôle\n ! | Pas | |\n\n::: {.callout-caution}\n# Exercice\nEn utilisant les commandes `subset()` et `hist()`, essayez de faire un histogramme pour le sous-ensemble de cas correspondant aux femelles capturées en 1979 et 1980 (donc `sex == \"FEMALE\" & (year == \"1979\" | year == \"1980\")`)\n:::\n\n::: {.callout-tip collapse=\"true\"}\n# Solution\n```{r }\n#| label: intror-subex\n#| warning: false\n#| message: false\nsub_female_7980 <- subset(sturgeon, sex == \"FEMALE\" & (year == \"1979\" | year == \"1980\"))\nhist(sub_female_7980$fklngth)\n```\n:::\n\n### Transformations de données\n\nIl est très fréquemment nécessaire d’effectuer des transformations mathématiques sur les données brutes pour mieux satisfaire aux conditions d’application de tests statistiques.\nR étant aussi un langage de programmation complet, il peut donc effectuer les transformations désirées.\nLes fonctions les plus fréquemment utilisées sont:\n\n- `log()`\n- `sqrt()`\n- `ifelse()`\n\nOn peut employer ces fonctions directement dans les lignes de commandes, ou encore créer de nouvelles variables orphelines ou faisant partie d’un data.frame.\nPar exemple, pour faire un graphique du logarithme décimal de fklngth en fonction de l’âge, on peut écrire\n\n```{r}\n#| label: plot-translog-stur-plot\n#| eval: false\nplot(log(fklngth) ~ age, data = sturgeon)\n```\n\n Pour créer une variable orpheline (i.e. non incluse dans le data.frame) appelée logfklngth et contenant le logarithme décimal de fklngth, on peut écrire\n\n ```{r}\n #| label: translog-stur-orph\n #| eval: false\nlogfklngth <- log10(sturgeon$fklngth)\n ```\n\nSi on veut ajouter cette variable transformée à un tableau de données (data.frame), alors, on doit préfixer le nom de la variable par le nom du base de données et du symbole `$`, par exemple, pour ajouter une variable nommée `lfkl` contenant le log10 de fklngth au tableau sturgeon, on peut écrire:\n\n```{r}\n#| label: translog-stur-dat\n#| eval: false\nsturgeon$logfkl <- log10(sturgeon$fklngth)\n```\n\nN’oubliez pas de sauvegarder ce tableau modifié si vous voulez avoir accès à cette nouvelle variable dans le futur.\nPour les transformations conditionnelles, on peut utiliser la fonction `ifelse()`.\nPar exemple, pour créer une nouvelle variable appelée dummy qui sera égale à 1 pour les mâles et 0 pour les femelles, on peut écrire:\n\n```{r}\n#| label: translog-stur-dummy\n#| eval: false\nsturgeon$dummy <- ifelse(sturgeon$sex == \"MALE\", 1, 0)\n```\n\n\n### Exercice sur R\n\nVous trouverez dans le fichier `salmonella.csv`, des valeurs numériques du ratio d'infection des cellules par la salmonelle dans deux milieux (IN VITRO et IN VIVO) et pour trois souches différentes de salmonelles.\nExaminez les données pour le ratio et faites des graphiques pour évaluer la normalité de la distribution des ratios pour la souche SAUVAGE dans les 2 milieux combinés et produire un graphique.\n\n::: {.callout-tip collapse=\"true\"}\n# Solution\n```{r}\n#| label: intror-exer\n#| warning: false\n#| message: false\n#| fig-cap: Distibution des ratios d'infections par la souche sauvage de salmonelle\n## Charger les données\nsalmonella <- read.csv(\"data/salmonella.csv\")\n\n## creer le graph en utilisant juste la souche sauvage et définir x\nmygraph <- ggplot(subset(salmonella, souche == \"SAUVAGE\"), aes(x = ratio))\n## ajouter des composants graphiques\nmygraph <- mygraph +\n  # line densité\n  geom_density() +\n  # position des observations\n  geom_rug() +\n  # histogramme\n  geom_histogram(aes(y = ..density..),\n    bins = 30,\n    color = \"black\",\n    alpha = 0.3\n  ) +\n  # distribution normal ajustée\n  stat_function(\n    fun = dnorm,\n    args = list(\n      mean = mean(subset(salmonella, souche == \"SAUVAGE\")$ratio),\n      sd = sd(subset(salmonella, souche == \"SAUVAGE\")$ratio)\n    ),\n    color = \"red\"\n  )\n## faire le graphique\nmygraph\n```\n:::\n\n\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":true,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","from":"markdown+emoji","number-sections":true,"output-file":"02-introR.html"},"language":{"toc-title-document":"Table des matières","toc-title-website":"Sur cette page","related-formats-title":"Autres formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"La source","other-links-title":"Autres liens","code-links-title":"Liens de code","launch-dev-container-title":"Lancer le Dev Container","launch-binder-title":"Lancer le Binder","article-notebook-label":"Cahier d'articles","notebook-preview-download":"Télécharger le cahier","notebook-preview-download-src":"Télécharger le code source","notebook-preview-back":"Retour à l'article","manuscript-meca-bundle":"Archive MECA","section-title-abstract":"Résumé","section-title-appendices":"Annexes","section-title-footnotes":"Notes de bas de page","section-title-references":"Les références","section-title-reuse":"Réutilisation","section-title-copyright":"Droits d'auteur","section-title-citation":"Citation","appendix-attribution-cite-as":"Veuillez citer ce travail comme suit :","appendix-attribution-bibtex":"BibTeX","appendix-view-license":"Voir la Licence","title-block-author-single":"Auteur·rice","title-block-author-plural":"Auteur·rice·s","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Date de publication","title-block-modified":"Modifié","title-block-keywords":"Mots clés","callout-tip-title":"Astuce","callout-note-title":"Note","callout-warning-title":"Avertissement","callout-important-title":"Important","callout-caution-title":"Mise en garde","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Montrer tout le code","code-tools-hide-all-code":"Cacher tout le code","code-tools-view-source":"Voir les sources","code-tools-source-code":"Code source","tools-share":"Share","tools-download":"Télécharger","code-line":"Ligne","code-lines":"Lignes","copy-button-tooltip":"Copier vers le presse-papier","copy-button-tooltip-success":"Copié","repo-action-links-edit":"Modifier cette page","repo-action-links-source":"Voir la source","repo-action-links-issue":"Faire part d'un problème","back-to-top":"Retour au sommet","search-no-results-text":"Pas de résultats","search-matching-documents-text":"documents trouvés","search-copy-link-title":"Copier le lien vers la recherche","search-hide-matches-text":"Cacher les correspondances additionnelles","search-more-match-text":"correspondance de plus dans ce document","search-more-matches-text":"correspondances de plus dans ce document","search-clear-button-title":"Effacer","search-text-placeholder":"","search-detached-cancel-button-title":"Annuler","search-submit-button-title":"Envoyer","search-label":"Recherche","toggle-section":"Basculer la section","toggle-sidebar":"Basculer la barre latérale","toggle-dark-mode":"Basculer le mode sombre","toggle-reader-mode":"Basculer en mode lecteur","toggle-navigation":"Basculer la navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Théorème","crossref-lem-title":"Lemme","crossref-cor-title":"Corollaire","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Définition","crossref-exm-title":"Exemple","crossref-exr-title":"Exercice","crossref-ch-prefix":"Chapitre","crossref-apx-prefix":"Annexe","crossref-sec-prefix":"Section","crossref-eq-prefix":"Équation","crossref-lof-title":"Liste des Figures","crossref-lot-title":"Liste des Tables","crossref-lol-title":"Liste des Listings","environment-proof-title":"Preuve","environment-remark-title":"Remarque","environment-solution-title":"Solution","listing-page-order-by":"Trier par","listing-page-order-by-default":"Ordre par défaut","listing-page-order-by-date-asc":"Le plus ancien","listing-page-order-by-date-desc":"Le plus récent","listing-page-order-by-number-desc":"Descendant","listing-page-order-by-number-asc":"Ascendant","listing-page-field-date":"Date","listing-page-field-title":"Titre","listing-page-field-description":"Description","listing-page-field-author":"Auteur·rice","listing-page-field-filename":"Nom de fichier","listing-page-field-filemodified":"Modifié","listing-page-field-subtitle":"Sous-titre","listing-page-field-readingtime":"Temps de lecture","listing-page-field-wordcount":"Compteur de Mots","listing-page-field-categories":"Catégories","listing-page-minutes-compact":"{0} min.","listing-page-category-all":"Tous","listing-page-no-matches":"Aucun article correspondant","listing-page-words":"{0} mots","listing-page-filter":"Filtre","draft":"Brouillon"},"metadata":{"lang":"fr-fr","fig-responsive":true,"quarto-version":"1.5.45","version":"0.6.0","year":2024,"bibliography":["biblio/book.bib","biblio/grateful-refs.bib"],"biblio-style":"apalike","csl":"biblio/ecology.csl","params":{"echo_sol":true,"longrun":false,"html_pdf":true},"cit-title":"Faites ce que vous pensez être intéressant,  \nfaites quelque chose que vous pensez être utile et amusant,  \nparce que sinon, vous ne le ferez pas bien de toute façon.\n","cit-author":"Brian W. Kernighan","theme":{"light":"cosmo","dark":["cosmo","css/theme-dark.scss"]},"author-meta":"Julien Martin"},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"paged","error":false,"eval":true,"cache":true,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"lualatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","from":"markdown+emoji","number-sections":true,"output-file":"02-introR.pdf"},"language":{"toc-title-document":"Table des matières","toc-title-website":"Sur cette page","related-formats-title":"Autres formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"La source","other-links-title":"Autres liens","code-links-title":"Liens de code","launch-dev-container-title":"Lancer le Dev Container","launch-binder-title":"Lancer le Binder","article-notebook-label":"Cahier d'articles","notebook-preview-download":"Télécharger le cahier","notebook-preview-download-src":"Télécharger le code source","notebook-preview-back":"Retour à l'article","manuscript-meca-bundle":"Archive MECA","section-title-abstract":"Résumé","section-title-appendices":"Annexes","section-title-footnotes":"Notes de bas de page","section-title-references":"Les références","section-title-reuse":"Réutilisation","section-title-copyright":"Droits d'auteur","section-title-citation":"Citation","appendix-attribution-cite-as":"Veuillez citer ce travail comme suit :","appendix-attribution-bibtex":"BibTeX","appendix-view-license":"Voir la Licence","title-block-author-single":"Auteur·rice","title-block-author-plural":"Auteur·rice·s","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Date de publication","title-block-modified":"Modifié","title-block-keywords":"Mots clés","callout-tip-title":"Astuce","callout-note-title":"Note","callout-warning-title":"Avertissement","callout-important-title":"Important","callout-caution-title":"Mise en garde","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Montrer tout le code","code-tools-hide-all-code":"Cacher tout le code","code-tools-view-source":"Voir les sources","code-tools-source-code":"Code source","tools-share":"Share","tools-download":"Télécharger","code-line":"Ligne","code-lines":"Lignes","copy-button-tooltip":"Copier vers le presse-papier","copy-button-tooltip-success":"Copié","repo-action-links-edit":"Modifier cette page","repo-action-links-source":"Voir la source","repo-action-links-issue":"Faire part d'un problème","back-to-top":"Retour au sommet","search-no-results-text":"Pas de résultats","search-matching-documents-text":"documents trouvés","search-copy-link-title":"Copier le lien vers la recherche","search-hide-matches-text":"Cacher les correspondances additionnelles","search-more-match-text":"correspondance de plus dans ce document","search-more-matches-text":"correspondances de plus dans ce document","search-clear-button-title":"Effacer","search-text-placeholder":"","search-detached-cancel-button-title":"Annuler","search-submit-button-title":"Envoyer","search-label":"Recherche","toggle-section":"Basculer la section","toggle-sidebar":"Basculer la barre latérale","toggle-dark-mode":"Basculer le mode sombre","toggle-reader-mode":"Basculer en mode lecteur","toggle-navigation":"Basculer la navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Théorème","crossref-lem-title":"Lemme","crossref-cor-title":"Corollaire","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Définition","crossref-exm-title":"Exemple","crossref-exr-title":"Exercice","crossref-ch-prefix":"Chapitre","crossref-apx-prefix":"Annexe","crossref-sec-prefix":"Section","crossref-eq-prefix":"Équation","crossref-lof-title":"Liste des Figures","crossref-lot-title":"Liste des Tables","crossref-lol-title":"Liste des Listings","environment-proof-title":"Preuve","environment-remark-title":"Remarque","environment-solution-title":"Solution","listing-page-order-by":"Trier par","listing-page-order-by-default":"Ordre par défaut","listing-page-order-by-date-asc":"Le plus ancien","listing-page-order-by-date-desc":"Le plus récent","listing-page-order-by-number-desc":"Descendant","listing-page-order-by-number-asc":"Ascendant","listing-page-field-date":"Date","listing-page-field-title":"Titre","listing-page-field-description":"Description","listing-page-field-author":"Auteur·rice","listing-page-field-filename":"Nom de fichier","listing-page-field-filemodified":"Modifié","listing-page-field-subtitle":"Sous-titre","listing-page-field-readingtime":"Temps de lecture","listing-page-field-wordcount":"Compteur de Mots","listing-page-field-categories":"Catégories","listing-page-minutes-compact":"{0} min.","listing-page-category-all":"Tous","listing-page-no-matches":"Aucun article correspondant","listing-page-words":"{0} mots","listing-page-filter":"Filtre","draft":"Brouillon"},"metadata":{"block-headings":false,"version":"0.6.0","year":2024,"bibliography":["biblio/book.bib","biblio/grateful-refs.bib"],"biblio-style":"apalike","csl":"biblio/ecology.csl","params":{"echo_sol":true,"longrun":false,"html_pdf":true},"lang":"fr-fr","cit-title":"Faites ce que vous pensez être intéressant,  \nfaites quelque chose que vous pensez être utile et amusant,  \nparce que sinon, vous ne le ferez pas bien de toute façon.\n","cit-author":"Brian W. Kernighan","documentclass":"scrreprt","classoption":["chapterprefix=true","headings=big","twoside=semi"],"papersize":"letter","fontsize":"11pt","geometry":["top=2cm","bottom=2cm","left=2cm","right=2cm","footskip=1cm"],"colorlinks":true,"linestretch":1.5,"template-partials":["latex/before-title.tex","latex/before-body.tex"]},"extensions":{"book":{"selfContainedOutput":true}}},"epub":{"identifier":{"display-name":"ePub","target-format":"epub","base-format":"epub"},"execute":{"fig-width":5,"fig-height":4,"fig-format":"png","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"epub","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":false,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"default-image-extension":"png","html-math-method":"mathml","to":"epub","from":"markdown+emoji","toc":true,"output-file":"02-introR.epub"},"language":{"toc-title-document":"Table des matières","toc-title-website":"Sur cette page","related-formats-title":"Autres formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"La source","other-links-title":"Autres liens","code-links-title":"Liens de code","launch-dev-container-title":"Lancer le Dev Container","launch-binder-title":"Lancer le Binder","article-notebook-label":"Cahier d'articles","notebook-preview-download":"Télécharger le cahier","notebook-preview-download-src":"Télécharger le code source","notebook-preview-back":"Retour à l'article","manuscript-meca-bundle":"Archive MECA","section-title-abstract":"Résumé","section-title-appendices":"Annexes","section-title-footnotes":"Notes de bas de page","section-title-references":"Les références","section-title-reuse":"Réutilisation","section-title-copyright":"Droits d'auteur","section-title-citation":"Citation","appendix-attribution-cite-as":"Veuillez citer ce travail comme suit :","appendix-attribution-bibtex":"BibTeX","appendix-view-license":"Voir la Licence","title-block-author-single":"Auteur·rice","title-block-author-plural":"Auteur·rice·s","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Date de publication","title-block-modified":"Modifié","title-block-keywords":"Mots clés","callout-tip-title":"Astuce","callout-note-title":"Note","callout-warning-title":"Avertissement","callout-important-title":"Important","callout-caution-title":"Mise en garde","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Montrer tout le code","code-tools-hide-all-code":"Cacher tout le code","code-tools-view-source":"Voir les sources","code-tools-source-code":"Code source","tools-share":"Share","tools-download":"Télécharger","code-line":"Ligne","code-lines":"Lignes","copy-button-tooltip":"Copier vers le presse-papier","copy-button-tooltip-success":"Copié","repo-action-links-edit":"Modifier cette page","repo-action-links-source":"Voir la source","repo-action-links-issue":"Faire part d'un problème","back-to-top":"Retour au sommet","search-no-results-text":"Pas de résultats","search-matching-documents-text":"documents trouvés","search-copy-link-title":"Copier le lien vers la recherche","search-hide-matches-text":"Cacher les correspondances additionnelles","search-more-match-text":"correspondance de plus dans ce document","search-more-matches-text":"correspondances de plus dans ce document","search-clear-button-title":"Effacer","search-text-placeholder":"","search-detached-cancel-button-title":"Annuler","search-submit-button-title":"Envoyer","search-label":"Recherche","toggle-section":"Basculer la section","toggle-sidebar":"Basculer la barre latérale","toggle-dark-mode":"Basculer le mode sombre","toggle-reader-mode":"Basculer en mode lecteur","toggle-navigation":"Basculer la navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Théorème","crossref-lem-title":"Lemme","crossref-cor-title":"Corollaire","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Définition","crossref-exm-title":"Exemple","crossref-exr-title":"Exercice","crossref-ch-prefix":"Chapitre","crossref-apx-prefix":"Annexe","crossref-sec-prefix":"Section","crossref-eq-prefix":"Équation","crossref-lof-title":"Liste des Figures","crossref-lot-title":"Liste des Tables","crossref-lol-title":"Liste des Listings","environment-proof-title":"Preuve","environment-remark-title":"Remarque","environment-solution-title":"Solution","listing-page-order-by":"Trier par","listing-page-order-by-default":"Ordre par défaut","listing-page-order-by-date-asc":"Le plus ancien","listing-page-order-by-date-desc":"Le plus récent","listing-page-order-by-number-desc":"Descendant","listing-page-order-by-number-asc":"Ascendant","listing-page-field-date":"Date","listing-page-field-title":"Titre","listing-page-field-description":"Description","listing-page-field-author":"Auteur·rice","listing-page-field-filename":"Nom de fichier","listing-page-field-filemodified":"Modifié","listing-page-field-subtitle":"Sous-titre","listing-page-field-readingtime":"Temps de lecture","listing-page-field-wordcount":"Compteur de Mots","listing-page-field-categories":"Catégories","listing-page-minutes-compact":"{0} min.","listing-page-category-all":"Tous","listing-page-no-matches":"Aucun article correspondant","listing-page-words":"{0} mots","listing-page-filter":"Filtre","draft":"Brouillon"},"metadata":{"version":"0.6.0","year":2024,"bibliography":["biblio/book.bib","biblio/grateful-refs.bib"],"biblio-style":"apalike","csl":"biblio/ecology.csl","params":{"echo_sol":true,"longrun":false,"html_pdf":true},"lang":"fr-fr","cit-title":"Faites ce que vous pensez être intéressant,  \nfaites quelque chose que vous pensez être utile et amusant,  \nparce que sinon, vous ne le ferez pas bien de toute façon.\n","cit-author":"Brian W. Kernighan","dev":"svglite","stylesheet":"css/epub.css"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","pdf","epub"]}